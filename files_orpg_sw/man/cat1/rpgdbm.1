
NAME
    rpgdbm - The ORPG Database manager.

SYNOPSIS
    rpgdbm [-mrsv] 

DESCRIPTION

    rpgdbm manages RPG databases: The product database and the user profile
    database. Additional databases can be easily added in the future. The RPG
    products are stored in ORPGDAT_PRODUCTS and the user profiles are stored in
    ORPGDAT_USER_PROFILES(4). rpgdbm builds databases in memory using the Simple
    Database Query Manager (SDQM) libinfr module for supporting efficient and
    convenient product and user profile query. See sdqm(3) for more details on
    the SDQM package. Disk space is used more efficiently with all products
    stored in a single LB. We may also see reduced I/O activities due to less
    pages having to be mapped into physical memory.

    For each data base, rpgdbm creates and maintains a Simple Database in
    memory. A Simple Database is a collection of records with index tables for
    efficient query support. Each record corresponds to an item (e.g. a product
    or an user profile) in the database data store ( ORPGDAT_PRODUCTS(4) or
    ORPGDAT_USER_PROFILES(4). A record contains all those fields that are subject
    to query. Index tables are set up for accelerating mostly used query
    operations. rpgdbm, when it is started, scans all messages in the database
    data stores and builds a Simple Database for each RPG database. rpgdbm
    registers the message update events of RPG database data stores. When a
    message in a database data store (e.g. a product or an user profile) is
    generated, updated or deleted, rpgdbm updates its Simple Databases
    accordingly. A query result contains a list of found records. The size of a
    Simple Database is identical to the size of the corresponding database data
    store.

    The data structures for Simple Database records are defined in rpgdbm.h.

    rpgdbm uses Client/Server Support (CSS) library module for supporting RPG
    database query from any ORPG application. Refer to css(3). When rpgdbm is
    started with the "-v" option, it sends an LE message publishing the server
    address for RPG database query.

    For product database rpgdbm implements the following additional
    functionality.

    A product returned from a query is guaranteed to exist in the ORPG product
    data store for at least one minute. To implement this feature, the usable
    size is slightly smaller than the database data store size. When rpgdbm is
    started with the "-v" option, it sends an LE message telling the actual
    capacity of the database.

    When a product is added in the database, an expiration time is assigned to
    the product according to the current product retention time table. The
    current product retention time table is an accumulated version of the ORPG
    product retention time table. By using the accumulated ORPG product
    retention time table, we will have the product entries of the previous VCPs
    when VCP changes. If a product does not have a retention time defined in
    the table, we use the minimum retention time defined through rpgdbm "-r"
    option. rpgdbm registers for ORPGEVT_PROD_LIST event for updating the
    accumulated product retention time table.

    Expired products are kept in the database as long as the space is
    available. Thus products are available for longer than their expiration
    times if the ORPG product database data store is sufficiently large.
    Products are removed from the database when the number of products in the
    database exceeds certain level (near full). Products are removed in terms
    of their expiration times. The first expired is removed first. Non-expired
    products are removed based on their generation times. The first generated
    is removed first. If a product is removed before it is expired, a product
    storage loadshed condition is reported through an LE message. Products are
    removed until the number of products in the database is bellow certain
    level. This eliminates high frequency product expiration checks and 
    removals.

    rpgdbm is responsible for reporting the product database loadshed status.

OPTIONS
    -m	Max_prod_gen_rate
	Specifies the maximum number of products per minute generated by RPG. 
	The default is 200.

    -r	Min_reten_time
	Specifies the minimum product retention time (seconds) in product 
	database. The default is 600.

    -s	Rpg_db_lb_name
	Specifies the name of the product database query access LB. The default
	is $WORK_DIR(or $HOME)/rpg_dbm.

    -v	Sets initial verbose level to 1. The default is 0.

EXAMPLES
    Example 1: rpgdbm -v &
	Starts rpgdbm in background with verbose option.

ENVIRONMENT VARIABLES
    WORK_DIR
	The RPG work directory which is used for putting CSS files.

    CFG_DIR and CFG_SRC
	Specify the location for configuration files. See "man cs" for more 
	details.

    LE_DIR_EVENT
	Environmental variable used by the log/error module. See "man le" for 
	more details.

    HOME
	The RPG user's home directory.

EXIT STATUS
    0:		Terminated normally. 

    non-zero:	Terminated because an error was detected.

FILES
    RPG system configuration file
	The name of the file is defined by CFG_DIR and CFG_SRC. An example of 
	the file is $HOME/cfg/syscfg.

    Log file
	The name of the file is defined by LE_DIR_EVENT. An example of the file
	is $HOME/data/logs/rpgdbm.log. rpgdbm log messages are stored here.
 
    rpgdbm uses the following RPG data stores for its operation:

    ORPGDAT_PRODUCTS(4) - for RPG product info.

    ORPGDAT_USER_PROFILES(4) - for RPG user profile info.
 
    rpgdbm uses the following ORPG library modules for its operation:

    ORPGPGT(3) - for accessing product retention time info.

    ORPGPAT(3) - for accessing product attributes.

    ORPGTASK(3) - for termination handler processing.

    ORPGLOAD(3) - for reporting product load shed status.

SEE ALSO
    prod_query(1), cs(3), orpg(3), le(3)

NOTES



