orpgvcp(3)							orpgvcp(3)

NAME

orpgvcp - ORPGVCP Library Functions

SYNOPSIS

#include <orpg.h>
#include <orpgvcp.h>

int 	ORPGVCP_io_status();
int	ORPGVCP_read ();
int	ORPGVCP_write ();
int	ORPGVCP_add    (int vcp_num, int wx_mode);
int	ORPGVCP_delete (int vcp_num);
short	*ORPGVCP_wxmode_tbl_ptr ();
int	ORPGVCP_get_wxmode_vcp (int mode, int pos);
int	ORPGVCP_set_wxmode_vcp (int mode, int pos, int vcp);
short	*ORPGVCP_ptr (int pos);
int	ORPGVCP_get_vcp_num         (int pos);
int	ORPGVCP_set_vcp_num         (int pos, int vcp);
int	ORPGVCP_get_pulse_width     (int vcp_num, ...);
int	ORPGVCP_set_pulse_width     (int vcp_num, int width);
int	ORPGVCP_get_clutter_map_num (int vcp_num, ...);
int	ORPGVCP_set_clutter_map_num (int vcp_num, int map_num);
int	ORPGVCP_get_num_elevations  (int vcp_num, ...);
int	ORPGVCP_set_num_elevations  (int vcp_num, int num_elev);
int	ORPGVCP_get_pattern_type    (int vcp_num, ...);
int	ORPGVCP_set_pattern_type    (int vcp_num, int pattern);
int	ORPGVCP_get_vel_resolution  (int vcp_num, ...);
int	ORPGVCP_set_vel_resolution  (int vcp_num, int res);
int	ORPGVCP_index (int vcp); 
int	ORPGVCP_get_num_vcps (); 
float	ORPGVCP_get_elevation_angle (int vcp_num, int cut, ...);
float	ORPGVCP_set_elevation_angle (int vcp_num, int cut, float angle);
int	ORPGVCP_get_waveform      (int vcp_num, int cut, ...);
int	ORPGVCP_set_waveform      (int vcp_num, int cut, int waveform);
int	ORPGVCP_get_super_res     (int vcp_num, int cut, ...);
int	ORPGVCP_set_super_res     (int vcp_num, int cut, int super_res);
int	ORPGVCP_get_dual_pol      (int vcp_num, int cut, ...);
int	ORPGVCP_set_dual_pol      (int vcp_num, int cut, int dual_pol);
float	ORPGVCP_get_azimuth_rate  (int vcp_num, int cut, ...);
float	ORPGVCP_set_azimuth_rate  (int vcp_num, int cut, float rate);
int	ORPGVCP_get_configuration (int vcp_num, int cut, ...);
int	ORPGVCP_set_configuration (int vcp_num, int cut, int configuration);
int	ORPGVCP_get_phase_type    (int vcp_num, int cut, ...);
int	ORPGVCP_set_phase_type    (int vcp_num, int cut, int type);
inti	ORPGVCP_is_SZ2_vcp        (int vcp_num);
int	ORPGVCP_get_prf_num       (int vcp_num, int cut, int prf_type, ...);
int	ORPGVCP_set_prf_num       (int vcp_num, int cut, int prf_type, 
                                   int prf_num);
int	ORPGVCP_get_pulse_count   (int vcp_num, int cut, int prf_type, ...);
int	ORPGVCP_set_pulse_count   (int vcp_num, int cut, int prf_type, 
                                   int count);
float	ORPGVCP_get_edge_angle    (int vcp_num, int cut, int prf_type, ...);
float	ORPGVCP_set_edge_angle    (int vcp_num, int cut, int prf_type, 
                                   float angle);
float	ORPGVCP_get_threshold     (int vcp_num, int cut, int prf_type, ...);
float	ORPGVCP_set_threshold     (int vcp_num, int cut, int prf_type, 
                                   float rate);
short	*ORPGVCP_allowable_prf_ptr        (int pos);
int	ORPGVCP_get_allowable_prf_vcp_num (int pos);
int	ORPGVCP_set_allowable_prf_vcp_num (int pos, int vcp);
int	ORPGVCP_get_allowable_prfs        (int vcp_num, ...);
int	ORPGVCP_set_allowable_prfs        (int vcp_num, int num);
int	ORPGVCP_get_allowable_prf         (int vcp_num, int indx, ...);
int	ORPGVCP_set_allowable_prf         (int vcp_num, int indx, int prf_num);
int	ORPGVCP_get_allowable_prf_default (int vcp_num, int elev_num, ...);
int	ORPGVCP_set_allowable_prf_default (int vcp_num, int elev_num,
					   int prf_num);
int	ORPGVCP_get_allowable_prf_pulse_count (int vcp_num, int elev_num,
					   int prf_num, ... );
int	ORPGVCP_set_allowable_prf_pulse_count (int vcp_num, int elev_num,
					   int indx, int count);
float	*ORPGVCP_prf_ptr ();
float	ORPGVCP_get_prf_value (int prf);
short	*ORPGVCP_vcp_times_ptr ();
int	ORPGVCP_get_vcp_time (int vcp_num, ...);
int	ORPGVCP_set_vcp_time (int vcp_num, int vcp_time);
short	*ORPGVCP_vcp_flags_ptr ();
short	ORPGVCP_get_vcp_flags (int vcp_num, ...);
short	ORPGVCP_set_vcp_flags (int vcp_num, short vcp_flags);

int	*ORPGVCP_unambiguous_range_ptr ();
int	*ORPGVCP_unambiguous_range_table_ptr (int delta_pri);

int	ORPGVCP_delta_pri ();
int*	ORPGVCP_delta_pri_ptr ();

int	ORPGVCP_get_current_vcp ();

short	*ORPGVCP_elev_indicies_ptr (int pos);
int	ORPGVCP_get_rpg_elevation_num (int vcp_num, int cut, ...);
int	ORPGVCP_set_rpg_elevation_num (int vcp_num, int cut, int num);

float	ORPGVCP_compute_azimuth_rate (int surv_prf_num, int surv_pulse_count,
				      int dopl_prf_num, int dopl_pulse_count);

int 	ORPGVCP_get_all_elevation_angles (int vcp_num, 
				int buffer_size, float *elev_angles, ...);
double ORPGVCP_ICD_angle_to_deg( int type, short angle_bams );
float ORPGVCP_BAMS_to_deg( int type, short angle_bams );
short ORPGVCP_deg_to_BAMS( int type, float angle_deg );
float ORPGVCP_rate_BAMS_to_degs( short angle_bams );
short ORPGVCP_rate_degs_to_BAMS( float angle_deg );

DESCRIPTION

ORPGVCP is a module in library ORPG that provides access to VCP adaptation
data.  The ORPG maintains two separate VCP data stores: default VCP data
(ORPGVCP_DATASTORE_ADAPTATION) and current VCP data (ORPGVCP_DATASTORE_CURRENT).
The current VCP data is editable by the user without any password control. 
The default VCP data requires ROC level password to edit.  This API provide
no security as far as restricting write access.  It is up to the application
to provide security.

Some of the ORPGVCP functions have variable length arugment lists.  Without 
additional arguments, the functions return information based on the VCP 
definitions defined at the RPG.  However use of the variable arguments 
allows the caller to obtain information based on the VCP definition received
by the RDA.  To get information based on the VCP definition provided to the 
RPG by the RDA, the vcp_num argument (the first argument in the list of 
arguments) should be "OR'd" with ORPGVCP_RDAVCP.  The optional argument in
this case can either be provided, in which case it denotes the volume scan
number, otherwise the volume number is assumed the current volume.  To provide
the volume scan number, the vcp_num is also "OR'd" with ORPGVCP_VOLNUM.

ORPGVCP_io_status() returns the status of the latest read operation for the 
VCP data store.  A negative value indicates an error occurred.  A positive 
value indicates the number of bytes read.

ORPGVCP_read () reads the VCP datastore into memory.  On success, the number 
of bytes read is returned.  On error a negative value is returned.

ORPGVCP_write () writes from memory to the VCP datastore.  On success, the number 
of bytes written is returned.  On error a negative value is returned.

ORPGVCP_add (int vcp_num, int wx_mode) adds a new VCP to the VCP adaptation
datastore, where, vcp_num is the VCP number and wx_mode, the weather mode
associated with the new VCP.  Internal default values are assigned to the
various VCP fields.  It is up to the application to explicitly set the desired
values.  On success the index of the new VCP data in the VCP table is returned.
On error a negative value is returned. 

ORPGVCP_delete (int vcp_num) removes the specified vcp from the VCP adaptation
datastore.  The VCP is also removes from all of the other internal tables
(i.e., weather mode, allowable PRF...).  On success 0 is returned.  On error
a negative value is returned.

*ORPGVCP_wxmode_tbl_ptr () returns a pointer to the beginning of the VCP
weather mode table.

ORPGVCP_get_wxmode_vcp (int mode, int pos) returns a value from the VCP
weather mode table, where, mode is the weather mode (CLEAR_AIR_MODE or
PRECIPITATION_MODE) and, pos, the table position (0-19).  On success, a
VCP number or 0 (if no VCP defined for the specified position).  On error
a negative value is returned.

ORPGVCP_set_wxmode_vcp (int mode, int pos, int vcp) adds a specified VCP
number in the VCP weather mode table, where, mode is the weather mode, pos
the table position, and vcp, the VCP number.  No check is made to determine
if the VCP number is already defined in the table.  On success the VCP number
is returned.  On error a negative value is returned.

*ORPGVCP_ptr (int pos) returns a pointer to the VCP data, where pos is the 
position in the table.  On success, the address of the start of the VCP data 
is returned.  On error, NULL is returned.

ORPGVCP_get_vcp_num (int pos) returns the VCP number for an entry in the VCP 
table, where pos is the position in the table.  On success, the VCP number 
is returned (0 if table entry not used).  On error a negative value is returned.

ORPGVCP_set_vcp_num (int pos, int vcp) adds a specified VCP number to the VCP 
datastores, where pos is the position in the VCP table and vcp, the new VCP 
number.  No check is made to determine if the VCP number is already defined.  
On success, the VCP number is returned.  On error a negative value is returned.

ORPGVCP_get_pulse_width (int vcp_num) returns the pulse width for a VCP table 
entry, where vcp_num is the VCP number.  On success, ORPGVCP_SHORT_PULSE or 
ORPGVCP_LONG_PULSE are returned.  On error a negative value is returned.

ORPGVCP_set_pulse_width (int vcp_num, int width) sets the pulse width, where 
vcp_num is the VCP number and width is ORPGVCP_SHORT_PULSE or ORPGVCP_LONG_PULSE.
On success, the pulse width is returned.  On error, a negative value is returned.

ORPGVCP_get_clutter_map_num (int vcp_num) returns the clutter map number 
associated with a VCP, where vcp_num is the VCP number.  On success a 
positive integer is returned.  On error a negative value is returned.

ORPGVCP_set_clutter_map_num (int vcp_num, int map_num) sets the clutter map 
number, where vcp_num is the VCP number and map_num, an integer value 
representing the clutter map number.  On success the cluttermap number is
returned.  On error a negative value is returned.

ORPGVCP_get_num_elevations (int vcp_num) returns the number of elevation cuts 
associated with a VCP where vcp_num is the VCP number.  On success a positive
integer is returned.  On error a negative value is returned.

The vcp_num argument can (optinally) be OR'd with ORPGVCP_RDAVCP and/or 
ORPGVCP_VOLNUM.   If OR'd with ORPGVCP_RDAVCP, then the number of elevations is 
derived from the VCP definition sent to the RPG from the RDA prior to the start
of volume scan.  This might be necessary when SAILS is active and the number of 
elevation cuts can vary from volume scan to volume scan even for the same VCP 
number.  If vcp_num also OR'd with RPGVCP_VOLNUM, then an optional
last argument of integer type, the volume scan number, is provided. The volume
scan number is used to determine which VCP definition from the RDA (generally
either the current volume scan or the previous) is used to provide the number
of elevations.

ORPGVCP_set_num_elevations  (int vcp_num, int elev_num) sets the elevation
cuts number, where vcp_num is the VCP number and elev_num is the number of
elevation cuts.  On success the elevation cuts number is returned.  On error
a negative value is returned.

ORPGVCP_get_pattern_type (int vcp_num) returns the pattern type of the 
specified VCP, where vcp_num is the VCP number.  On success one of the 
following are returned: ORPGVCP_PATTERN_TYPE_CONSTANT, 
ORPGVCP_PATTERN_TYPE_HORIZONTAL, ORPGVCP_PATTERN_TYPE_VERTICAL, 
or ORPGVCP_PATTERN_TYPE_SEARCHLIGHT.  On error a negative value is returned.

ORPGVCP_set_pattern_type (int vcp_num, int pattern) sets the pattern type, 
where vcp_num is the VCP number and pattern is one of the pattern type
macros defined in the previous paragraph.  On success the pattern type is
returned.  On error a negative value is returned.

ORPGVCP_get_vel_resolution (int vcp_num) returns the velocity resolution of 
the specified VCP, where vcp_num is the VCP number.  On success one of the 
following are returned: ORPGVCP_VEL_RESOLUTION_LOW (1 m/s) or
 ORPGVCP_VEL_RESOLUTION_HIGH (0.5 m/s).  On error a negative value is returned.

ORPGVCP_set_vel_resolution (int vcp_num, int res) sets the velocity resolution
of the specified VCP, where vcp_num is the VCP number and res is one of the
velocity resolution macros defied in the previous paragraph.  On success the
velocity resolution is returned.  On error a negative value is returned.

ORPGVCP_index (int vcp) returns VCP table index for specified VCP in the
adaptation VCP datastore.  On success an integer in the range 0 to 19 is
returned.  On error a negative value is returned.

ORPGVCP_get_num_vcps () returns number of VCPs defined in the adaptation VCP
datastore.  On success an integer in the range 0 to 20 is returned.  On error
a negative value is returned.

ORPGVCP_get_elevation_angle (int vcp_num, int cut, ...) returns the elevation angle 
for a specified VCP and cut, where vcp_num is the VCP number and cut is the
elevation cut index (0-19).  On success an elevation angle (in degrees) is
returned.  On error -99.9 is returned.

The vcp_num argument can (optinally) be OR'd with ORPGVCP_RDAVCP and/or 
ORPGVCP_VOLNUM.   If OR'd with ORPGVCP_RDAVCP, then the elevation angle is 
derived from the VCP definition sent to the RPG from the RDA prior to the start
of volume scan.  This might be necessary when SAILS is active and the elevation 
angles for cut can vary from volume scan to volume scan even for the same VCP
number.  If vcp_num also OR'd with RPGVCP_VOLNUM, then an optional
last argument of integer type, the volume scan number, is provided. The volume
scan number is used to determine which VCP definition from the RDA (generally
either the current volume scan or the previous) is used to provide the elevation
angle.

ORPGVCP_set_elevation_angle (int vcp_num, int cut, float angle) sets the 
elevation angle for a specified VCP and cut, where vcp_num is the VCP number, cut
is the elevation cut index (0-19), and angle is an elevation angle in the range -1.0
to 45.0 degrees.  On success the elevation angle (in degrees) is returned.  On
error -99.9 is returned.

ORPGVCP_get_waveform (int vcp_num, int cut) returns the waveform type for a 
specified VCP and cut, vcp_num is the VCP number, and cut is the elevation cut
index (0-19).  On success one of the following are returned: 
VCP_WAVEFORM_UNKNOWN, VCP_WAVEFORM_CS, VCP_WAVEFORM_CD, VCP_WAVEFORM_CDBATCH,
VCP_WAVEFORM_BATCH, or VCP_WAVEFORM_STP.  On error a negative value is
returned.

ORPGVCP_set_waveform (int vcp_num, int cut, int waveform) sets the waveform type 
for a specified VCP and cut, where vcp_num is the VCP number, cutis the elevation
cut index (0-19), and waveform is a waveform macro defined  in the previous
paragraph.  On success the waveform configuration type is returned.  On error
a negative value is returned.

ORPGVCP_get_super_res (int vcp_num, int cut) returns the super res value for a
specified VCP and cut, vcp_num is the VCP number, and cut is the elevation cut
index (0-19).  On success one of the following are returned:
0 (no super res) or a combination of VCP_HALFDEG_RAD, VCP_QRTKM_SURV 
and VCP_300KM_DOP.  On error a negative value is returned.

ORPGVCP_set_super_res (int vcp_num, int cut, int super_res) sets the super res 
value for a specified VCP and cut, where vcp_num is the VCP number, cut is the 
elevation cut index (0-19), and super_res is 0 or a defined super_res macro 
(or "ORd" combination of the super_res macros) defined in the previous paragraph.  
On success the super res value is returned.  On error a negative value is returned.

ORPGVCP_get_dual_pol (int vcp_num, int cut) returns the dual pol value for a
specified VCP and cut, vcp_num is the VCP number, and cut is the elevation cut
index (0-19).  On success one of the following are returned: 0 (dual pol not 
enabled) or 1 (dual pol enabled). On error a negative value is returned.

ORPGVCP_set_dual_pol (int vcp_num, int cut, int dual_pol) sets the dual pol
word for a specified VCP and cut, where vcp_num is the VCP number, cut is the
elevation cut index (0-19), and dual_pol is  0 or the defined dual_pol macro 
VCP_DUAL_POL_ENABLED) defined in the previous paragraph.  On success the dual pol
value is returned.  On error a negative value is returned.

ORPGVCP_get_azimuth_rate (int vcp_num, int cut) returns the azimuth scan rate 
(in degrees per second) for a specified VCP and cut, vcp_num is the VCP number, 
and cut is the elevation cut index (0-19).  On success a value in the range 2.0 to
32.0 is returned.  On error a negative value is returned.

ORPGVCP_set_azimuth_rate (int vcp_num, int cut, float rate) sets the azimuth rate
for a specified VCP and cut, where vcp_num is the VCP number, cut is the elevation
cut index (0-19), and rate is a value in the range 2.0 to 32.0 degrees per
second.  On success the azimuth rate is returned.  On error a a negative value
is returned.

ORPGVCP_get_configuration (int vcp_num, int cut) returns the waveform configuration 
for a specified VCP and cut, where vcp_num is the VCP number and cut is the
elevation cut index (0-19).  On success one of the following is returned:
ORPGVCP_LINEAR_CHANNEL or ORPGVCP_LOG_CHANNEL.  On error a negative value is 
returned.

ORPGVCP_set_configuration (int vcp_num, int cut, int configuration) sets the 
waveform configuration for a specified VCP and cut, where vcp_num is the VCP number,
cut is the elevation cut index (0-19), and configuration is one of the macros
defined in the previous paragraph. On success the configuration is returned.
On error a negative value is returned.

ORPGVCP_get_phase_type (int vcp_num, int cut) returns the phase type for a 
specified VCP and cut, where vcp_num is the VCP number, and cut is the elevation cut
index (0-19).  On success one of the following is returned: ORPGVCP_RANDOM_PHASE
or ORPGVCP_CONSTANT_PHASE.  On error a negative value is returned.

ORPGVCP_set_phase_type (int vcp_num, int cut, int type) sets the phase type for 
a specified VCP and cut, where vcp_num is the VCP number, cut is the elevation
cut index (0-19), and configuration is one of the macros defined in the previous
paragraph. On success the phase type is returned. On error a negative value
is returned.

ORPGVCP_is_SZ2_vcp (int vcp_num) returns 1 if any elevation cut in the VCP
has phase type ORPGVCP_SZ2_PHASE, return 0 if none of the elvation cuts in the
VCP has phase type ORPGVCP_SZ2_PHASE, or -1 if an error occurred.   

ORPGVCP_get_prf_num (int vcp_num, int cut, int prf_type) returns the PRF number 
for a specified VCP, cut, and channel, where vcp_num is the VCP number, cut is
the elevation cut index (0-19), and prf_type, the channel type:
(ORPGVCP_SURVEILLANCE, ORPGVCP_DOPPLER1 (sector 1), ORPGVCP_DOPPLER2 (sector 2),
or ORPGVCP_DOPPLER3 (sector 3).  On success a non-negative value is returned. 
On error a negative value is returned.

ORPGVCP_set_prf_num (int vcp_num, int cut, int prf_type, int prf_num) sets the 
PRF number for a specified VCP, cut, and channel, where vcp_num is the VCP number,
cut is the elevation cut index (0-19), and prf_type is the channel type:
(ORPGVCP_SURVEILLANCE, ORPGVCP_DOPPLER1 (sector 1), ORPGVCP_DOPPLER2 (sector 2),
or ORPGVCP_DOPPLER3 (sector 3).  On success a non-negative value is returned.
On error a negative value is returned.

ORPGVCP_get_pulse_count (int vcp_num, int cut, int prf_type) returns the pulse 
count for a specified VCP, cut, and channel, where vcp_num is the VCP number, 
cut is the elevation cut index (0-19), and prf_type is the channel type:
(ORPGVCP_SURVEILLANCE, ORPGVCP_DOPPLER1 (sector 1), ORPGVCP_DOPPLER2 (sector 2),
or ORPGVCP_DOPPLER3 (sector 3).  On success a non-negative value is returned.
On error a negative value is returned.

ORPGVCP_set_pulse_count (int vcp_num, int cut, int prf_type, int count) sets 
the pulse count for a specified VCP, cut, and channel, where vcp_num is the 
VCP number, cut is the elevation cut index (0-19), and prf_type is the channel 
type: (ORPGVCP_SURVEILLANCE, ORPGVCP_DOPPLER1 (sector 1), ORPGVCP_DOPPLER2 
(sector 2), or ORPGVCP_DOPPLER3 (sector 3).  On success a non-negative value 
is returned.  On error a negative value is returned.

ORPGVCP_get_edge_angle (int vcp_num, int cut, int prf_type) returns sector edge 
angle (degrees) for a specified VCP, cut, and channel, where vcp_num is the VCP i
number, cut is the elevation cut index (0-19), and prf_type is the channel type:
ORPGVCP_DOPPLER1 (sector 1), ORPGVCP_DOPPLER2 (sector 2), or ORPGVCP_DOPPLER3
(sector 3).  On success a value in the range 0.0 to 359.9 is returned.  On
error a negative value is returned.

ORPGVCP_set_edge_angle (int vcp_num, int cut, int prf_type, float angle) sets the 
sector edge angle (degrees) for a specified VCP, cut, and channel, where vcp_num
is the VCP number, cut is the elevation cut index (0-19), and prf_type is the 
channel type: ORPGVCP_DOPPLER1 (sector 1), ORPGVCP_DOPPLER2 (sector 2), or 
ORPGVCP_DOPPLER3 (sector 3).  On success the sector edge angle is returned.  
On error a negative value is returned.

ORPGVCP_get_threshold (int vcp_num, int cut, int type) returns the signal to 
noise ratio (dB) for a specified VCP, cut, and type where cut is the elevation 
cut index (0-19), and type is either ORPGVCP_SURVEILLANCE, ORPGVCP_VELOCITY, 
ORPGVCP_SPECTRUM_WIDTH, ORPGVCP_DIFFERENTIAL_Z, ORPGVCP_CORRELATION_COEF, or
ORPGVCP_DIFFERENTIAL_PHASE.  On success a value in the range -12.0 to 20.0 is 
returned.  On error -99.9 is returned.

ORPGVCP_set_threshold (int vcp_num, int cut, int type, float threshold) sets the 
signal to noise ratio for a specified VCP, cut, and type, where vcp_num is the 
VCP number, cut is the elevation cut index (0-19), type is either
ORPGVCP_SURVEILLANCE, ORPGVCP_VELOCITY, ORPGVCP_SPECTRUM_WIDTH, 
ORPGVCP_DIFFERENTIAL_Z, ORPGVCP_CORRELATION_COEF, or ORPGVCP_DIFFERENTIAL_PHASE, 
and threshold is the threshold value in dB.  On success the signal to noise ratio 
is returned.  On error -99.9 is returned.

*ORPGVCP_allowable_prf_ptr (int pos) returns a pointer to a row in the
allowable PRF table, where, pos is a value in the range 0 to 19 representing
a row in the table.  Each row corresponds to a VCP defined in the VCP
adaptation data table.  On error NULL is returned.

ORPGVCP_get_allowable_prf_vcp_num (int pos) returns the VCP number associated
with a row in the allowable PRF table, where, pos is a value in the range
0 to 19 representing a row in the table.  On success a non-negative value is
returned.  On error -1 is returned.

ORPGVCP_set_allowable_prf_vcp_num (int pos, int vcp) sets the VCP number for
a row in the allowable PRF table, where, pos is a value in the range
0 to 19 representing a row in the table, and vcp, the VCP number (in the range
0 to 32768).  On success the VCP number is returned.  On error -1 is returned.

ORPGVCP_get_allowable_prfs (int vcp_num) returns the number of allowable PRFs
for an entry (referenced by VCP number) in the allowable PRF table, where,
vcp_num is the VCP number.  On success a non-negative value is returned.  On
error -1 is returned.

ORPGVCP_set_allowable_prfs (int vcp_num, int num) sets the number of allowable
PRFs for an entry (referenced by VCP number) in the allowable PRF table, where,
vcp_num is the VCP number, and num is the number of allowable PRFs (in the
range 1 to 8).  On success the number of allowable PRFs is returned.  On
error -1 is returned.

ORPGVCP_get_allowable_prf (int vcp_num, int indx) returns the PRF for an entry
in the allowable PRF table, where, vcp_num is the VCP number, and indx is the
table index (in the range 0 to 7).  On success a non-negative value is
returned.  On error a negative value is returned.

ORPGVCP_set_allowable_prf (int vcp_num, int indx, int prf_num) sets the PRF
number for an entry in the allowable PRF table, where, vcp_num is the VCP
number, indx, the table index (0 to 7), and prf_num, the PRF number.  On
success the PRF number is returned.  On error a negative value is returned.

ORPGVCP_get_allowable_prf_default (int vcp_num, int elev_num) returns the
default PRF number for a VCP entry in the allowable PRF table, where, vcp_num
is the VCP number, and elev_num is the elevation cut number.  On success a
non-negative value is returned.  On error a negative value is returned.

ORPGVCP_set_allowable_prf_default (int vcp_num, int elev_num, int prf_num) sets
the default PRF number for a VCP entry in the allowable PRF table, where,
vcp_num is the VCP number, elev_num, the elevation cut number, and prf_num,
the default PRF number.  On success the default PRF number is returned.  On
error a negative value is returned.

ORPGVCP_get_allowable_prf_pulse_count (int vcp_num, int elev_num, int indx)
gets the pulse count for a VCP entry in the allowable PRF table, where, vcp_num
is the VCP number, elev_num, the elevation cut number, and prf_num, the prf
number (1 to 8) for the row.  On success a non-negative value is returned.  On
error a negative value is returned.

ORPGVCP_set_allowable_prf_pulse_count (int vcp_num, int elev_num, int indx,
int count) sets the pulse count for a VCP entry in the allowable PRF table,
where, vcp_num is the VCP number, elev_num, the elevation cut number, indx,
the prf index (1 to 8) for the row, and count, the pulse count value.  On
success the pulse count is returned.  On error a negative value is returned.

*ORPGVCP_prf_ptr () returns a pointer to the beginning of the PRF table.  The
PRF table contains a PRF value for each defined PRF number.  Each PRF value
is in Hz.

ORPGVCP_get_prf_value (int prf) returns the PRF value (Hz) for a specified PRF,
where, prf is the PRF number.  On success a non-negative value is returned.
On error a negative value is returned.

*ORPGVCP_vcp_times_ptr () returns a pointer to the beginning of the VCP time
table.  The VCP time table contains an entry for each defined VCP (up to 20).
The value represents an approximate time on how long the VCP will take to
complete (in seconds).

ORPGVCP_get_vcp_time (int vcp_num) returns the VCP time for a specific VCP,
where, vcp_num is the VCP number.  On success a non-negative value is returned.
On error a negative value is returned.

ORPGVCP_set_vcp_time (int vcp_num, int vcp_time) sets the VCP time for a
specified VCP in the VCP time table, where, vcp_num is the VCP number, and
vcp_time is the VCP time (seconds).  On success the VCP time is returned.
On error a negative value is returned.

*ORPGVCP_vcp_flags_ptr () returns a pointer to the beginning of the VCP flags
table.  The VCP flags table contains an entry for each defined VCP (up to 20).
The value represents specified flags for the VCP (see rdacnt.h for currently
defined flags and their meaning).

ORPGVCP_get_vcp_flags (int vcp_num) returns the VCP flags for a specific VCP,
where, vcp_num is the VCP number.  On success a non-negative value is returned.
On error 0 (zero) is returned.

ORPGVCP_set_vcp_time (int vcp_num, short vcp_flags) sets the VCP flags for a
specified VCP in the VCP flags table, where, vcp_num is the VCP number, and
vcp_flags is the VCP flags (see rdacnt.h for currently defined flags).  On 
success the VCP flags value is returned.  On error 0 (zero) is returned.

*ORPGVCP_unambiguous_range_ptr () returns a pointer to the beginning of the
unambiguous range table.

*ORPGVCP_unambiguous_range_table_ptr () returns a pointer to the beginning of 
the unambiguous range table for a particular delta PRI.   The delta PRI value
is assumed in the range [1 - 5].

ORPGVCP_delta_pri () returns the delta PRI value contained in adaptation data.

ORPGVCP_delta_pri_ptr () returns the pointer to the delta PRI value contained
in adaptation data.

ORPGVCP_get_current_vcp () gets the VCP number of the current VCP.

*ORPGVCP_elev_indicies_ptr () returns a pointer to the elevation indicies 
table entry corresponding to pos (0-19).

ORPGVCP_get_rpg_elevation_num (int vcp_num, int cut, ...) returns the RPG elevation
number corresponding to a specified VCP cut number, where, vcp_num is the VCP
number, and cut the VCP cut number (0-19).  The RPG elevation number takes into
account split cuts at the same elevation angle).  On success a non-negative
value is returned.  On error a negative value is returned.

The vcp_num argument can (optinally) be OR'd with ORPGVCP_RDAVCP and/or 
ORPGVCP_VOLNUM.   If OR'd with ORPGVCP_RDAVCP, then the elevation number is 
derived from the VCP definition sent to the RPG from the RDA prior to the start
of volume scan.  This might be necessary when SAILS is active and the RPG 
elevation cut numbers can vary from volume scan to volume scan even for the
same VCP number.  If vcp_num also OR'd with RPGVCP_VOLNUM, then an optional
last argument of integer type, the volume scan number, is provided. The volume
scan number is used to determine which VCP definition from the RDA (generally
either the current volume scan or the previous) is used to provide the RPG
elevation number.

ORPGVCP_set_rpg_elevation_num (int vcp_num, int cut, int num) sets the VCP
number corresponding to an RPG elevation number for a specified VCP, where,
vcp_num is the VCP number, cut, the RPG elevation number, and num, the VCP
cut number.  On success the elevation number is returned.  On error a negative
value is returned.

ORPGVCP_compute_azimuth_rate (int surv_prf_num, int surv_pulse_count,
int dopl_prf_num, int dopl_pulse_count) returns the azimuth rate (deg/sec)
given a set of pulse counts for the surveillance and Doppler channels.  On
success a positive value is returned.  On error a negative value is returned.

ORPGVCP_get_all_elevation_angles returns all RPG elevation angles for a 
specified VCP. The input argument "vcp_num" specifies the VCP number. The 
caller provides the buffer "elev_angles" of size "buffer_size" for returning
the angles. If "buffer_size" is too small, Only the first "buffer_size" angles
are returned with "elev_angles". The elevation angles returned are of type
float and in degrees. The function returns the total number of RPG elevations
on success (even if "buffer_size" is too small) or -1 on failure.

ORPGVCP_BAMS_to_deg returns the angle in degrees given the angle in BAMS.  The type
field specifies whether the input angle is to be converted to an elevation angle 
(type value ORPGVCP_ELEVATION_ANGLE) or converted to an azimuth angle (type value
ORPGVCP_AZIMUTH_ANGLE).  By default, the result is rounded to the nearest 0.1 deg.
ORing the type field with ORPGVCP_ANGLE_FULL_RESOLUTION returns an unrounded, 
floating point angle.  If type does not specify either ORPGVCP_AZIMUTH_ANGLE or 
ORPGVCP_ELEVATION_ANGLE, the degree value 0x8000 is returned.

ORPGVCP_ICD_angle_to_deg returns the angle in degrees given the angle in BAMS.  The type
field specifies whether the input angle is to be converted to an elevation angle 
(type value ORPGVCP_ELEVATION_ANGLE) or converted to an azimuth angle (type value
ORPGVCP_AZIMUTH_ANGLE). 

ORPGVCP_deg_to_BAMS returns the angle in BAMS given the angle in degrees.  The type
field specifies whether the input angle is to be converted to an elevation angle 
(type value ORPGVCP_ELEVATION_ANGLE) or converted to an azimuth angle (type value
ORPGVCP_AZIMUTH_ANGLE).

ORPGVCP_rate_BAMS_to_degs BAMS antenna rotation rate into deg/s.

ORPGVCP_rate_degs_to_BAMS antenna rotation rate in deg/s into BAMS.

SEE ALSO

orpg(3)
