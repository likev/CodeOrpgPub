/*
 * RCS info
 * $Author: steves $
 * $Locker:  $
 * $Date: 2003/03/10 21:44:03 $
 * $Id: rpgcs_ref_conversion.mac,v 1.1 2003/03/10 21:44:03 steves Exp $
 * $Revision: 1.1 $
 * $State: Exp $
 */

#define MIN_REF_VALUE             0
#define MAX_REF_VALUE           255
#define INVALID REF_VALUE    -777.0f

#define MIN_Z_VALUE           -32.0f
#define MAX_Z_VALUE           -94.5f

/* Conversion table for equivalent reflectivity */
static float REF_MAC[256] = { -999.,-888.,-32.,-31.5,-31.,-30.5,-30.,
                              -29.5,-29.,-28.5,-28.,-27.5,-27.,-26.5,
                              -26.,-25.5,-25.,-24.5,-24.,-23.5,-23.,
                              -22.5,-22.,-21.5,-21.,-20.5,-20.,-19.5,
                              -19.,-18.5,-18.,-17.5,-17.,-16.5,-16.,
                              -15.5,-15.,-14.5,-14.,-13.5,-13.,-12.5,
                              -12.,-11.5,-11.,-10.5,-10.,-9.5,-9.,-8.5,
                              -8.,-7.5,-7.,-6.5,-6.,-5.5,-5.,-4.5,-4.,
                              -3.5,-3.,-2.5,-2.,-1.5,-1.,-.5,0.,.5,1.,
                               1.5,2.,2.5,3.,3.5,4.,4.5,5.,5.5,6.,6.5,
                               7.,7.5,8.,8.5,9.,9.5,10.,10.5,11.,11.5,
                              12.,12.5,13.,13.5,14.,14.5,15.,15.5,16.,
                              16.5,17.,17.5,18.,18.5,19.,19.5,20.,20.5,
                              21.,21.5,22.,22.5,23.,23.5,24.,24.5,25.,
                              25.5,26.,26.5,27.,27.5,28.,28.5,29.,29.5,
                              30.,30.5,31.,31.5,32.,32.5,33.,33.5,34.,
                              34.5,35.,35.5,36.,36.5,37.,37.5,38.,38.5,
                              39.,39.5,40.,40.5,41.,41.5,42.,42.5,43.,
                              43.5,44.,44.5,45.,45.5,46.,46.5,47.,47.5,
                              48.,48.5,49.,49.5,50.,50.5,51.,51.5,52.,
                              52.5,53.,53.5,54.,54.5,55.,55.5,56.,56.5,
                              57.,57.5,58.,58.5,59.,59.5,60.,60.5,61.,
                              61.5,62.,62.5,63.,63.5,64.,64.5,65.,65.5,
                              66.,66.5,67.,67.5,68.,68.5,69.,69.5,70.,
                              70.5,71.,71.5,72.,72.5,73.,73.5,74.,74.5,
                              75.,75.5,76.,76.5,77.,77.5,78.,78.5,79.,
                              79.5,80.,80.5,81.,81.5,82.,82.5,83.,83.5,
                              84.,84.5,85.,85.5,86.,86.5,87.,87.5,88.,
                              88.5,89.,89.5,90.,90.5,91.,91.5,92.,92.5,
                              93.,93.5,94.,94.5 };

/******************************************************************

   Description:
      Sets the Below Threshold and RF DBZ values.

   Inputs:
      BELOW_THR_VAL, RF_VAL

******************************************************************/
#define RPGCS_SET_REF_FLAG_VALS( BELOW_THR_VAL, RF_VAL )		\
									\
   REF_MAC[MIN_REF_VALUE] = (BELOW_THR_VAL);				\
   REF_MAC[MIN_REF_VALUE+1] = (RF_VAL);


/******************************************************************

   Description:
      Given the base data reflectivity value (as defined in 
      RDA/RPG ICD), return the corresponding dBZ value.  

   Inputs:
      REFL - the data value in scaled and biased units (i.e.,
              ICD format).

   Outputs:
      DBZ - the corresponding dBZ value.

   Returns:
      The corresponding dBZ value.

   Notes:
      Assumes MIN_REF_VALUE <= REFL <= MAX_REF_VALUE.

******************************************************************/
#define RPGCS_REFL_TO_DBZ( REFL, DBZ )					\
									\
   (DBZ) = REF_MAC[(REFL)];						

/******************************************************************

   Description:
      Converts dBZ to scaled and biased units.  

   Inputs:
      value - data value in dBZ.

   Outputs:

   Returns:
      If value out of range, returns DATA_OUT_OF_RANGE.  Otherwise
      returns reflectivity in scaled and biased units.

   Notes:

******************************************************************/
#define RPGCS_DBZ_TO_REFL( DBZ, REFL )					\
   {									\
									\
      int iref = 0;							\
      float refl = 0.0;							\
									\
      /* Verify the reflectivity value. */				\
      if( ((DBZ) < MIN_Z_VALUE) || ((DBZ) > MAX_Z_VALUE) ) 		\
         (REFL) = DATA_OUT_OF_RANGE;					\
									\
      else{								\
									\
         /* Scale the reflectivity. */					\
         refl = ((DBZ) + (DBZ)) + 64.0;					\
									\
         /* Take nearest integer. */					\
         NEAREST_INTEGER( refl, (REFL) );				\
									\
         /* Bias the reflectivity. */					\
         (REFL) += 2;							\
									\
      }									\
									\
   }


