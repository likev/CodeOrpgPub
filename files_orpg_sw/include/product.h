
/***********************************************************************

	This file defines the RPG product headers.

***********************************************************************/

/* 
 * RCS info
 * $Author: steves $
 * $Locker:  $
 * $Date: 2008/04/08 15:18:53 $
 * $Id: product.h,v 1.11 2008/04/08 15:18:53 steves Exp $
 * $Revision: 1.11 $
 * $State: Exp $
 */  


#ifndef PRODUCT_H
#define PRODUCT_H

#include <prod_user_msg.h>

typedef struct {

    /* the first 9 shorts are the message header */
    short msg_code;	/* NEXRAD message code defined in table II,
			   -131 - -16, 0 - 211, MESCDOFF 1 */
    short msg_date;	/* modified Julian date, DTMESOFF 2 */
    int msg_time;	/* number of seconds after midnight GMT; 
			   TMSWOFF 3 TLSWOFF 4 */
    int msg_len;	/* number of bytes including the header; 
			   18 - 409856, LGMSWOFF 5 LGLSWOFF 6 */
    short src_id;	/* ID of the sender (originator); 0 - 999;
			   SRCIDOFF 7 */
    short dest_id;	/* ID of the receiver, 0 - 999, DSTIDOFF 8 */
    short n_blocks;	/* header block plus the product description blocks
			   in message; 1 - 51, NBLKSOFF 9 */


    short divider;	/* value of -1 used to delineate the header from 
			   the above message header, DIV1OFF 10 */
    int latitude;	/* latitude of radar in .001 degrees, -90. - 90., 
			   LTMSWOFF LTLSWOFF */
    int longitude;	/* longitude of radar in .001 degrees, 
			   -180. - 180. East (+) and West (-); LNMSWOFF 
			   LNLSWOFF */
    short height;	/* above mean sea level height of radar in feet, 
			   -100 - 11000 RADHGTOFF */
    short prod_code;	/* Internel product code, 16 - 131, negative 
			   number is used sometimes; the same as msg_code?;
			   PRDCODOFF 16 */
    short op_mode;	/* operational (weather) mode; 0 = maintenance; 
			   1 = clear air; 2 = precipitation (severe weather);
			   WTMODOFF */
    short vcp_num;	/* VCP number; 1 - 767, VCPOFF */
    short seq_num;	/* sequence number of the request that generated 
			   the product (refer to figure 3-3, RPG/PUP ICD); 
			   for products generated by an alert condition, 
			   = -13, SQNUMOFF */
    short vol_num;	/* counter, recycles to one (1) every 80 volume 
			   scans; 1 - 80, VSNUMOFF */
    short vol_date;	/* Modified Julian date; VSDATOFF */
    short vol_time_ms;	/* number of seconds after midnight GMT, Most 
			   significant 2 bytes, VSTMSWOFF 22, because there 
			   are 21 shorts before this, we can not cast this
			   to an int, */
    short vol_time_ls;	/* number of seconds after midnight GMT, least 
			   significant 2 bytes VSTLSWOFF 23 */
    short gen_date;	/* product generation data, modified Julian date, 
			   GDPRDOFF */
    int gen_time;	/* product generation time; seconds after 
			   midnight GMT, GTMSWOFF GTLSWOFF */

    short param_1;	/* product dependent parameter.  For products 43, 
       			   44, 45, 46, 55, azimuth of window, 
			   in .1 degrees; 0. - 359.9, AZWINOFF */
    short param_2;	/* product dependent parameter.  For products 43, 
			   44, 45, 46, 55, range of window, 
			   in .1 Nml; 0. - 124.0, RNWINOFF */

    short elev_ind;	/* RPG elevation index in a volume (not cut number), 
			   1 - 20, ELINDOFF */


    short param_3;	/* product dependent parameter.  For products 
			   16 - 21, 28 - 30, 22 - 27, , 87, 43, 46, 
			   45, 44, 55, 56, elevation angle, in .1 degrees,
			   -1.0 - 45.0, for product 84, horizontal wind 
			   altitude in 1000 feet,  0 to 70, EAZALOFF 30 */    

    short level_1;	/* data lev. thre. (see p3-63, PRG/PUP ICD),
			   DL1OFF 31 */
    short level_2;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL2OFF */
    short level_3;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL3OFF */
    short level_4;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL4OFF */
    short level_5;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL5OFF */
    short level_6;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL6OFF */
    short level_7;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL7OFF */
    short level_8;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL8OFF */
    short level_9;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL9OFF */
    short level_10;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL10OFF */
    short level_11;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL11OFF */
    short level_12;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL12OFF */
    short level_13;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL13OFF */
    short level_14;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL14OFF  */
    short level_15;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL15OFF*/
    short level_16;	/* data lev. thre. (see p3-63, PRG/PUP ICD);
			   DL16OFF 46 */

    short param_4;	/* product dependent parameter.
			   product: 16 - 21, 35 - 38, 63, 65, 64, 
			            66, 89, 90, 43, max reflectivity, 
				    dBZ, -32 - 95, MDL1OFF 47,
			   product: 28 - 30, 45; max SPW; Knots; 0 - 19;
			   product: 22 - 27, 44, 5556, ; max neg. vel.; 
				    knots; -247 - 0;
			   product: 87; max shear value; E-3/second; 
				    0 - 32767;
			   product: 51, 86, 50, 85, ; azimrth point one;
				    .1 degrees; 0. - 359.9;
			   product: 41, max echo; in 1000 feet; 0 - 70;
			   product: 75; RPG ID Number; 0 - 999;
			   product: 81; max rainfall accm. dBA; in .1; 
				    0. - 32.0;
			   product: 67, 70, 68, 71, 69, 72, ; max turbulence;
				    .1 CM E2/3/S; 0. - 25.0;
			   product: 77; PUP id number; 0 - 32767;
			   product: 47; max percentage; 0 - 99;
			   product: 46; max neg. shear; E-3/sec; -500 - 0;
			   product: 80, 78, 79; max rainfall; .1 inches;
				    0. - 327.6;
			   product: 58; total number of storms; 0 - 20;
			   product: 82; max rainfall; .1 inches/hour; 0. - 63.0;
			   product: 84, 48; wind speed (horiz); knots; 0 - 350;
			   product: 57; max VIL; Kg/Sq. meter; 0 - 200; */
			    
    short param_5;	/* product dependent parameter.  
		   	   product: 22 - 27, 44, 55, 56; max pos. velocity; 
			   Knots; 0 - 245; MDL2OFF 48;
			   product: 87; azi of max shear; .1 degrees;
				    0 - 359.9;
			   product: 51, 86, 50, 85; range of point one;
				    .1 Nmi; 0 - 124.;
			   product: 81; rate bias; in .01; 0 - 99.99;
			   product: 63, 65, 67, 70, 64, 66, 68, 71, 89, 90, 
				    69, 72, ; bottom of layer; in 1000 seet;
				    variable ranges;
			   product: 46; max pos. shear; E-3/sec; 0 - 500;
			   product: 80; beg. date rainfall; julian date;
			   product: 78, 79; rate bias; in .01; 0 - 99.99;
			   product: 84; wind direction (horiz); degrees;
				    0 - 359;
			   product: 48; direction of max speed; degrees;
				    0 - 359; */

    short param_6;	/* product dependent parameter.
			   product: 87; range of max shear; .1 Nmi;
				    0 - 124.0; MDL3OFF 49;
			   product: 51, 86, 50, 85; azi point two;
				    .1 degrees; 0 - 359.9;
			   product: 81; err var. of bias; in .01; 0 - 99.99;
			   product: 69; top of layer; in feet; 6000 - 58000;
			   product: 65, 67, 70, 64, 66, 68, 71, 89, 90, 69,
				    72; top of layer; in 1000 feet;
				    6 - 58 and variable ranges;
			   product: 77; user designation; 0 - 47;
			   product: 74, 83; edit decision time; seconds;
				    60 - 540;
			   product: 43, 46, 45, 44; height of phenomena;
				    1000 Ft AGL; 0 - 70;
			   product: 55, 56; motion source flag; -1 - algorithm;
			   product: 80; beg. time rainfall; minutes; 0 - 1439;
			   product: 78, 79; err var. of bias; in .01; 0 - 99.99;
			   product: 84; elevation angle; .1 degrees; -1. - 45.0;
			   product: 48; alt of max speed; in .01 feet/10;
				    0. - 70.00; */


    short param_7;	/* product dependent parameter.
			   product: 87; resolution; .01 Nmi;
				    .27, .54, 1.1, 2.2;
			   product: 51, 86, 50, 85; range point two;
				    .1 Nmi; 0 - 124.0;
			   product: 81, 80, 78, 79; rainfall end date;
				    Julian date;
			   product: 74, 83; editing timeout; seconds; 60 - 1800;
			   product: 55, height of phenomena; 1000 Ft AGL;
				    0 - 70;
			   product: 84; slant range; .1 Nmi; 0 - 124.0; */

    short param_8;	
    short param_9;	/* product dependent parameters.
			   product: 16 - 21, 35 - 38, 50, 85, 63, 
				    65, 64, 66, 89, 90, calibration constant; 
				    in dB; -50. - 50.; CALCONMSW 51 CALCONLSW
			   product: 81; cast to short; rainfall endtime; 
				    minutes; 0 - 1439;
			   product: 74; cast to short; edited indicator; 
				    not 0 for edited;
			   product: 43, 46, 45, 44, ; cast to short; 
				    alert category; see table IV;
			   product: 55; cast to two shorts; 
				storm speed; .1 Knots; 0 - 99.9;  
				storm direction; .1 degrees; 0 - 359.9;
			   product: 56; cast to two shorts; 
				average storm speed; .1 Knots; 0 - 99.9;  
				average storm direction; .1 degrees; 0 - 359.9;
			   product: 80; cast to two shorts;
				end time rainfall; minutes; 0 - 1439;
				rate bias; in .01; 0 - 99.99;
			   product: 78, 79; cast to short; rainfall end time;
				    in minutes; 0 - 1439;
			   product: 84; cast to short; RMS error; Knots;
				    0 - 29; STSPDOFF 51 STDIROFF 52 */

    short param_10;	/* product dependent parameter.
			   product: 80; error var of bias; in .01; 0 - 99.99;
			   CNTINTOFF 53 */

    short n_maps;	/* if the message is a map data, this is the number
			   of map pieces, otherwise it is 0; 0 - 17; 
			   NMAPSOFF 54 */

    int sym_off;	/* number of shorts from the top of message (message 
			   code field in header) to the -1 divider of each 
			   block listed. If the offset is zero, the block is
			   not part of the product in question;
			   OPRMSWOFF 55 OPRLSWOFF 56 */
    int gra_off;	/* same as above to graphic block 
			   OGMSWOFF 57 OGLSWOFF 58 */
    int tab_off;	/* same as above to tabular block 
			   OTADMSWOFF 59 OTADLSWOFF 60 */

} Graphic_product;

/* Product Description Block structure */
typedef struct {
    short divider;	/* value of -1 used to delineate the header from 
			   the above message header, DIV1OFF 10 */
    short lat_msw;      /* latitude of radar in .001 degrees, -90. - 90., MSW */
    short lat_lsw;      /*                                                LSW */
    short lon_msw;      /* longitude of radar in .001 degrees, [-180,180], MSW */ 
    short lon_lsw;      /*                                                 LSW */ 
    short height;	/* above mean sea level height of radar in feet, 
			   -100 - 11000 RADHGTOFF */
    short prod_code;	/* Internel product code, 16 - 131, negative 
			   number is used sometimes; the same as msg_code?;
			   PRDCODOFF 16 */
    short op_mode;	/* operational (weather) mode; 0 = maintenance; 
			   1 = clear air; 2 = precipitation (severe weather);
			   WTMODOFF */
    short vcp_num;	/* VCP number; 1 - 767, VCPOFF */
    short seq_num;	/* sequence number of the request that generated 
			   the product (refer to figure 3-3, RPG/PUP ICD); 
			   for products generated by an alert condition, 
			   = -13, SQNUMOFF */
    short vol_num;	/* counter, recycles to one (1) every 80 volume 
			   scans; 1 - 80, VSNUMOFF */
    short vol_date;	/* Modified Julian date; VSDATOFF */
    short vol_time_ms;	/* number of seconds after midnight GMT, Most 
			   significant 2 bytes, VSTMSWOFF 22, because there 
			   are 21 shorts before this, we can not cast this
			   to an int, */
    short vol_time_ls;	/* number of seconds after midnight GMT, least 
			   significant 2 bytes VSTLSWOFF 23 */
    short gen_date;	/* product generation data, modified Julian date, 
			   GDPRDOFF */
    short gen_time_msw;	/* product generation time; sec after midnight GMT, MSW */
    short gen_time_lsw;	/*                                                  LSW */

    short param_1;	/* product dependent parameter.  For products 43, 
       			   44, 45, 46, 55, azimuth of window, 
			   in .1 degrees; 0. - 359.9, AZWINOFF */
    short param_2;	/* product dependent parameter.  For products 43, 
			   44, 45, 46, 55, range of window, 
			   in .1 Nml; 0. - 124.0, RNWINOFF */

    short elev_ind;	/* RPG elevation index in a volume (not cut number), 
			   1 - 20, ELINDOFF */


    short param_3;	/* product dependent parameter.  For products 
			   16 - 21, 28 - 30, 22 - 27, , 87, 43, 46, 
			   45, 44, 55, 56, elevation angle, in .1 degrees,
			   -1.0 - 45.0, for product 84, horizontal wind 
			   altitude in 1000 feet,  0 to 70, EAZALOFF 30 */    

    short level_1;	/* data lev. thre. (see p3-63, PRG/PUP ICD),
			   DL1OFF 31 */
    short level_2;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL2OFF */
    short level_3;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL3OFF */
    short level_4;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL4OFF */
    short level_5;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL5OFF */
    short level_6;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL6OFF */
    short level_7;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL7OFF */
    short level_8;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL8OFF */
    short level_9;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL9OFF */
    short level_10;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL10OFF */
    short level_11;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL11OFF */
    short level_12;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL12OFF */
    short level_13;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL13OFF */
    short level_14;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL14OFF  */
    short level_15;	/* data lev. thre. (see p3-63, PRG/PUP ICD) DL15OFF*/
    short level_16;	/* data lev. thre. (see p3-63, PRG/PUP ICD);
			   DL16OFF 46 */

    short param_4;	/* product dependent parameter.
			   product: 16 - 21, 35 - 38, 63, 65, 64, 
			            66, 89, 90, 43, max reflectivity, 
				    dBZ, -32 - 95, MDL1OFF 47,
			   product: 28 - 30, 45; max SPW; Knots; 0 - 19;
			   product: 22 - 27, 44, 5556, ; max neg. vel.; 
				    knots; -247 - 0;
			   product: 87; max shear value; E-3/second; 
				    0 - 32767;
			   product: 51, 86, 50, 85, ; azimrth point one;
				    .1 degrees; 0. - 359.9;
			   product: 41, max echo; in 1000 feet; 0 - 70;
			   product: 75; RPG ID Number; 0 - 999;
			   product: 81; max rainfall accm. dBA; in .1; 
				    0. - 32.0;
			   product: 67, 70, 68, 71, 69, 72, ; max turbulence;
				    .1 CM E2/3/S; 0. - 25.0;
			   product: 77; PUP id number; 0 - 32767;
			   product: 47; max percentage; 0 - 99;
			   product: 46; max neg. shear; E-3/sec; -500 - 0;
			   product: 80, 78, 79; max rainfall; .1 inches;
				    0. - 327.6;
			   product: 58; total number of storms; 0 - 20;
			   product: 82; max rainfall; .1 inches/hour; 0. - 63.0;
			   product: 84, 48; wind speed (horiz); knots; 0 - 350;
			   product: 57; max VIL; Kg/Sq. meter; 0 - 200; */
			    
    short param_5;	/* product dependent parameter.  
		   	   product: 22 - 27, 44, 55, 56; max pos. velocity; 
			   Knots; 0 - 245; MDL2OFF 48;
			   product: 87; azi of max shear; .1 degrees;
				    0 - 359.9;
			   product: 51, 86, 50, 85; range of point one;
				    .1 Nmi; 0 - 124.;
			   product: 81; rate bias; in .01; 0 - 99.99;
			   product: 63, 65, 67, 70, 64, 66, 68, 71, 89, 90, 
				    69, 72, ; bottom of layer; in 1000 seet;
				    variable ranges;
			   product: 46; max pos. shear; E-3/sec; 0 - 500;
			   product: 80; beg. date rainfall; julian date;
			   product: 78, 79; rate bias; in .01; 0 - 99.99;
			   product: 84; wind direction (horiz); degrees;
				    0 - 359;
			   product: 48; direction of max speed; degrees;
				    0 - 359; */

    short param_6;	/* product dependent parameter.
			   product: 87; range of max shear; .1 Nmi;
				    0 - 124.0; MDL3OFF 49;
			   product: 51, 86, 50, 85; azi point two;
				    .1 degrees; 0 - 359.9;
			   product: 81; err var. of bias; in .01; 0 - 99.99;
			   product: 69; top of layer; in feet; 6000 - 58000;
			   product: 65, 67, 70, 64, 66, 68, 71, 89, 90, 69,
				    72; top of layer; in 1000 feet;
				    6 - 58 and variable ranges;
			   product: 77; user designation; 0 - 47;
			   product: 74, 83; edit decision time; seconds;
				    60 - 540;
			   product: 43, 46, 45, 44; height of phenomena;
				    1000 Ft AGL; 0 - 70;
			   product: 55, 56; motion source flag; -1 - algorithm;
			   product: 80; beg. time rainfall; minutes; 0 - 1439;
			   product: 78, 79; err var. of bias; in .01; 0 - 99.99;
			   product: 84; elevation angle; .1 degrees; -1. - 45.0;
			   product: 48; alt of max speed; in .01 feet/10;
				    0. - 70.00; */


    short param_7;	/* product dependent parameter.
			   product: 87; resolution; .01 Nmi;
				    .27, .54, 1.1, 2.2;
			   product: 51, 86, 50, 85; range point two;
				    .1 Nmi; 0 - 124.0;
			   product: 81, 80, 78, 79; rainfall end date;
				    Julian date;
			   product: 74, 83; editing timeout; seconds; 60 - 1800;
			   product: 55, height of phenomena; 1000 Ft AGL;
				    0 - 70;
			   product: 84; slant range; .1 Nmi; 0 - 124.0; */

    short param_8;	
    short param_9;	/* product dependent parameters.
			   product: 16 - 21, 35 - 38, 50, 85, 63, 
				    65, 64, 66, 89, 90, calibration constant; 
				    in dB; -50. - 50.; CALCONMSW 51 CALCONLSW
			   product: 81; cast to short; rainfall endtime; 
				    minutes; 0 - 1439;
			   product: 74; cast to short; edited indicator; 
				    not 0 for edited;
			   product: 43, 46, 45, 44, ; cast to short; 
				    alert category; see table IV;
			   product: 55; cast to two shorts; 
				storm speed; .1 Knots; 0 - 99.9;  
				storm direction; .1 degrees; 0 - 359.9;
			   product: 56; cast to two shorts; 
				average storm speed; .1 Knots; 0 - 99.9;  
				average storm direction; .1 degrees; 0 - 359.9;
			   product: 80; cast to two shorts;
				end time rainfall; minutes; 0 - 1439;
				rate bias; in .01; 0 - 99.99;
			   product: 78, 79; cast to short; rainfall end time;
				    in minutes; 0 - 1439;
			   product: 84; cast to short; RMS error; Knots;
				    0 - 29; STSPDOFF 51 STDIROFF 52 */

    short param_10;	/* product dependent parameter.
			   product: 80; error var of bias; in .01; 0 - 99.99;
			   CNTINTOFF 53 */

    short n_maps;	/* if the message is a map data, this is the number
			   of map pieces, otherwise it is 0; 0 - 17; 
			   NMAPSOFF 54 */

    unsigned short sym_off_msw;
                        /* number of shorts from the top of message (message code
                           field in header) to the -1 divider of each block
                           listed. If the offset is zero, the block is not part
                           of the product in question; MSW */
    unsigned short sym_off_lsw;
                        /*                             LSW */ 
    unsigned short gra_off_msw;
                        /* same as above to graphic block; MSW */
    unsigned short gra_off_lsw;
                        /*                                 LSW */
    unsigned short tab_off_msw;
                        /* same as above to tabular block; MSW */
    unsigned short tab_off_lsw;
                        /*                                 LSW */

} Prod_desc_blk_st;


/* A graphical product is composed of the following parts:

    18 byte message header;
    102 byte product description block;
    product symbology block;
    graphic alphanumeric block;
    tabular alphanumeric block;

	All blocks need not be used. Any blocks that are used must remain in
    the order shown.
*/

typedef struct {

    short divider;	/* value of -1 used to delineate the following from 
			   the above product description block; DIV2OFF 61 */
    short block_id;	/* always 1 */
    int block_len;	/* length of this block in bytes including the 
			   preceding devider and block id; 1 - 80000 */
    short n_layers;	/* number of data layers obtained in this block; 
			   1 - 15 */

/*  for the first layer */
    short layer_divider;   /* value of -1 used to delineate one data layer 
			   from another */
    int data_len;	   /*length of data layer (in bytes) starting from the 
			   bytes after this int and ending at the last data
			   of this layer; 1 - 80000*/
/*    data follows

    (repeating for more layers)
*/
} Symbology_block;


typedef struct {

    short divider;	/* value of -1 used to delineate this block; */
    short block_id;	/* always 2 */
    int block_len;	/* length of this block in bytes including the 
			   preceding devider and block id; 1 - 80000 */
    short n_pages;	/* number of pages; 1 - 48; */

/*  for the first page 
    short page_number;     number of this page; 1 - 48; 
    short page_len;	   number of bytes in text packet 1 through packet
			   n; 4 - 1360; 

    (repeating for more pages)
*/

} Graphic_alpha_block;


typedef struct {

    short divider;	/* value of -1 used to delineate this block; */
    short block_id;	/* always 3 */
    int block_len;	/* length of this block in bytes from the devider 
			   to the end of message; 1 - 65535 */

    /* to be finished */

} Tabular_alpha_block;


typedef struct {

    short divider;      /* -1 */
    short block_id;     /* 4=Env Data from the 40-km RUC model */
    short spare;        /* Spare */
    short comp_type;    /* Compression type, 0=none, 1=bzip2, 2=zlib */
    short decomp_sz_msw;/* Decompressed size (MSW), bytes */
    short decomp_sz_lsw;/* Decompressed size (LSW), bytes */

} External_data_msg_hdr;


#endif


#ifdef FORTRAN

**product
C	size of the intermediate product header in int (4 bytes)
	INTEGER IPHD_SIZE
	PARAMETER (IPHD_SIZE = 120 / 4)

/* */
#endif



