C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/16 19:40:52 $
C $Id: a315l4.ftn,v 1.3 2002/12/16 19:40:52 christie Exp $
C $Revision: 1.3 $
C $State: Exp $
C
$INLINE A315I4__MERGE_COMP,A315I4.FTN
      SUBROUTINE A315L4__COMPARE_RADS( NRSEGP, NRSEGC, RADSEGP,
     >                                 RADSEGC )
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A315L4__COMPARE_RADS
*.
*.  MODULE VERSION: 0015
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     ---------------
*.       03 24 86      0000      DENNIS MILLER        BUILD 2
*.       05 07 86      0001      DENNIS MILLER        SPR # 304
*.       07 10 86      0002      DENNIS MILLER        SPR # 60313, 60367
*.       06 06 89      0003      DAVID M. LYNCH       SPR # 90298
*.       03 26 90      0004      PAUL U. PISANI       SPR # 90697
*.       02 22 91      0005      DENNIS MILLER        SPR # 91256
*.       02 15 91      0005      JOHN DEPHILIP        SPR # 91762
*.       12 03 91      0006      STEVE ANDERSON       SPR # 92740
*.       12/10/91      0007      ED NICHLAS           SPR 92637 PDL Removal
*.       04/24/92      0008      Toolset              SPR 91895
*.       03/25/93      0009      Toolset              SPR NA93-06801
*.       01/28/94      0010      Toolset              SPR NA94-01101
*.       03/03/94      0011      Toolset              SPR NA94-05501
*.       04/01/95      0012      Toolset              CCR NA95-11802
*.       06/26/95      0013      STEVE SMITH          CCR NA94-26302
*.       12/23/96      0014      Toolset              CCR NA95-11807
*.       03/16/99      0015      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A315L4__COMPARE_RADS( NRSEGP, NRSEGC,
*.                                               RADSEGP, RADSEGC )
*.
*.  MODULE FUNCTION:
*.
*.  This routine compares segments in adjacent radials to determine
*.  whether they overlap sufficiently to be correlated into the same
*.  component.
*.
*.  MODULES CALLED: A315H4__BUILD_COMP, A315I4__MERGE_COMP, ABL 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT    TYPE        DESCRIPTION
*.    -   -----    ----        -----------
*.    G   ADPOVLAP I*4         Adaptation data overlap threshold stored in
*.                             Storm Data
*.    C   BSEG_NXC I*4         Beginning segment pointer for entry into
*.                             SEGMAIN for the specified radial and
*.                             reflectivity threshold.
*.    C   IDSTACK  I*4         IDSTACK(NIDTOT*NCFRFLEV)  Circular stacks of
*.                             component IDs for each reflectivity level.
*.    C   LABP     I*4         Component ID used as a pointer to merge two
*.                             components.
*.    C   RADFLAG  I*4         Array indicates processing status of segments
*.                             in RADSEG as either uncorrelated, correlated,
*.                             or finished.
*.    C   RINDX    I*4         Index used to point to current reflectivity
*.                             level for processing segment index array and
*.                             component arrays.
*.    C   FLG_UNC  I*4         (CONSTANT)Constant (flag) used to show that a
*.                             segment has not yet been correlated
*.                             (associated) with a component.
*.    C   NRDCHR   I*4         (CONSTANT)Number of segment characteristics
*.                             stored in RADSEG array.
*.    C   NRDMAX   I*4         (CONSTANT)Maximum number of segments per
*.                             reflectivity level per radial that can be
*.                             stored in the array RADSEG.
*.    C   RAD_FB   I*4         (CONSTANT)Position of starting bins of segments
*.                             in RADSEG array.
*.    C   RAD_ID   I*4         (CONSTANT)Position of ID labels of segments in
*.                             RADSEG, RADSEGC, and RADSEGP arrays.
*.    C   RAD_LB   I*4         (CONSTANT)Position of ending bins of segments
*.                             in RADSEG array.
*.    P   NRSEGC   I*4         Number of segments
*.    P   NRSEGP   I*4         Number of segment pairs
*.    P   RADSEGC  I*4         Current radial segment array
*.    P   RADSEGP  I*4         Previous radial segments array
*.
*.    *   OUTPUT   TYPE        DESCRIPTION
*.    -   ------   ----        -----------
*.    G   ADPOVLAP I*4         Adaptation data overlap threshold stored in
*.                             Storm Data
*.    C   IDSTACK  I*4         IDSTACK(NIDTOT*NCFRFLEV)  Circular stacks of
*.                             component IDs for each reflectivity level.
*.    C   JXC      I*4         Index pointing to segment in SEGMAIN.
*.    C   LABC     I*4         Component ID used as a pointer to merge two
*.                             components.
*.    C   LABP     I*4         Component ID used as a pointer to merge two
*.                             components.
*.    C   RADFLAG  I*4         Array indicates processing status of segments
*.                             in RADSEG as either uncorrelated, correlated,
*.                             or finished.
*.    P   RADSEGC  I*4         Current radial segment array
*.    P   RADSEGP  I*4         Previous radial segments array
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.    C   IDSTACK           I*4         IDSTACK(NIDTOT*NCFRFLEV)  Circular
*.                                      stacks of component IDs for each
*.                                      reflectivity level.
*.    C   LABP              I*4         Component ID used as a pointer to
*.                                      merge two components.
*.    P   NRSEGC            I*4         Number of segments
*.    P   NRSEGP            I*4         Number of segment pairs
*.    P   RADSEGC           I*4         Current radial segment array
*.    P   RADSEGP           I*4         Previous radial segments array
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME    TYPE        DESCRIPTION
*.    ----    ----        -----------
*.    DEL_RNG I*4         The number of bins that over lap in the two segments
*.                        being compared.
*.    FLG_COR I*4         Constant (flag) used to show that a segment has been
*.                        correlated (associated) with a component.
*.    ISTAT   I*4         Status of return from call to circular
*.                        stack-manipulation routine.
*.    IXC     I*4         Loop index used for referencing "current"
*.                        radial-segments.
*.    IXP     I*4         Loop index used for referencing "previous" radial
*.                        segment.
*.    IXX     I*4         Loop index used for referencing "previous" radial
*.                        segments
*.    RNG1    I*4         The larger first bin value of the pair of segments
*.                        being compared
*.    RNG2    I*4         The smaller last bin value of the pair of segments
*.                        being compared
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.    A315CSAD
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A315COCC
*.    A315CPCC
*.    A315CQCC
*.
*.  ERROR CONDITIONS:  None
*.
*.  ASSUMPTIONS/RESTRICTIONS:
*.
*.   More than one segment can be correlated into the same component
*.   per radial.
*.
*.   All radials of each elevation scan are assumed to have Surveil-
*.   lance bin lengths of the same size.
*.
*.  DEVIATION FROM STANDARDS:  None
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.     Compiled using COMP15.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.     Linked using LINK15.CSS
*.
*.  MISC:  None
*.
C********************************************************************
C
C            STORM CELL COMPONENTS: COMPARE_RADS SUBROUTINE
C
C********************************************************************
C
      IMPLICIT NONE
C
C**Attach internal common area (COCC)
$INCLUDE A315.INC/G, **A315COCC (NLIST)
C
C**Attach internal common area (CPCC)
$INCLUDE A315.INC/G, **A315CPPC (NLIST)
$INCLUDE             **A315CPCC (NLIST)
C
C**Attach internal common area (CQCC)
$INCLUDE A315.INC/G, **A315CQPC (NLIST)
$INCLUDE             **A315CQCC (NLIST)
C
C**Attach internal common area (CWCC)
$INCLUDE A315BUF.INC/G, **A315PSAD (NLIST)
$INCLUDE                **A315CSAD (NLIST)
$INCLUDE A315.INC/G, **A315CWCC (NLIST)
C
C*********************** DATA DECLARATIONS **************************
C
C** Passed variables:
C
      INTEGER  NRSEGP, NRSEGC, RADSEGP(NRDCHR, NRDMAX)
      INTEGER  RADSEGC(NRDCHR, NRDMAX)
C
C** Internal variables:
C
      INTEGER  IXP, IXC, IXX, ISTAT, RNG1, RNG2, DEL_RNG
C
      LOGICAL  COND1, COND2, COND3
C
C****************** BEGIN MAIN PROCESSING SECTION *******************
C
C** Compare pairs of Segments of adjacent radials to test for their
C** overlap exceeding the minimum threshold required for their corre-
C** lation into the same component.
C
      DO 50  IXC = 1, NRSEGC
        DO 40  IXP = 1, NRSEGP
C
          IF(RADSEGP(RAD_FB,IXP).GT.RADSEGC(RAD_FB,IXC))THEN
C
C** The first bin of the segment on previous radial is greater than
C** first bin of the segment on current radial.
C
            RNG1=RADSEGP(RAD_FB,IXP)-1
          ELSE
C
C** The first bin of the segment on previous radial is less than or
C** equal to the first bin of the segment on current radial.
C
            RNG1=RADSEGC(RAD_FB,IXC)-1
          ENDIF
C
          IF(RADSEGP(RAD_LB,IXP).LT.RADSEGC(RAD_LB,IXC))THEN
C
C** The last bin of the segment on previous radial is less than
C** last bin of the segment on current radial.
C
            RNG2=RADSEGP(RAD_LB,IXP)
          ELSE
C
C** The last bin of the segment on previous radial is greater than or
C** equal to the last bin of the segment on current radial.
C
            RNG2=RADSEGC(RAD_LB,IXC)
          ENDIF
C
          DEL_RNG = RNG2-RNG1
          IF(DEL_RNG .GE. ADPOVLAP) THEN
C
C** If this condition is met, the pair of Segments correlate.
C** Flag Segment in previous radial as "Correlated".
C
              LABP = RADSEGP( RAD_ID, IXP )
              IF ( RADFLAG( RINDX, IXP ) .EQ. FLG_UNC )  THEN
                 DO 30  IXX=1, NRSEGP
                    IF ( RADSEGP( RAD_ID, IXX ) .EQ. LABP )
     >                            RADFLAG( RINDX, IXX ) = FLG_COR
 30              CONTINUE
              END IF
C
C** Now test for various correlation conditions ...
C
              IF ( RADSEGC(RAD_ID, IXC) .EQ. FLG_UNC )  THEN
C
C** CASE: Segment in current radial has not already been labelled:
C** Give it label of Segment (and Component) matched with in previous
C** radial & add current Segment's attributes to that Component.
C
                 RADSEGC( RAD_ID, IXC ) = LABP
                 JXC = IXC + BSEG_NXC
                 CALL A315H4__BUILD_COMP( )
C
C..           ELSE IF ( RADSEGC( RAD_ID, IXC ) .EQ.
C..  >                  RADSEGP( RAD_ID, IXP ) )  THEN
C
C** CASE: Segment in current radial already has same label as that of
C** Segment in previous radial with which it matches:
C** All processing already taken care of, so do nothing more.
C
              ELSE IF ( RADSEGC( RAD_ID, IXC ) .NE.
     >                  RADSEGP( RAD_ID, IXP ) )  THEN
C
C** CASE: Segment in current radial already has label, but different
C** than that of Segment matched with:
C** Merge the Components by adding or taking max/min of their att-
C** ributes; assign one label to both & return other to ID-stack.
C
                 LABC = RADSEGC( RAD_ID, IXC)
                 CALL A315I4__MERGE_COMP( NRSEGP, NRSEGC, RADSEGP,
     >                                    RADSEGC )
                 CALL ABL( LABP, IDSTACK( 1, RINDX ), ISTAT )
              END IF
C
C** All potential situations taken care of.
C
           END IF
 40     CONTINUE
 50   CONTINUE
C
C**************** END OF PROCESSING FOR SUBROUTINE ******************
C
      RETURN
      END
