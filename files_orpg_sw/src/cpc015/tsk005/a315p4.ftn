C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/16 19:40:57 $
C $Id: a315p4.ftn,v 1.3 2002/12/16 19:40:57 christie Exp $
C $Revision: 1.3 $
C $State: Exp $
C
      SUBROUTINE A315P4__MASS_RANK( )
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A315P4__MASS_RANK
*.
*.  MODULE VERSION: 0002
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     ---------------
*.       06 28 95      0000      STEVE SMITH          CCR NA94-26302
*.       12/23/96      0001      Toolset              CCR NA95-11807
*.       03/16/99      0002      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A315P4__MASS_RANK( )
*.
*.  MODULE FUNCTION:
*.
*.
*.  MODULES CALLED: NONE.
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT        TYPE        DESCRIPTION
*.    -   -----        ----        -----------
*.    C   ELVCOMP      R*4         Stores attributes of component with highest
*.                                 reflectivity level that lies within a
*.                                 component at lower reflectivity levels.
*.    C   MASSRANK     I*4         Rank of components by mass-weighted area in
*.                                 descending order.
*.    C   NBR_STM_COMP I*4         Counter for the number of storm cell
*.                                 components per elevation scan after
*.                                 omitting redundant components at lower
*.                                 reflectivity thresholds.
*.    C   FEA_MWA      I*4         (CONSTANT)Location of component's
*.                                 mass-weighted area in CMPFEAT array.
*.
*.    *   OUTPUT   TYPE        DESCRIPTION
*.    -   ------   ----        -----------
*.    C   MASSRANK I*4         Rank of components by mass-weighted area in
*.                             descending order.
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME     TYPE        DESCRIPTION
*.    ----     ----        -----------
*.    INDX1    I*4         Do loop variable for number of componets
*.    INDX2    I*4         Do loop variable for the number of componets
*.    TMP_RANK I*4         Temporary variable to hold MASSRANK element while
*.                         switching
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A315CNCC
*.    A315CQCC
*.
*.  ERROR CONDITIONS:  None
*.
*.  ASSUMPTIONS/RESTRICTIONS:  None
*.
*.  DEVIATION FROM STANDARDS:  None
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.     Compiled using COMP15.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.     Linked using LINK15.CSS
*.
*.  MISC:  None
*.
C********************************************************************
C
C          STORM CELL CENTROIDS: MASS RANK
C
C********************************************************************
C
      IMPLICIT NONE
C
C**Attach output parameter-definition file (of "STORM_COMPMENTS")
CINCLUDE A315BUF.INC/G,**A315P4C (NLIST)
C
C**Attach internal common area (CNCC)
$INCLUDE A315.INC/G, **A315CNCC (NLIST)
C
C**Attach internal common area (CQCC)
$INCLUDE A315.INC/G, **A315CQPC (NLIST)
$INCLUDE             **A315CQCC (NLIST)
C
C********************** DATA DECLARATIONS ***************************
C
      INTEGER  INDX1, INDX2, TMP_RANK
C
C******************* BEGIN MAIN PROCESSING SECTION ******************
C
C** Sort components in decreasing mass order.
C
      DO 100 INDX1 = 1, NBR_STM_COMP-1
         DO 200 INDX2 = INDX1+1, NBR_STM_COMP
C
            IF ( ELVCOMP( FEA_MWA, MASSRANK( INDX2 ) ) .GT.
     >           ELVCOMP( FEA_MWA, MASSRANK( INDX1 ) ) ) THEN
C
C** If mass of first component less than mass of second component,
C** swap components.
C
               TMP_RANK = MASSRANK( INDX1 )
               MASSRANK( INDX1 ) = MASSRANK( INDX2 )
               MASSRANK( INDX2 ) = TMP_RANK
C
            END IF
 200     CONTINUE
 100  CONTINUE
C
C**************** END OF PROCESSING FOR SUBROUTINE ******************
C
      RETURN
      END
