C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/16 19:41:04 $
C $Id: a315s7.ftn,v 1.3 2002/12/16 19:41:04 christie Exp $
C $Revision: 1.3 $
C $State: Exp $
C
      SUBROUTINE A315S7__COMPUTE_SPEED( NCONPRED, STORMIDTYP,
     >                                  STORMOTION )
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A315S7__COMPUTE_SPEED
*.
*.  MODULE VERSION: 0013
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     ---------------
*.       08 16 85      0000      DENNIS MILLER        BUILD 2
*.       05 07 86      0001      DENNIS MILLER        SPR # 304
*.       11 15 86      0002      M STEWART            SPR # 60346
*.       11 15 86      0002      M STEWART            SPR # 60650
*.       02 22 91      0003      DENNIS MILLER        SPR # 91256
*.       02 15 91      0003      JOHN DEPHILIP        SPR # 91762
*.       12 03 91      0004      STEVE ANDERSON       SPR # 92740
*.       12/10/91      0005      ED NICHLAS           SPR 92637 PDL Removal
*.       04/24/92      0006      Toolset              SPR 91895
*.       03/25/93      0007      Toolset              SPR NA93-06801
*.       01/28/94      0008      Toolset              SPR NA94-01101
*.       03/03/94      0009      Toolset              SPR NA94-05501
*.       04/01/95      0010      Toolset              CCR NA95-11802
*.       05/25/95      0011      STEVE SMITH          CCR NA94-26302
*.       12/23/96      0012      Toolset              CCR NA95-11807
*.       03/16/99      0013      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A315S7__COMPUTE_SPEED( NCONPRED,STORMIDTYP
*.                                                      ,STORMOTION )
*.
*.  MODULE FUNCTION:
*.
*.  This routine computes Storm Cell Speeds by performing a linear
*.  least-squares extrapolation analysis on the known past positions
*.  of a storm cell.
*.
*.  MODULES CALLED: A315Z7__COMPUTE_VARS 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT    TYPE        DESCRIPTION
*.    -   -----    ----        -----------
*.    G   ADPNPVOL I*4         Adaptation data number of volume scans without
*.                             storms threshold stored in Storm Data
*.    G   NSTF_IDT I*4         (CONSTANT)The number of attributes for each
*.                             storm cell in the array STORMIDTYP which
*.                             contains Storm ID, storm type, and number of
*.                             volumes tracked.
*.    G   NSTF_MAX I*4         (CONSTANT)The maximum number of storm cells the
*.                             array STORMIDTYP may hold.  The array provides
*.                             the storm cell Id attribute.
*.    G   NSTF_MOT I*4         (CONSTANT)The number of storm motion attributes
*.                             for each storm cell in the array STORMOTION.
*.                             (First dimension)
*.    G   STF_ID   I*4         (CONSTANT)Offset to the cell ID index in the
*.                             STORMIDTYP part of the tracking/forecast output
*.                             buffer.
*.    G   STF_TYP  I*4         (CONSTANT)Offset to the cell type in the
*.                             STORMIDTYP part of the tracking/forecast output
*.                             buffer.
*.    G   TYP_CON  I*4         (CONSTANT)Flag that indicates that a storm cell
*.                             has a history of at least two volume scans.
*.    G   TYP_NEW  I*4         (CONSTANT)Flag that indicates that a storm is
*.                             newly identified in the current volume scan.
*.    C   CORLTABL I*4         Correlation table containing IDs to the cells
*.                             for all previous volumes (up to the maximum).
*.    C   IXCUR    I*4         Index to the current volume scan in the
*.                             correlation table
*.    C   IXPRE    I*4         Index to the previous volume scan in the
*.                             correlation table
*.    C   NSTMHIST I*4         Array of the # of cells/volume scan in
*.                             correlation table.
*.    C   POSITABL R*4         Table of cell-X and Y centroid positions thru
*.                             the time spanned in the Correlation History
*.                             table.
*.    C   STMSPD   R*4         An array of cell motions including X & Y
*.                             movement (km) in the preceding volume scan and
*.                             speed (km/sec) and direction (deg) for the
*.                             cells history.
*.    C   TIMEHIS2 R*4         Table of the times of past and present volume
*.                             scans corrected for possible change of day.
*.    C   STF_XSP  I*4         (CONSTANT)Offset to the cell x-speed (m/s) in
*.                             the STORMOTION part of the tracking/forecast
*.                             output buffer.
*.    C   STF_YSP  I*4         (CONSTANT)Offset to the cell x-speed (m/s) in
*.                             the STORMOTION part of the tracking/forecast
*.                             output buffer.
*.    C   X_DIR    I*4         (CONSTANT)Index to the x-direction of a storm
*.                             cell in the STMSPD and BESTPOS arrays.
*.    C   X_POS    I*4         (CONSTANT)Index to the x-coordinate of a storm
*.                             cell, the first attribute, in the POSITABLE
*.                             array.
*.    C   Y_DIR    I*4         (CONSTANT)Index to the y-direction of a storm
*.                             cell in the STMSPD and BESTPOS arrays.
*.    C   Y_POS    I*4         (CONSTANT)Index to the y-coordinate of a storm
*.                             cell, the second attribute, in the POSITABLE
*.                             array.
*.    P   NCONPRED I*4         No. of "Continuing" storms in current volume
*.                             scan
*.
*.    *   OUTPUT     TYPE        DESCRIPTION
*.    -   ------     ----        -----------
*.    G   ADPNPVOL   I*4         Adaptation data number of volume scans
*.                               without storms threshold stored in Storm Data
*.    C   IXCUR      I*4         Index to the current volume scan in the
*.                               correlation table
*.    C   STMSPD     R*4         An array of cell motions including X & Y
*.                               movement (km) in the preceding volume scan
*.                               and speed (km/sec) and direction (deg) for
*.                               the cells history.
*.    P   NCONPRED   I*4         No. of "Continuing" storms in current volume
*.                               scan
*.    P   STORMIDTYP I*4         2-D array of supplementary storm desciption
*.                               information per volume scan, output by
*.                               "FORECAST" algorithm.
*.    P   STORMOTION R*4         2-D array of Storm-Motion attributes per
*.                               volume scan, output by "FORECAST" algorithm.
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME    TYPE        DESCRIPTION
*.    ----    ----        -----------
*.    CNVKMME R*4         Constant for converting kms to meters
*.    IC      I*4         Index for a storm within current volume scan.
*.    IX      I*4         Index for a storm within a past volume scan.
*.    IXVOL   I*4         Index of a past volume scan
*.    NVOL    I*4         No. of past & present volume scans for which
*.                        positions of a storm are known.
*.    STF_NVL I*4         Offset to the number of volumes the storm has been
*.                        "Continuing" in STORMIDTYP array.
*.    TAVG    R*4         Average storm Time through its known positions
*.    TSUM    R*4         Sum of a storm's volume scan times
*.    VARTT   R*4         Sum of squares of storm Times
*.    VARXT   R*4         Sum of product of storm (X-pos - X-avg)
*.    VARYT   R*4         Sum of product of storm (Y-pos - Y-avg)
*.    XAVG    R*4         Average storm X-position through its history
*.    XSUM    R*4         Sum of a storm's x-positions through its previous
*.                        positions
*.    YAVG    R*4         Average storm Y-position through its history
*.    YSUM    R*4         Sum of a storm's y-positions through all previous
*.                        positions
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.    A315CSAD
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A315C6T
*.    A315CFF
*.
*.  ERROR CONDITIONS:  None
*.
*.  ASSUMPTIONS/RESTRICTIONS:
*.
*.     New storms (i.e. those with no known past positions) have their
*.   Track Variances in both the X & Y directions set to a flag value
*.   indicating "Undefined".  They eventually will have a velocity
*.   assigned to them (either a default value or the average of
*.   "Continuing" storms), although no forecast positions will be
*.   determined for them.
*.
*.     The units used to represent storm speed and direction are
*.   meters/sec and degrees from, respectively.  All Adaptation and
*.   internal variables not in these units are converted to these
*.   units before internal use.
*.
*.     In the determination of the Track Variance fields, the denom-
*.   inator is set to the number of known storm positions minus two
*.   unless the number of known positions is the minimum allowable
*.   (i.e. two), in which case the denominator is set to the number
*.   of known storm positions minus one.
*.
*.  DEVIATION FROM STANDARDS:  None
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.     Compiled using COMP15.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.     Linked using LINK15.CSS
*.
*.  MISC:  None
*.
C********************************************************************
C
C       STORM POSITION FORECAST : COMPUTE STORM-SPEED  SUBROUTINE
C
C********************************************************************
C
      IMPLICIT NONE
C
C**Attach output parameter-definition file (of "POSITION_FORECAST")
$INCLUDE A315BUF.INC/G,**A315P7F (NLIST)
C
C**Attach local STORMS Adaptation Data parameter file:
$INCLUDE **A315PSAD (NLIST)
C
C**Attach local STORMS Adaptation Data definitions:
$INCLUDE **A315CSAD (NLIST)
C
C**Attach internal common block (of "STORM_TRACK" output variables).
$INCLUDE A315.INC/G,**A315C6T (NLIST)
C
C**Attach internal common block (of "FORECAST" local variables).
$INCLUDE **A315CFF (NLIST)
C
C*********************** DATA DECLARATIONS **************************
C
C** From output buffer:
C
      INTEGER  NCONPRED, STORMIDTYP( NSTF_IDT,NSTF_MAX )
      REAL     STORMOTION( NSTF_MOT,NSTF_MAX )
C
C** Local:
C
      INTEGER  IC, IX, IXVOL, NVOL
      REAL     XSUM, YSUM, TSUM, XAVG, YAVG, TAVG
      REAL     VARXT, VARYT, VARTT, CNVKMME
C
C********************* DATA INITIALIZATIONS *************************
C
      PARAMETER (CNVKMME = 1000.0)
C
C****************** BEGIN MAIN PROCESSING SECTION *******************
C
C**  Determine velocities of all storm cells in current volume scan
C**  with at least one known prior position.
C
      DO 800  IC = 1, NSTMHIST( IXCUR )
C
C**  If prior position exists for storm cell its linked pointer is
C**  positive, increment counter for no. of "Continuous" storm cells
C**  by one.
C
         IF ( CORLTABL(IC,IXCUR) .GT. 0 )  THEN
            NCONPRED = NCONPRED + 1
C
C**  Initialize storm cell's cumulative position, time & volume
C**  count from values in current volume scan.
C
            XSUM = POSITABL( X_POS,IC,IXCUR )
            YSUM = POSITABL( Y_POS,IC,IXCUR )
            TSUM = TIMEHIS2( IXCUR )
            NVOL = 1
C
C**  Update storm cell no., column no. indices to get previous
C**  position of current storm cell (via linked-list pointer).
C
            IX = CORLTABL( IC,IXCUR )
            IXVOL = IXPRE
C
C**  Enter loop to process sum-fields at all previous positions of
C**  present storm cell until end of linked chain is reached.
C
 770        CONTINUE
            XSUM = XSUM + POSITABL( X_POS,IX,IXVOL )
            YSUM = YSUM + POSITABL( Y_POS,IX,IXVOL )
            TSUM = TSUM + TIMEHIS2( IXVOL )
            NVOL = NVOL + 1
C
C**  Test linked pointer at present position. If positive, update
C**  indices & process storm cell at next-previous position.
C
            IF ( CORLTABL(IX,IXVOL) .GT. 0 )  THEN
               IX = CORLTABL( IX,IXVOL )
               IXVOL = IXVOL - 1
               IF ( IXVOL.LT.1 )  IXVOL = ADPNPVOL
               GO TO 770
            END IF
C
C**  When negative linked-pointer reached, all past positions of
C**  storm cell have been tabulated.  Now compute mean fields.
C
            XAVG = XSUM / NVOL
            YAVG = YSUM / NVOL
            TAVG = TSUM / NVOL
C
C**  Set Storm Cell ID from (negative of) value in Correlation table
C**  at end of linked chain, set Storm Cell Type as "Continuing" and
C**  store no. volumes (positions) used to make computations.
C
            STORMIDTYP( STF_ID ,IC ) = -1 * CORLTABL(IX,IXVOL)
            STORMIDTYP( STF_TYP,IC ) = TYP_CON
            STORMIDTYP( STF_NVL,IC ) = NVOL
C
C**  Now call subroutine to compute variance fields by passing
C**  through all storm cell positions in linked chain again.
C
            CALL A315Z7__COMPUTE_VARS( IC, XAVG, YAVG, TAVG,
     >                                 VARXT, VARYT, VARTT )
C
C**  COMPUTE (X-SPEED (Storm Cell)) and (Y-SPEED (Storm Cell)) from
C**  variances.  Store copies in output buffer (converted to m/sec)
C**  and internal buffer (km/sec, for computing Forecast Error next
C**  volume scan).
C
            STMSPD( X_DIR, IC ) = VARXT / VARTT
            STMSPD( Y_DIR, IC ) = VARYT / VARTT
C
C**  WRITE (X-SPEED (Storm Cell)) and WRITE (Y-SPEED (Storm Cell))
C
            STORMOTION( STF_XSP,IC ) = CNVKMME * STMSPD( X_DIR,IC )
            STORMOTION( STF_YSP,IC ) = CNVKMME * STMSPD( Y_DIR,IC )
C
         ELSE
C
C**  If reach here, no previous positions found for storm cell-- its
C**  linked pointer contains the Storm Cell ID, its type is "New"
C**  and the no. volumes known for the storm cell is exactly one.
C
            STORMIDTYP( STF_ID ,IC ) = -1 * CORLTABL(IC,IXCUR)
            STORMIDTYP( STF_TYP,IC ) = TYP_NEW
            STORMIDTYP( STF_NVL,IC ) = 1
         END IF
C
 800  CONTINUE
C
C************** END OF PROCESSING FOR SUBROUTINE ********************
C
      RETURN
      END
