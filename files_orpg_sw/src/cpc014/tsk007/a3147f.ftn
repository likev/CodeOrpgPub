C 
C RCS info 
C $Author: nolitam $ 
C $Locker:  $ 
C $Date: 2002/11/27 15:17:20 $ 
C $Id: a3147f.ftn,v 1.5 2002/11/27 15:17:20 nolitam Exp $ 
C $Revision: 1.5 $ 
C $State: Exp $ 
C 
      SUBROUTINE A3147F__HOURLY_UPD(INIT_FLAG,STATUS)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A3147F__HOURLY_UPD
*.
*.  MODULE VERSION: 0002
*.
*.  MODULE LANGUAGE:  FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.        10/19/95      0000      Cheryl Stephenson    CCR NA94-08462
*.       12/23/96      0001      Toolset              CCR NA95-11807
*.       03/16/99      0002      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A3147F__HOURLY_UPD(INIT_FLAG)
*.
*.  MODULE FUNCTION:  This module is called on Startup and at the top of
*.  of the hour to identify the available hours in the User Selectable
*.  Data Base.  It also determines the start date and time of the
*.  of the data base for the Null USP product.  If it is the top of the
*.  hour and the hourly scan has data in it, it calls A3147P to apply
*.  the Bias to the hourly scan.
*.
*.
*.  MODULES CALLED: A3147P__ADJ_ACCUM 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT              TYPE        DESCRIPTION
*.    -   -----              ----        -----------
*.    G   LAST_TIME_HRDB     I*2         The time of the latest hour that was
*.                                       added to the USP 30 HR Precipitation
*.                                       database.
*.    C   AVAIL_FLAG         L*4         Flag indicating if the hour is
*.                                       available in the User Selectable data
*.                                       base
*.    C   HOURS_AVAIL        I*2         The number of hours available in the
*.                                       User Selectable Data Base
*.    C   LOC_HRDB_TIME      I*2         A local copy of the last time the
*.                                       User Selectable Database was updated
*.    C   USDB_FIL_STAT      I*4         Status of read or write operation on
*.                                       the USDB file
*.    C   USDB_FLG_NO_HRLY   I*4         An array of the flags indicating if
*.                                       the hourly accumulation has been
*.                                       flagged as a bad hourly accumulation
*.    C   USDB_FLG_ZERO_HRLY I*4         An array of the flags indicating if
*.                                       the hourly accumulation has zero
*.                                       accumulation
*.    C   USDB_HRLY_EDATE    I*2         An array of the end date for the
*.                                       hourly accumulation
*.    C   USDB_HRLY_ETIME    I*2         An array of the end hour for the
*.                                       hourly accumulation
*.    C   USDB_HRS_OLD       I*2         An array of indexs for the hourly
*.                                       accumulation
*.    C   GOOD               I*4         (CONSTANT)Status flag value.
*.    C   HRS_24             I*2         (CONSTANT)Number of hours in a day
*.    C   INIT_VAL           I*2         (CONSTANT)Value indicating date/time
*.                                       are initial value
*.    C   MAX_USDB_HRS       I*4         (CONSTANT)Maximum number of hours in
*.                                       the User Selectable Data Base
*.    C   USDB_NEWEST        I*4         (CONSTANT)Index of the newest of the
*.                                       30 hourly scans in the User
*.                                       Selectable Data Base
*.    C   USDB_OLDEST        I*4         (CONSTANT)Index of the oldest of the
*.                                       30 hourly scans in the User
*.                                       Selectable Data Base
*.    P   INIT_FLAG          L*4         A flag indicating whether updating
*.                                       the hourly database because the
*.                                       system has been down or because it it
*.                                       is time for an hourly update.
*.    P   STATUS             I*4         Status of whether the hourly update
*.                                       was accomplished successfully or not.
*.
*.    *   OUTPUT          TYPE        DESCRIPTION
*.    -   ------          ----        -----------
*.    C   AVAIL_FLAG      L*4         Flag indicating if the hour is available
*.                                    in the User Selectable data base
*.    C   AVAIL_HRS       I*2         An array of the available hours in the
*.                                    User Selectable Data Base
*.    C   HOURS_AVAIL     I*2         The number of hours available in the
*.                                    User Selectable Data Base
*.    C   START_DATE_NULL I*2         Modified Julian date indicating the
*.                                    start date of the data available in the
*.                                    User Selectable Database for the Null
*.                                    USP product
*.    P   STATUS          I*4         Status of whether the hourly update was
*.                                    accomplished successfully or not.
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.    C   USDB_HRS_OLD      I*2         An array of indexs for the hourly
*.                                      accumulation
*.    P   STATUS            I*4         Status of whether the hourly update
*.                                      was accomplished successfully or not.
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME  TYPE        DESCRIPTION
*.    ----  ----        -----------
*.    HR23  I*2         (CONSTANT)Parameter value for hour 23 to check for
*.                      midnight crossover
*.    I     I*2         LOOP COUNTER
*.    K     I*2         Do loop index
*.    NULL  I*2         Parameter value of zero.
*.    ONE   I*2         (CONSTANT)Parameter value for one
*.    REC   I*2         Record number of the hour in the data base to be used
*.                      as an index
*.    SET   I*2         (CONSTANT)Parameter indicating a flag is set (value
*.                      equal 1)
*.    TIMES I*2         Number of times need to call A314&P for hourly update
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.    A3CD07
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A3147C1
*.    A3147C2
*.    A3147C4
*.    A3147C8
*.    A3147C9
*.
*.  ERROR CONDITIONS: NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS:  None
*.
*.  DEVIATION FROM STANDARDS:  NONE
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.    THIS MODULE IS COMPILED USING COMP14.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.    THIS MODULE IS LINKED USING LINK14.CSS
*.
*.  MISC:  None
*.
*.*******************************************************************
      IMPLICIT NONE
$INCLUDE A309ADPT.INC/G,**A3CD70PA (NLIST)
$INCLUDE                **A3CD70P6 (NLIST)
$INCLUDE                **A3CD70P8 (NLIST)
$INCLUDE A309.INC/G,**A3PM00 (NLIST)
$INCLUDE A309.INC/G,**A3PM06 (NLIST)
$INCLUDE A309.INC/G,**A3CD05 (NLIST)
$INCLUDE A309.INC/G,**A3CD07 (NLIST)
$INCLUDE A3146.INC/G,**A3146P1  (NLIST)
$INCLUDE A3147.INC/G,**A3147P4  (NLIST)
$INCLUDE A3147.INC/G,**A3147P9  (NLIST)
$INCLUDE             **A3147C1  (NLIST)
$INCLUDE             **A3147C2  (NLIST)
$INCLUDE             **A3147C4  (NLIST)
$INCLUDE             **A3147C8  (NLIST)
$INCLUDE             **A3147C9  (NLIST)
C
C  LOCAL DECLARATIONS
C
      LOGICAL INIT_FLAG
      INTEGER*4 STATUS
      INTEGER*2 I, TIMES
      INTEGER*2 NULL, HR23 ,REC
      INTEGER*2 SET, K, ONE
      PARAMETER (HR23 = 23)
      PARAMETER (NULL = 0, ONE = 1)
      PARAMETER (SET = 1)
C------------------------- EXECUTABLE ---------------------------
X     WRITE(14,*)'ENTER A3147F'
X     WRITE(14,7)(USDB_HRS_OLD(K),K=USDB_NEWEST,15)
X     WRITE(14,7)(USDB_HRS_OLD(K),K=16,USDB_OLDEST)
X7    FORMAT(1X,'USDB_HRS_OLD =',(14(I2,','),I2))
C
C  Initialize varaibles
C
      START_DATE_NULL = INIT_VAL
      HOURS_AVAIL = NULL
      STATUS = GOOD
C
C Initialize array indicating which
C hourly periods went into USP accumulation. For
C use later in building Graphic Null Product.
C
      DO 10 I= 1,MAX_USDB_HRS
         AVAIL_HRS(I) = INIT_VAL
         AVAIL_FLAG(I) = .FALSE.
 10   CONTINUE
C
C  Save Hour ending time in AVAIL_HRS
C
      DO 20 I= USDB_NEWEST,USDB_OLDEST
         K = USDB_HRS_OLD(I)
C
C  Need to check if hour is greater than
C  an initial value and detemine how many
C  hours are available.
C
         IF (USDB_HRLY_ETIME(K) .GT. INIT_VAL)THEN
            AVAIL_HRS(I) =  USDB_HRLY_ETIME(K)
            HOURS_AVAIL = HOURS_AVAIL + ONE
C
C  Set available flag true if no hourly not set.
C
            IF (USDB_FLG_NO_HRLY(K) .NE. SET)THEN
               AVAIL_FLAG(I)  = .TRUE.
            ENDIF
         ENDIF
20    CONTINUE
X     WRITE(14,*)'NUMBER HOURS IN DB = ',HOURS_AVAIL
X     WRITE(14,22)(AVAIL_HRS(K),K=1,15)
X     WRITE(14,22)(AVAIL_HRS(K),K=16,MAX_USDB_HRS)
X22   FORMAT(1X,'AVAIL HOURS = ',(14(I2,','),I2))
X     WRITE(14,*)(AVAIL_FLAG(K),K=1,15)
X     WRITE(14,*)(AVAIL_FLAG(K),K=16,30)
C
C  If the hours available is 1 and the no hourly
C  flag is set, there really is no data in data base
C  so set HOURS_AVAIL to zero for NULL product
C
      IF (.NOT.AVAIL_FLAG(USDB_NEWEST).AND. HOURS_AVAIL .EQ. ONE)THEN
          HOURS_AVAIL = NULL
      ENDIF
X     WRITE(14,*)'NUMBER HOURS IN DB = ',HOURS_AVAIL
C
C  If the hours available are the maximum, then
C  the oldest hour has the start date
C
      IF(HOURS_AVAIL .EQ. MAX_USDB_HRS)THEN
         K = USDB_HRS_OLD(USDB_OLDEST)
         START_DATE_NULL = USDB_HRLY_EDATE(K)

      ELSEIF(HOURS_AVAIL .GT. NULL)THEN
C
C  Search to find first valid start date and available
C  hours starting at next oldest hour
C
         DO 30 I= USDB_OLDEST-1,USDB_NEWEST,-1
            K = USDB_HRS_OLD(I)
C
C  Save Start date of oldest data
C
            IF(USDB_HRLY_EDATE(K).GT.INIT_VAL)THEN
              START_DATE_NULL = USDB_HRLY_EDATE(K)
              GO TO 35
            ENDIF
30       CONTINUE
35       CONTINUE
      ENDIF
X     WRITE(14,*)'7F:START DATE FOR NULL =',
     &         START_DATE_NULL
C
C If system has been initialized or has been shutdown,
C check initialization flag.  Don't need to do hourly
C bias adjustment.
C
      IF(INIT_FLAG) GO TO 999
C
C  Otherwise, it is time to perform bias adjustment and
C  save this data to disk.  It might have been several
C  hours since USP has been called.  So need to determine
C  how many hours to adjust.
C
X     WRITE(14,*)'LOC_HRDB = ',LOC_HRDB_TIME,'LAST_TIME = ',
X    &    LAST_TIME_HRDB
      IF (LOC_HRDB_TIME .EQ. INIT_VAL)THEN
X        WRITE(14,*)'7F: LOCAL DB TIME INITIAL VALUE'
         TIMES = ONE
C
C  Need to handle crossing midnight
C
       ELSEIF(LOC_HRDB_TIME .EQ. HR23)THEN
X        WRITE(14,*)'7F: LOCAL DB TIME CROSS MIDNIGHT'
           TIMES = LAST_TIME_HRDB - LOC_HRDB_TIME + HRS_24
       ELSE
         TIMES =  LAST_TIME_HRDB - LOC_HRDB_TIME
      ENDIF
C
C  Start at newest if the status of th database is
C  is good and there is data call A3147P
C
X     WRITE(14,*)'CALL A3147P UPTO ',TIMES,' TIMES'
      DO 40 I=1,TIMES
         REC = USDB_HRS_OLD(I)
X        WRITE(14,*)'7F: FILE STATUS = ',USDB_FIL_STAT,
X    &   'FLAG NO HRLY = ',USDB_FLG_NO_HRLY(REC),' ZERO HRLY FLG = ',
X    &    USDB_FLG_ZERO_HRLY(REC)
         IF (USDB_FIL_STAT .EQ. GOOD .AND.
     &        USDB_FLG_ZERO_HRLY(REC) .NE. SET .AND.
     &        USDB_FLG_NO_HRLY(REC) .NE. SET) THEN
X            WRITE(14,*)'7F: CALL A3147P '
             CALL A3147P__ADJ_ACCUM(USDB_HRS_OLD(I),STATUS)
X            WRITE(14,*)'7F: RETURN FROM 7P, STATUS =',STATUS
         ENDIF
40    CONTINUE
999   CONTINUE
X     WRITE(14,*)'EXIT A3147F, STATUS = ',STATUS
      RETURN
      END
