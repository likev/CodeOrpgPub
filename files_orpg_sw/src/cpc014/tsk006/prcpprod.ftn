C
C RCS info
C $Author: steves $
C $Locker:  $
C $Date: 2002/07/31 13:57:50 
C $Id: prcpprod.ftn,v 1.29 2011/02/25 15:23:15 steves Exp $
C $Revision: 1.29 $
C $State: Exp $
C
      Program PRCPPROD
C***********************************************************************
C
C	Module:	prcpprod.ftn
C
C	Description: This module contains the main function for the 
C	open RPG Precipitation Products task
C
C***********************************************************************


	IMPLICIT NONE

$INCLUDE rpg_port.inc,**rpg_port	

C adaptation common blocks
$INCLUDE A309ADPT.INC, **A3CD70P6
$INCLUDE               **A3CD70CA
$INCLUDE               **A3CD70_HYDROMET_ADJ 
$INCLUDE               **A3CD70_DEA_NAMES 
$INCLUDE               **A3CD70C5 
$INCLUDE               **A3CD70C8 
$INCLUDE               **A3CD70C4 
$INCLUDE A309.INC/G,**A3PM00 
$INCLUDE            **A3PM01 
$INCLUDE            **A3CD00 
$INCLUDE            **A3CD07 
$INCLUDE A313HBUF.INC/G,**A313HYPP 
$INCLUDE A3146.INC/G,**A3146P1 
$INCLUDE           **A3146C2 
$INCLUDE           **A3146C3 
$INCLUDE           **A3146D1 
$INCLUDE           **A3146PD 
$INCLUDE           **A3146CD 
$INCLUDE           **A3146P8 
C
C itc support
$INCLUDE itc.inc, **A314C1
$INCLUDE itc.inc, **A314C8
$INCLUDE itc.inc, **A314C9
$INCLUDE itc.inc, **CD07USP
C
$INCLUDE itc.inc, **A3136C3
C
C block data initialization for A314C2 common: DPA dBA conversion table
$INCLUDE a3146c.ftn

        integer param, status
        logical HDB_EXISTS
C
        integer OPEN_STATUS
        integer IOSTATUS
        integer TEST_GRID_PTR, BUFFER_STATUS
        integer TEST_WORDS
        parameter(TEST_WORDS=(KGRID_CENTER*KGRID_CENTER + 1)/2)
C
        character*255 FILENAME
        character*5 HYPROD_ACCT
        parameter (HYPROD_ACCT='0')

        integer PRCPPROD_CD07_UPDT
        external PRCPPROD_CD07_UPDT

	INTEGER HYDROMET_ADJ_CALLBACK_FX	;adapt callback f(x)
	EXTERNAL HYDROMET_ADJ_CALLBACK_FX	;adapt callback f(x)

        ;** Initialize log error services.
        call RPG_init_log_services()

	;** Specify inputs used by this task.
	call RPG_in_data ( HYADJSCN, VOLUME_DATA )

	;** Specify outputs generated by this task.
        call RPG_out_data ( HY1HRACC, VOLUME_DATA, 78 )
        call RPG_out_data ( HY3HRACC, VOLUME_DATA, 79 )
        call RPG_out_data ( HYSTMTOT, VOLUME_DATA, 80 )
        call RPG_out_data ( HY1HRDIG, VOLUME_DATA, 81 )
        call RPG_out_data ( HYSUPPLE, VOLUME_DATA, 82 )
        call RPG_out_data ( HYUSPBUF, VOLUME_DATA, INT_PROD )
        call RPG_out_data ( CPC10MSG, DEMAND_DATA, INT_PROD )
        call RPG_out_data ( HYDIGSTM, VOLUME_DATA, 138 )

        ;** Register ITCs accessed by this task.
        call RPG_itc_out ( A314C8_ID, A314C8_FIRST, A314C8_LAST(2),
     >                     HYUSPBUF )
        call RPG_itc_out ( A314C9_ID, A314C9_FIRST, A314C9_LAST(2),
     >                     HYUSPBUF )
        call RPG_itc_out ( ITC_CD07_USP, CD07_USP_FIRST,
     >                     CD07_USP_LAST(2), HYUSPBUF )
        call RPG_itc_in ( A314C1_ID, A314C1_FIRST, A314C1_LAST(2),
     >                    ITC_BEGIN_VOLUME )
        call RPG_itc_in ( A314C8_ID, A314C8_FIRST, A314C8_LAST(2),
     >                    ITC_BEGIN_VOLUME )
        call RPG_itc_in ( ITC_CD07_USP, CD07_USP_FIRST,
     >                    CD07_USP_LAST(2), ITC_BEGIN_VOLUME )
        call RPG_itc_in ( A3136C3_ID, A3136C3_FIRST, A3136C3_LAST(2),
     >                    HYADJSCN )
        call RPG_itc_callback ( ITC_CD07_USP, PRCPPROD_CD07_UPDT )

        
	;** Register adapdation blocks and scan summary array.
	call RPG_reg_adpt( RDACNT_ID, RDACNT_FIRST, BEGIN_VOLUME ) 
	call RPG_reg_adpt( ENVIRON_ID, ENVIRON_FIRST, BEGIN_VOLUME ) 
	call RPG_reg_adpt( COLRTBL_ID, COLRTBL_FIRST, BEGIN_VOLUME ) 
	call RPG_reg_scan_summary()
    
	;** register adaptation data callback functions
	call RPG_reg_ade_callback( HYDROMET_ADJ_CALLBACK_FX,
     $                             TIMBIEST,
     $                             HYDROMET_ADJ_DEA_NAME,
     $                             BEGIN_VOLUME )
	call RPG_reg_site_info( SIRDALAT )
 
        ;** Read the adaptation data block.
        call RPG_read_adapt_block( ENVIRON_ID, status )
 
        ;** Get the full name of the file from adaptation data via
        ;** the common routine...HYPROD_FN...is the name that is
        ;** present in the adaptation data.
        call A3CM04__FULL_NAME(HYPROD_FN, HYPROD_ACCT,
     >                         FILENAME)

        ;** Inquire about the existence of this file.
        INQUIRE (FILE = FILENAME, EXIST = HDB_EXISTS)
        OPEN (UNIT = HDB_DISK_LU, ACCESS='DIRECT', FILE = FILENAME,
     >        IOSTAT = OPEN_STATUS, RECL=NPLR_BYTES)

        ;** If file not accessible, then set up the status variable in
        ;** the common block to indicate the file is not available.
        if (OPEN_STATUS .NE. NORMAL) then

            call A3CM08__CHANGE_NOTICE(CNDISKFILE, HYALARM_FLG,
     >                   OPEN_STATUS, HDB_DISK_LU, IINIT, IINIT)
            FIL_STAT = OPEN_STATUS
            LAST_OPERATION = -INCRMENT
            LAST_REC = IINIT
 
        else if (HDB_EXISTS) then

           ;** Read the directory record.
           call A31468__PDB_IO(READKODE,DIR_REC,START_DIR,IOSTATUS)
 
           ;** Read the DPA database record.
           call A31468__PDB_IO(READKODE,DPA_REC,NEWEST_RS_INDX,
     >                         IOSTATUS)
        else
 
           ;** Initialize the file.
           call A3146F__INIT_FILE
        end if
 
        ;** Determine if the user selectable data base (USDB)
        ;** exists on disk, and try to open the file. The file is
        ;** created if it does not exist, and is initialized.
        call A31471__DEFINE_USDB
 
        ;** If necessary, call the routine to initialize the polar
        ;** to Cartesian and LFM to Cartesian grid conversion 
        ;** tables.
 
        if (.NOT. POLAR_CART_INIT_OK  ) then
 
           call A31215__GET_OUTBUF (SCRATCH, TEST_WORDS,
     >                            TEST_GRID_PTR, BUFFER_STATUS)
           if (BUFFER_STATUS .eq. NORMAL) then
 
              call A3146A__INIT_POLAR_TO_CARTESIAN (MEM(TEST_GRID_PTR))
              POLAR_CART_INIT_OK = .TRUE.
              call A31216__REL_OUTBUF (TEST_GRID_PTR, DESTROY)
 
           else
              ;** Write Error Message
              write(*,*) 'UNABLE TO INIT CARTESIAN CONVERSION'
              write(*,*) 'DUE TO NO MEM FOR SCRATCH BUFFER'
              CLOSE(UNIT=HDB_DISK_LU,IOSTAT=OPEN_STATUS)
              call A31137__HARI_KIRI
           end if
        end if
 
        ;** Write ITC A314C8
        call RPG_itc_write( A314C8_ID, status )

        ;** Initialize this task.
        call RPG_task_init( VOLUME_BASED )

	;** The main loop, which will never end.
 10     call RPG_wait_act( WAIT_DRIVING_INPUT )
        call A31461__BUFFER_CONTROL( param )
	goto 10

	end
