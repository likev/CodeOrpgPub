

# RPG resource allocation table

# Section "node_names" specifies the node names and their host names 
# (IP address, e.g. 128.34.02.01, can be used for the host name). This section 
# is required. Only one such section can exist.

# Resource configuration sections. Each such section must have a unique name
# that is not "node_names" or "ras_*". Each resource configuration section 
# specifies a particular resource configuration, the way the mrpg distributes 
# the processes and data stores. mrpg uses the configuration section specified 
# through its command line. If it is not specified, the first resource 
# configuration section, in which all nodes are accessible from the default 
# node, are used.

# In a resource configuration section, each line starts with a node name 
# followed by one or more "ras_*" names. Each "ras_*" name refers to a group of
# tasks and data stores (See descriptions in the following sections). The same 
# node name can appear on multiple lines. The lines in a resource configuration
# section allocate tasks and data stores to nodes. A line can also be started
# with key word "replicate". Such a line specifies a data replication path. The
# format is "replicate data_id source_node destination_node".

# Sections with name started with "ras_" are resource allocation sections. Each
# such section must have a unique name. Each "ras_" section contains a group of
# products, data stores and tasks. The key words used for them are respectively
# "product", "data" and "task". Multiple items of the same type can be 
# specified on the same line. Characters after "#" on a line are not 
# interpreted.

# The special name of "ras_default" represents the group of all tasks and data
# stores that are not explicitly assigned to any of the nodes. One does not 
# need to create this section. The node that has "ras_default" assigned is 
# called the default node. The first node is treated as the default node if no 
# default node is explicitly defined with "ras_default".

    node_names {
	rpg		zhongqi
	bdds		dan
	pc		z-pc
    }

    all_nodes {
	rpg		ras_sharedBasedata	ras_default
#	bdds	ras_baseProducts	ras_sharedBasedata
	pc	ras_baseProducts	ras_sharedBasedata
	replicate	55	rpg	pc
    }

    single_node {
	rpg
    }

    ras_baseProducts {
	product 2 3 4 5 6 7 
	task basrflct
	product 11 12 13 14 15 16
	task basvlcty
    }

    ras_sharedBasedata {
	product 55 79 96		# BASEDATA REFLDATA COMBBASE
#	task veldeal
    }


