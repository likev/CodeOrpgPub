#include <gtk/gtk.h>
#include <time.h>


void set_search_string(char *var);
char *get_search_string();
void set_dir_location(char *var);
void set_init_file(char *var);
char * get_dir_location();
char * get_init_file();
void reset_ignore_msg_types();
void set_state_of_ignore_msg_types(GtkToggleButton *togglebutton, int index);
void set_filter_window_open();
void set_filter_window_closed();
int get_filter_window_status();
void set_range_start_filter_time(time_t f_time);
void set_range_end_filter_time(time_t f_time);
void set_match_filter_time(GtkWidget *widget, int option);
int get_range_start_filter_time();
int get_range_end_filter_time();
struct tm get_match_filter_time();
gint destroy(GtkWidget *widget, gpointer data);
void fill_radar_combo_list(GtkWidget *widget);
int get_num_row_in_tree_view(GtkWidget *widget, char *tree_view_name);
int get_num_rows_in_tree_view(GtkWidget *widget, char *tree_view_name);
int does_directory_exist(char *path);
int does_dir_contain_asp_files(char *dir);
void get_base_path(char **retVal, char *path);
void get_file_name(char **retVal, char *path);
int sort_alphabetically(const void *a, const void *b);
void my_g_free(const void *a, const void *b);
int get_value_of_combo_box(GtkWidget *widget, char *comboName, char **myValue);
int get_text_of_combo_box_entry(GtkWidget *widget, char *comboName, char **myValue);
time_t convert_string_date_to_time_t(char *date, char *time);
time_t entries_to_time_t(int year, int mon, int day, int hour, int min, int sec);
int does_file_exist(char *filename);
void get_asp_files_in_dir_after_date(char *myDir, GList **dataArray, time_t start_time);
void get_asp_files_within_time_span(char *myDir, GList **dataArray, time_t start_time, time_t end_time);
int get_asp_subdirs(char* radarName, GList ** dirList);
int get_asp_files_in_dir(char *myDir, GList **dataArray);
time_t pull_date_from_file_name(char *fileName);
int convert_month_string_to_int(char *month);
void update_combobox_from_glist(GtkComboBox *combobox, GList *myList, int order, int start_pos);
int get_spin_button_value(GtkWidget *widget, char *spinbutton);
void set_spin_buttons(GtkWidget *widget, GtkWidget *filter_window);
void set_spin_button_value(GtkWidget *widget, char *spinbutton, int value);
time_t get_range_start_time(GtkWidget *widget);
time_t get_range_end_time(GtkWidget *widget);
time_t get_match_spinbutton_time(GtkWidget *widget);
int is_file_a_valid_product(char *filePath);
void remove_from_tree_view(GtkWidget *widget, char *tree_view_name);
int clear_tree_view(GtkWidget *widget, char *tree_view_name);
int clear_tree_filter_view(GtkWidget *widget, char *tree_view_name);
int add_unique_packet_to_packets_list(GtkWidget *widget, char *radarName, char *packetName, char *path);
void add_packet_to_selected_packets_list(GtkWidget *widget, char *radarName, char *packetName, char *path, int prepend);
void set_match_spinbuttons(GtkWidget *widget, GtkWidget *filter_window);
int get_current_radar_being_displayed(GtkWidget *widget, char **radarName);
void set_range_start_spinbuttons(GtkWidget *widget, GtkWidget *filter_window);
void set_range_end_spinbuttons(GtkWidget *widget, GtkWidget *filter_window);
void set_checkboxes(GtkWidget *widget, GtkWidget *filter_window);
void add_glist_of_files_to_packet_list(GtkWidget *widget, GList *fileList, char *path);
void update_main_from_select_packets_list(GtkWidget *widget, GtkTreeStore *store);
void set_all_selected_packets_to_main_window(GtkWidget *widget);
int get_tree_selected_packets_list_size(GtkWidget *widget);
int compare_match_values_to_spinbuttons(GtkWidget *widget, time_t rowTime);
gboolean message_tree_filtering_function(GtkTreeModel *model, GtkTreeIter *iter, gpointer data);
void add_row_to_main_tree_store(GtkTreeStore **tree_store, char *row);
