orpgpat(3)			ORPG SUM Man Page		orpgpat(3)

NAME

orpgpat - OPRGPAT Library Functions

SYNOPSIS

#include <orpg.h>

void	ORPGPAT_error (void (*user_exception_callback)());
int	ORPGPAT_io_status();

int	ORPGPAT_read_tbl  ();
int	ORPGPAT_write_tbl ();
int	ORPGPAT_num_tbl_items ();
in	ORPGPAT_get_update_flag ();
void	ORPGPAT_set_update_flag ();

int	ORPGPAT_add_prod              (int prod_id);
int	ORPGPAT_delete_prod_id        (int prod_id);

int	ORPGPAT_prod_in_tbl           (int prod_id);
int	ORPGPAT_elevation_based       (int prod_id);

int	ORPGPAT_get_code              (int prod_id);
char*	ORPGPAT_get_gen_task          (int prod_id);
int	ORPGPAT_get_max_size          (int prod_id);
int	ORPGPAT_get_num_priorities    (int prod_id);
int	ORPGPAT_get_priority          (int prod_id, int indx);
int	ORPGPAT_get_num_dep_prods     (int prod_id);
int	ORPGPAT_get_num_opt_prods     (int prod_id);
int	ORPGPAT_get_dep_prod          (int prod_id, int indx);
int	ORPGPAT_get_opt_prod          (int prod_id, int indx);
int	ORPGPAT_get_num_parameters    (int prod_id);
int	ORPGPAT_get_parameter_index   (int prod_id, int lindx);
int	ORPGPAT_get_parameter_max     (int prod_id, int lindx);
int	ORPGPAT_get_parameter_min     (int prod_id, int lindx);
int	ORPGPAT_get_parameter_default (int prod_id, int lindx);
int	ORPGPAT_get_parameter_scale   (int prod_id, int lindx);
int	ORPGPAT_get_prod_id           (int indx);
int	ORPGPAT_get_prod_id_from_code (int code);
int	ORPGPAT_get_type              (int prod_id);
int	ORPGPAT_get_wx_modes          (int prod_id);
int	ORPGPAT_get_alert	      (int prod_id);
int	ORPGPAT_get_warehoused	      (int prod_id);
int	ORPGPAT_get_elevation_index   (int prod_id);
int	ORPGPAT_get_compression_type  (int prod_id);

int	ORPGPAT_set_code              (int prod_id, int code);
int	ORPGPAT_set_description       (int prod_id, char *string);
int	ORPGPAT_get_format_type       (int prod_id);
int	ORPGPAT_get_resolution        (int prod_id, int flag);
int	ORPGPAT_set_gen_task          (int prod_id, char *name);
int	ORPGPAT_set_max_size          (int prod_id, int size);
int	ORPGPAT_set_name              (int prod_id, char *name);
int	ORPGPAT_set_parameter_index   (int prod_id, int lindx, int pindx);
int	ORPGPAT_set_parameter_max     (int prod_id, int lindx, int max);
int	ORPGPAT_set_parameter_min     (int prod_id, int lindx, int min);
int	ORPGPAT_set_parameter_default (int prod_id, int lindx, int def);
int	ORPGPAT_set_parameter_name    (int prod_id, int lindx, char *name);
int	ORPGPAT_set_parameter_scale   (int prod_id, int lindx, int scale);
int	ORPGPAT_set_parameter_units   (int prod_id, int lindx, int *units);
int	ORPGPAT_set_prod_id           (int indx, int id);
int	ORPGPAT_set_type              (int prod_id, int type);
int	ORPGPAT_set_wx_modes          (int prod_id, int wx_modes);
int	ORPGPAT_set_alert	      (int prod_id, int alert);
int	ORPGPAT_set_warehoused	      (int prod_id, int warehoused_time);
int	ORPGPAT_set_elevation_index   (int prod_id, int elevation_index);
int	ORPGPAT_set_compression_type  (int prod_id, int compression_type);
int	ORPGPAT_set_format_type       (int prod_id, int format_type);
int	ORPGPAT_set_resolution        (int prod_id, int flag, int resolution);

int	ORPGPAT_add_priority          (int prod_id, int id);
int	ORPGPAT_add_dep_prod          (int prod_id, int id);
int	ORPGPAT_add_opt_prod          (int prod_id, int id);
int	ORPGPAT_add_parameter         (int prod_id);
int	ORPGPAT_delete_priority       (int prod_id, int lindx);
int	ORPGPAT_delete_dep_prod       (int prod_id, int lindx);
int	ORPGPAT_delete_opt_prod       (int prod_id, int lindx);
int	ORPGPAT_delete_parameter      (int prod_id, int lindx);
int	ORPGPAT_set_priority          (int prod_id, int lindx, int id);
int	ORPGPAT_set_dep_prod          (int prod_id, int lindx, int id);
int	ORPGPAT_set_opt_prod          (int prod_id, int lindx, int id);

char *ORPGPAT_get_description     (int prod_id, int option);
char *ORPGPAT_get_mnemonic        (int prod_id);
char *ORPGPAT_get_name            (int prod_id);
char *ORPGPAT_get_parameter_name  (int prod_id, int lindx);
char *ORPGPAT_get_parameter_units (int prod_id, int lindx);
char *ORPGPAT_get_tbl_ptr         (int indx);

short *ORPGPAT_get_dep_prods_list (int prod_id);
short *ORPGPAT_get_opt_prods_list (int prod_id);

Pd_attr_entry *ORPGPAT_get_tbl_entry (int prod_id);

DESCRIPTION

ORPGPAT is a module in library ORPG that provides access to the product
attribute table.  The product attributes table contains descriptions of all
RPG products.

The argument "prod_id" is the ORPG product ID (the legacy buffer number).
ORPGPAT automatically re-reads the PD_PROD_ATTR_MSG_ID in LB  ORPGDAT_PROD_INFO
when the table is updated. When there is a fatal error, such as malloc failure
or an LB read error, ORPGPAT sends an LE message and then terminates the
process. Optionally, the application using the ORPGPAT module can register an
error callback function. If such a function is registered, the function is
called instead of termination. In this case the process can choose to continue
although all ORPGPAT function calls will not return valid values until the
error condition changes.  When an application modifies and updates the
PD_PROD_ATTR_MSG_ID message, a ORPGEVT_PROD_ATTR event is posted.  The
application is blocked from receiving this event if it is the poster.

ORPGPAT_error() registers a callback function as described in the above section.
    
ORPGPAT_io_status returns the status of the last I/O operation

ORPGPAT_set_update_flag() is used to force set the PD_PROD_ATTR_MSG_ID update
flag so it will be re-read when new product attributes information is
requested.

ORPGPAT_get_update_flag() returns the value of the PD_PROD_ATTR_MSG_ID update
flag.  A 0 indicates no new data are to be read from the LB message.  A 1
indicates new data are available and that the message will be re-read when new
product attributes information is requested.

ORPGPAT_read_tbl() forces a read of the product attributes table from the
PD_PROD_ATTR_MSG_ID message in the ORPGDAT_PROD_INFO LB.  The data are stored
internally so users do not have to be concerned about allocating memory in
their applications.  Users normally do not have to explicity call
ORPGPAT_read_tbl() since is is automatically invoked when any attributes table
information is requested via other ORPGPAT functions.  When ORPGPAT_read_tbl()
is invoked for the first time, ORPGEVT_PROD_ATTR events are registered.  When
an ORPGEVT_PROD_ATTR event is posted, an internal flag is set and the
PD_PROD_ATTR_MSG_ID message is re-read when a new ORPGPAT function is invoked.
On success, 0 is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_write_tbl() dumps the internal copy of the product attributes table to
the PD_PROD_ATTR_MSG_IS message of the ORPGDAT_PROD_INFO LB.  Upon success, an
ORPGEVT_PROD_ATTR event is posted and the size of the message written is
returned.  On failure, ORPGPAT_ERROR is returned.  The application is blocked
from receiving this event only if it originated with this application.
    .

ORPGPAT_get_tbl_ptr() returns a pointer to the start of the "indx" element
(record) in the attributes table.  The first index in the table is 0.  A NULL
pointer is returned on failure.

ORPGPAT_prod_in_tbl() looks for the table entry containing the input product id
(prod_id) and returns an index representing the relative position of the
product in the table.   If prod_id is larger than the allowed table size,
ORPGPAT_ERROR is returned.  If prod_id is not found in the table,
ORPGPAT_DATA_NOT_FOUND is returned.

ORPGPAT_get_tbl_entry() returns a pointer to the table entry containing the
specified product id (prod_id).  On failure, a NULL pointer is returned.

ORPGPAT_elevation_based() returns a positive integer representing the index of
the product parameter containing elevation information for the specified
product id (prod_id).  If the product is not elevation-based, -1 is returned.
On failure ORPGPAT_ERROR is returned.

ORPGPAT_get_code() returns the legacy product code for a specified product id
(prod_id).  If the product is defined but has no associated product code, 0 is
returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_code() sets the product code element for the table entry containing
the specified product id (prod_id) to the input code (code).  On success, the
code is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_max_size() returns the maximum message size for a specified product
id (prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_max_size() sets the maximum message size element for the table
entry containing the specified product id (prod_id) to the input size (size). 
On success, the size is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_wx_modes() returns the weather modes mask for a specified product
id (prod_id).  Bit 0 corresponds to weather mode 0, 1 to weather mode 1, and 2
to weather mode 2.  If a bit is set, this product is valid for that weather
mode.  On success, the weather modes mask is returned.  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_set_wx_modes() sets the weather modes mask (wx_modes) for the table
entry containing the specified product id (prod_id).  Refer to the previous
discussion of ORPGPAT_get_wx_modes() about which bits correspond to which
weather modes.  On success, the weather mode mask is returned.  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_get_type() returns the product type for specified product (prod_id).
0 indicates a volume-based product and 1 an elevation-based product.  On
success, the type is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_type() sets the product type (type) for the entry containing the
specified product id (prod_id).  0 indicates a volume-based product and 1 an
elevation-based product.  On success, the type is returned.  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_num_tbl_items() returns the number of elements in the product
attributes table.

ORPGPAT_get_alert() returns the alert/product-pairing flag for the specified
product id (prod_id).  If bit 0 is set, this product can be paired with
volume-type alerts.  If bit 1 is  set, this product can be paired with
elevation-type alerts.  If bit 2 is set, this product can be paired with
hydromet-type products.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_alert() sets the alert/product pairing flag (alert) for the
specified product id (prod_id).  See the discussion of ORPGPAT_get_alert() for
information on what the values of "alert" should be.  On failure, ORPGPAT_ERROR
is returned.

ORPGPAT_get_warehoused() returns the warehoused time for the specified product
id (prod_id).  If value is 0, the product is not warehoused.  If >0, the time
is specified in seconds.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_warehoused() sets the warehoused time for the specified product id
(prod_id).  See the discussion of ORPGPAT_get_warehoused() for information on
what the values of "warehoused" should be.  On failure, ORPGPAT_ERROR is
returned.

ORPGPAT_get_elevation_index() returns the elevation_index for the specified product
id (prod_id).  If the product type is not elevation-based, the elevation index is 
meaningless.  If elevation-based, the elevation index returned ranges between 0 and 5,
corresponding to the product dependent parameter position.  On failure, ORPGPAT_ERROR
is returned.

ORPGPAT_set_elevation_index() sets the elevation_index for the specified product id
(prod_id).  This field should not be set unless the product type is elevation data.
If set, the corresponding parameter must also be defined.  See ORPGPAT_set_parameter_*.
On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_compression_type() returns the compression_type for the specified product
id (prod_id).  If product is not compressed, COMPRESSION_NONE (0) is returned.  On 
failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_compression_type() sets the compression_type for the specified product id
(prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_format_type() returns the format_type for the specified product
id (prod_id).  If a format type is not defined for the product 0 is returned.
On failure, ORPGPAT_ERROR is returned.  The format types supported can be
found in header file orpgpat.h.

ORPGPAT_set_format_type() sets the format_type for the specified product id
(prod_id).  On failure, ORPGPAT_ERROR is returned.  The format types supported
can be found in header file orpgpat.h.

ORPGPAT_get_resolution() returns the resolution for the specified product
id (prod_id) and component (flag).  The valid flag values are:
ORPGPAT_X_AZI_RES and ORPGPAT_Y_RAN_RES.  If a resolution is not defined for
the product 0 is returned.  On failure, ORPGPAT_ERROR is returned.  The format
types supported can be found in header file orpgpat.h.

ORPGPAT_set_resolution() sets the resolution for the specified product id
(prod_id) and component (flag).  On failure, ORPGPAT_ERROR is returned.  The
resolution should be scaled according to the component being set.  For
radial and hires radial product types azimuth angles should be scaled by
10.  Range and X/Y component values are assumed to be in whole meters.

ORPGPAT_get_num_parameters() returns the number of parameters defined for the
specified product id (prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_description() returns a pointer to the description string
associated with a product id (prod_id).  The option argument specifies whether
the pointer returns the pointer to the complete description string or the
description string after the mnemonic definition (if one exists).  If the first
character of the description string is a blank, then it is assumed that the
description string is not preceded by a mnemonic.  If the first character is
not a blank, then it is assumed that the description string is preceded by a
mnemonic and that it starts at the first non-blank character after the mnemonic
string.  The mnemonic string and description strings are separated by a blank
character.  If you want the description string with the mnemonic, then set the
option argument to "STRIP_NOTHING".  If you do not want the mnemonic field,
then set the option argument to "STRIP_MNEMONIC".  On failure, NULL is
returned.

ORPGPAT_set_description() sets the description string associated with the
specified product id (prod_id) to the user supplied string (string).  Since the
description string is not part of the main product attributes structure and is
variable in length, changing the size of the description string results in a
resize of the memory used to store the attributes table.  On success, the
length of the new description string is returned.  On failure, ORPGPAT_ERROR
is returned.  NOTE:  refer to the discussion of description string in
ORPGPAT_get_description() about the combination of the product mnemonic and
description strings.  If you do not want to associate a mnemonic with the
product, the first character in the description string must be blank.

ORPGPAT_add_parameter() creates a new parameter entry for the specified product
id (prod_id).  All fields associated with the new parameter entry are blank.
It is assumed that the user will use the other parameter related functions to
set specific parameter properties.  On success, the index of the new parameter
entry is returned.  On failure, ORPGPAT_ERROR is returnd.

ORPGPAT_delete_parameter() deletes a parameter entry (referenced by relative
index) for the specified product id (prod_id).  On success, the index if the
deleted parameter is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_add_priority() adds a new product priority (id) to the product priority
list of the specified product id (prod_id).  On success, the index of the new
product priority list element is returned.  On failure, ORPGPAT_ERROR is
returned.  NOTE:  Currently, it is assumed that the first element (index 0) is
the default (regardless of weather mode).  The next elements correspond to
weather modes M, A, and B, respectively.

ORPGPAT_delete_priority() deletes an existing product priority id, referenced
by list index (lindx), from the product priority list of the specified product
id (prod_id).  On success, the index of the deleted element is returned.  On
failure, ORPGPAT_ERROR is returned.  See the previous NOTE.

ORPGPAT_set_priority() modifies the product priority associated with a product
priority list element of a specified product id (prod_id).  On success, the new
priority id value is returned.  On failure, ORPGPAT_ERROR is returned.  See the
previous NOTE.

ORPGPAT_get_num_priorities() returns the number of different product priorities
associated with the specified product id (prod_id).  On failure, ORPGPAT_ERROR
is returned.  NOTE:  Currently, it is assumed that the first element (index 0)
is the default (regardless of weather mode).  The next elements correspond to
weather modes M, A, and B, respectively.

ORPGPAT_get_priority() returns the product priority of a specified product
priority list entry and product id (prod_id).  On failure, ORPGPAT_ERROR is
returned.  See the previous NOTE.

ORPGPAT_get_priority_list() returns a pointer to the start of the product
priority list associated with the specified product id (prod_id).  On failure,
NULL is returned.  See the previous NOTE.

ORPGPAT_add_dep_prod() adds a new dependent product id (id) to the dependent
products list of the specified product id (prod_id).  On success, the index of
the new dependent product list element is returned.  On failure, ORPGPAT_ERROR
is returned.

ORPGPAT_add_opt_prod() adds a new optional product id (id) to the optional
products list of the specified product id (prod_id).  On success, the index of
the new optional product list element is returned.  On failure, ORPGPAT_ERROR
is returned.

ORPGPAT_delete_dep_prod() deletes an existing dependent product id, referenced
by list index (lindx), from the dependent products lists of the specified
product id (prod_id).  On success, the index of the deleted element is
returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_delete_opt_prod() deletes an existing optional product id, referenced
by list index (lindx), from the optional products lists of the specified
product id (prod_id).  On success, the index of the deleted element is
returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_dep_prod() modifies the dependent product id associated with a
dependent products list element of a specified product id (prod_id).  On
success, the new dependent product parameter id value is returned.  On failure, 
ORPGPAT_ERROR is returned.

ORPGPAT_set_opt_prod() modifies the optional product id associated with a
optional products list element of a specified product id (prod_id).  On
success, the new optional product parameter id value is returned.  On failure, 
ORPGPAT_ERROR is returned.

ORPGPAT_get_num_dep_prods() returns the number of dependent products associated
with the specified product id (prod_id).  On failure, ORPGPAT_ERROR is
returned.

ORPGPAT_get_num_opt_prods() returns the number of optional products associated
with the specified product id (prod_id).  On failure, ORPGPAT_ERROR is
returned.

ORPGPAT_get_dep_prod() returns the product id of a specified dependent products
list entry and product id (prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_opt_prod() returns the product id of a specified optional products
list entry and product id (prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_dep_prods_list() returns a pointer to the start of the dependent
products list associated with the specified product id (prod_id).  On failure,
NULL is returned.

ORPGPAT_get_opt_prods_list() returns a pointer to the start of the optional
products list associated with the specified product id (prod_id).  On failure,
NULL is returned.

ORPGPAT_get_mnemonic() returns a pointer to the mnemonic associesd with the
specified product id (prod_id).  The mnemonic is stored at the beginning of
the product description string.  If the first character of the description
string is blank, then there is no mnemonic.  When using this function, the
application should immediately copy the mnemonic string to local storage.
Otherwise, the string will be overwritten when the next call is made to this
function.  On failure, NULL is returned.

ORPGPAT_get_parameter_name() returns a pointer to the name associated with a
parameter, referenced by list index (lindx), of a specified product id
(prod_id).  NOTE: The string can be up to 16 characters in length but may not
be NULL terminated in cases where the string is 16 characters.  On failure,
NULL is returned.

ORPGPAT_set_parameter_name() sets the name (string) associated with a
parameter, referenced by list index (lindx), of a specified product id
(prod_id).  The string can be up to 16 characters in length.  On success, the
string length is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_parameter_units() returns a pointer the the units string associated
with a parameter, referenced by list index (lindx), of a specified product id
(prod_id).  NOTE: The strin can be up to 8 characters in length but may not be
NULL terminated in cases where the string is 8 characters.  On failure, NULL
is returnd.

ORPGPAT_set_parameter_units() sets the units string associated with a
parameter, referenced by list index (lindx), of a specified product id
(prod_id).  The string can be up to 8 characters in length.  On success, the
string length is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_parameter_index() returns the product parameter index associated
with a parameter, referenced by list index (lindx), of a specified product id
(prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_parameter_index() sets the product parameter index associated with
a parameter, referenced by list index (lindx), of a specified product id
(prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_parameter_min() returns the scaled minimum allowed value for a
parameter, referenced by list index (lindx), of a specified product id
(prod_id).  To get the actual minimum value one should divide the return value
with the scale factor (defined by ORPGPAT_get_parameter_scale()).  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_set_parameter_min() sets the minimum allowed scaled value associated
with a parameter, referenced by list index (lindx), of a speciied product id
(prod_id) o min.  On success, the scaled minimum value is returned.  On
failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_parameter_default() returns the scaled default value for a
parameter, referenced by list index (lindx), of a specified product id
(prod_id).  To get the actual default value one should divide the return value
with the scale factor (defined by ORPGPAT_get_parameter_scale()).  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_set_parameter_default() sets the default scaled value associated with a
parameter, referenced by list index (lindx), of a speciied product id (prod_id)
o min.  On success, the scaled default value is returned.  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_get_parameter_scale() returns the scale factor for a parameter,
referenced by list index (lindx), of a specified product id (prod_id).  This
scale factor is applied to all values associated with this parameter.  On
failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_parameter_scale() sets the scale factor for a parameter, referenced
by list index (lindx), of a speciied product id (prod_id) to scale.  On
success, the scale factor is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_prod_id() returns the product id (prod_id) of the specified
attributes table entry.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_prod_id_from_code() returns the product id (prod_id) associated
with the input product code.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_prod_id() sets the product id (prod_id) of the specified attributes
table entry to id.  On success, the product id is returned.  On failure,
ORPGPAT_ERROR is returnd.

ORPGPAT_get_gen_task() returns the name of the task used to generate the
specified product id (prod_id).  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_set_gen_task() sets the name of the task used to generate the
specified product id (prod_id) to id.  On success, the generation task id is
returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_parameter_max() returns the scaled maximum allowed value for a
parameter, referenced by list index (lindx), of a specified product id
(prod_id).  To get the actual maximum value one should divide the return value
with the scale factor (defined by ORPGPAT_get_parameter_scale()).  On failure,
ORPGPAT_ERROR is returned.

ORPGPAT_set_parameter_max() sets the maximum allowed scaled value associated
with a parameter, referenced bu list index (lindx), of a speciied product id
(prod_id) to max.  On success, the scaled maximum value is returned.  On
failure, ORPGPAT_ERROR is returned.

ORPGPAT_add_prod() creates a new attributes table entry and assigns it the
specified product id (prod_id).  On success, the index of the table entry is
returned.  On failure, ORPGPAT_ERROR is returned.  NOTE: a failure will occur
if the product id is already defined.

ORPGPAT_delete_prod() deletes the attributes table entry with the specified
product id (prod_id).  On success, the index of the removed entry is returned.
On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_name() returns a pointer to the name string for the specified
product id (prod_id).  On failure, NULL is returned.

ORPGPAT_set_name() sets the name string associated with a product id (prod_id)
to name.  The name can be up to 16 characters in length.  On success, the
string length is returned.  On failure, ORPGPAT_ERROR is returned.

ORPGPAT_get_prod_id_by_name() returns the product id associated with a
specified product name.  On failure, ORPGPAT_ERROR is returned.

SEE ALSO

mnttsk_prod_gen(1) orpg(3), product_tables(4)


				$Revision: 1.26 $
