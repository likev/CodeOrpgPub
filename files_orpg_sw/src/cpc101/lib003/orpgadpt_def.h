/*
 * RCS info 
 * $Author: nolitam $
 * $Locker:  $
 * $Date: 2002/12/11 21:31:44 $
 * $Id: orpgadpt_def.h,v 1.6 2002/12/11 21:31:44 nolitam Exp $
 * $Revision: 1.6 $
 * $State: Exp $
 * $Log: orpgadpt_def.h,v $
 * Revision 1.6  2002/12/11 21:31:44  nolitam
 * Add RCS header information
 *
 * Revision 1.5  2001/05/29 21:01:37  eddief
 * Update comments
 *
 * Revision 1.4  2000/12/08 14:05:22  eforren
 * Add multi-node support
 *
 * Revision 1.3  2000/11/02 12:50:08  eforren
 * AddMake sure a directory does not exist before creating int
 *
 * Revision 1.2  2000/10/25 18:55:05  eforren
 * Make sure output directory gets created if it is not already there
 *
 * Revision 1.1  2000/10/13 17:17:46  eforren
 * Initial revision
 *
 *
 * 
*/
/****************************************************************
		
    Module: orpgadpt_def.h
				
    Description: Private definitions

****************************************************************/



#ifndef ORPGADPT_DEF_H
#define ORPGADPT_DEF_H
#include <stdarg.h>

#ifdef __cplusplus
extern "C"
{
#endif

#define ORPGADPT_LOCAL_NAME_SIZE 256

/**  Update the error message for the C API
     @param(in) msg - error message to copy into this api's error message text
**/
void ORPGADPT_update_error_message(const char* msg);

/**  Update the error message for the C API
     @param(in) msg - error message to copy into this api's error message text
     @param(in) format_str - sprintf format text
**/
void ORPGADPT_update_error_message_sprintf(int buf_length, char* format_str, ...);

/**  Determine a fully qualified path based on an unqualified path
     @param(in) unqualified_path - relative or absolute path
     @returns - a fully qualified path.  The returned string will be re-used
		on the next call to this function
     @side_effects - error information for this API will be set if an error occurs
**/
char* ORPGADPT_determine_path(const char* unqualified_path);

/**  Build an RSS_rpc function string for the specified function_name and host_name
     @param(in) function_name - library and function_name in RSS_rpc format
     @param(in) host_name - name of the host where the function should be executed
			    if NULL, the name of the local host will be used
     @returns - RSS_rpc function name with host information.  The returned string
		will be re-used on the next call to this function.
     @side_effects - error information for this API will be set if an error occurs
**/
char* ORPGADPT_get_orpg_func_name(const char* function_name, const char* host_name);

/**  Get the name of the local host machine.
     @returns - the name of the local machine.  The returned string will be
		overwritten will be re-used on the next call to this function.
**/
char* ORPGADPT_get_local_host_name();

/**  Create a directory.  The directory could be on another machine.
     @param(in) dir_name - path of the directory to create
     @returns - 1 if successful, false otherwise
     @side_effects - error information for this API will be set if an error occurs
**/
int ORPGADPT_make_directory(const char* dir_name);


/**  Determine if a directory already exists or not
     The directory could be on another machine
     @param(in) dir_path - path of the directory to test for existence
     @returns - 1 if dir_path exists, 0 otherwise
**/
int ORPGADPT_directory_exists(const char* dir_path);

/*   Extract the archive time from the name of the adaptation archive
     @param name(in) - name of the adaptation archive file (generated by ORPGADPT_save0)
     @returns -1 if name is not the correct form, otherwise, a time value
	      (number of seconds since 1970) is returned
*/
time_t ORPGADPT_get_adapt_archive_time(const char* name);

/*  Extract the Site name from the adaptation archive name
    @param archive_name - an adaptation archive constructed by the ORPGADPT_save function
    @returns NULL if archive_name is not the correct form, returns the name of the
	     site otherwise.  The returned site_name data is replaced on every
	     call to this routine.
*/
char* ORPGADPT_get_adapt_archive_site_name(const char* archive_name);

/*  Extract the version from the adaptation archive name
	@param archive_name - an adaptation archive constructed by the ORPGADPT_save function
	@returns -1 if archive_name is not the correct form, otherwise, returns the version
		 of the archive
*/
int ORPGADPT_get_adapt_archive_version(const char* archive_name);

/*  Extract the host name from the adaptation archive name
	@param archive_name - an adaptation archive constructed by the ORPGADPTSV_save function
	@returns NULL if archive_name is not the correct form, returns the name of the
		 node otherwise.  The returned site_name data is replaced on every
		 call to this routine.
*/
char* ORPGADPT_get_adapt_archive_host_name(const char* archive_name);


/*	Get the shortest available host name
	@returns - the shortest host name, if the local host name can
	   	   not be determined, then "unknown" is instead.
*/
char* ORPGADPT_get_shortest_host_name();

/**  Determine if host_name is a local host_name.
     @param(in) host_name - host_name
     @returns 1 if host_name is any one of the local host names
	      0 otherwise
**/
int ORPGADPT_host_name_is_local(const char* host_name);

/*  Calculate a time value (no of seconds since 1970 for the specified date and time
    if date is not specified, use todays date, if time is not specified, use 23:59:59
    @param(in) date - date value (mm/dd/yyyy), NULL means today's date
    @param(in) time - time value (hh:mm:ss), NULL means 23:59:59.
    @returns -1 if the date or time string is invalid, otherwise
	     returns the number of seconds sinces 1970 for date and time
*/
time_t ORPGADPT_calculate_time(const char* date, const char* time_str);

/* Get the site suffix embedded in a host name of the form *-xxxx
   @returns NULL if none of the node names is of the form *-xxxx,
  	    otherwise it returns the site_name embedded within the
	    host_name.  The returned string will be reused the next
	    time this routine is called.
*/
char* ORPGADPT_get_site_name_from_local_node_names();



#ifdef __cplusplus
}
#endif


#endif
