orpgumc(3)				RPG Manpage			orpgumc(3)

NAME
    orpgumc - Product user message conversion routines

SYNOPSIS

#include <orpg.h>

    int UMC_from_ICD (void *icd_msg,int icd_size,int hd_size,void **c_msg);

    int UMC_to_ICD (void *c_msg, int c_size,int hd_size, void **icd_msg);

    int UMC_product_length (void *prod);

    int UMC_get_product_length (void *phd);

    void UMC_message_header_block_swap (void *mhb);

    int UMC_icd_to_product (void *pmsg, int size);

    int UMC_product_from_icd (void *pmsg, int size);

    int UMC_product_back_to_icd (void *pmsg, int size);

    int UMC_product_to_icd (void *pmsg, int size);

    int UMC_from_ICD_RDA (void *msg, int len);

DESCRIPTION

    The product user messages as defined in the RPG/PUP ICD can not be easily
    casted into C structures due to alignment problems. The UMC (User Message 
    Conversion) library contains functions that convert product user messages 
    between the RPG/PUP ICD format and the C structure based format defined in 
    prod_user_msg.h. Messages received from product users are first converted 
    to the C structure format before they are processed by the RPG processes. 
    Messages generated in RPG processes are in the C structure format and 
    converted to the RPG/PUP ICD format before they are sent to the user.

    Using format conversion provides the following advantages:

	a. Messages processed in RPG tasks are in well formulated C structure 
	format and their correctness are verified. This will simplify the ORPG 
	code.

	b. Portability is improved because only the UMC library needs to be 
	ported to different platforms. This is especially true when we have to 
	port the RPG code to a little endian machine.

    The UMC module provides the following functions:

       UMC_from_ICD() converts a product message pointed to by "icd_msg" and
       of size "icd_size" from the RPG/PUP ICD format to RPG C structure format.  
       The user can allow for reserved space in front of the message.  The size 
       of this reserved space is specified by "hd_size".  The memory segment for 
       the output message is allocated here ("c_msg").  The RPG C structure 
       message starts at "c_msg + hd_size".   The output message must be freed 
       by the caller.

       The size of the output data in C struct format (excluding the hd_size) is 
       returned on success or a negative error code (see below) on error.  

       UMC_to_ICD() converts a product message pointed to by "c_msg" of size 
       "c_size" from the RPG C structure format to the RPG/PUP ICD format.  The 
       user can allow for reserved space in from of the message.  The size of 
       this reserved space is specified by "hd_size".  The memory segment for 
       the output message is allocated here ("icd_msg"). It must be freed by 
       the caller.  The ICD message starts at "icd_msg + hd_size".  
    
       The size of the output data in ICD format (excluding the hd_size) is 
       returned on success or a negative error code (see below) is returned on 
       failure.

       UMC_product_length() returns the length of product pointed to by "prod"
       for a product in ICD format.  

       UMC_get_product_length() returns the length of the product pointed to by
       "phd" for a product in local endian format. 

       UMC_message_header_block_swap() performs the byte swap of the product 
       message header, pointed to by "mhb", from big endian to local endian 
       format. It can be used for converting to and from the ICD format.

       UMC_icd_to_product() is the same as UMC_product_from_icd().

       UMC_product_from_icd() converts a big endian and Concurrent float ICD 
       product, pointed to by "pmsg" and of length "size", to local endian 
       and IEEE float format. Byte swaps are performed as short array for 
       little endian machines. The conversion is performed in-place. 

       The message size is returned on success or a negative error code (see
       below).
 
       UMC_product_back_to_icd() converts a product from the local endian and 
       IEEE float ICD format, pointed to by "pmsg" and of size "size", to big 
       endian and Concurrent float ICD product format.  Byte swaps are performed 
       as short array for little endian machines. The conversion is performed 
       in-place. 

       The message size is returned on success or a negative error code (see
       below).

       UMC_product_to_icd() converts a RPG product message as generated by legacy
       program, pointed to by "pmsg" and of size "size", to the ICD format. Field
       and byte swaps are performed for little endian machines. Field swapping 
       depends on particular produts and is controlled by the Hwe_mask table. The
       conversion is performed in-place.
  
       The message size is returned on success or a negative error code (see 
       below).

       UMC_from_ICD_RDA() converts the RDA messages from the ICD format to the 
       C structure format.  Concurrent floating point representations are 
       converted to IEEE 754 format. 

       This function returns the length of the converted message or a negative
       error code (see below) on failure.

       NOTE:  This function currently only supports Digital Radar Data Messages.  
       A full suite of conversion routines are embedded in control_rda.  The
       control_rda functions should eventually become integrated into this library.


       The UMC library of functions return the following errors:

          UMC_MALLOC_FAILED     malloc failed.

          UMC_CONVERSION_FAILED Conversion failed due to an error found in the 
                                input message.

          UMC_UNKNOWN_TYPE      Message type error.

          UMC_MSG_LEN_ERROR     Message length is not matched.

SEE ALSO
   control_rda(1)
				$Revision: 1.4 $
