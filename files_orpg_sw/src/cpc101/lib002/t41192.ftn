C
C RCS info
C $Author: nolitam $
C $Locker:  $
C $Date: 2002/12/11 20:01:22 $
C $Id: t41192.ftn,v 1.2 2002/12/11 20:01:22 nolitam Exp $
C $Revision: 1.2 $
C $State: Exp $
C
      SUBROUTINE T41192__JULIAN(I,J,K,JULIAN)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: T41192__JULIAN
*.
*.  MODULE VERSION: 0006
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       11/10/84      0000      M.    Joseph         Coded
*.       08/26/88      0001      K.    MARGRAFF       SPR # 80211
*.       02/23/88      0002      K.    MARGRAFF       SPR # 90104
*.       10/02/90      0003      K.    MARGRAFF       SPR # 90825
*.       11/07/90      0004      A.    FELDMAN        SPR # 91272
*.       01/17/91      0004      K.    MARGRAFF       SPR # 91642
*.       11/01/91      0005      ED NICHLAS           SPR 92640 PDL Removal
*.       03/05/92      0006      Toolset              SPR 91898
*.
*.  CALLING SEQUENCE: CALL T41192__JULIAN(I,J,K,JULIAN)
*.
*.  MODULE FUNCTION:  Computes number of days since 1 January 4713 BC
*.
*.  MODULES CALLED: NONE.
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT  TYPE        DESCRIPTION
*.    -   -----  ----        -----------
*.    P   I      I*4         YEAR
*.    P   J      I*4         Integer month, e.g. 1-12
*.    P   K      I*4         Integer day of month, e.g. 1-31
*.
*.    *   OUTPUT  TYPE        DESCRIPTION
*.    -   ------  ----        -----------
*.    P   JULIAN  I*4         IInteger number of days since 1 Jan.ZZ4713 B.C.
*.                            returned as function arg.
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.
*.  DATABASE/FILE REFERENCE: NONE
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME           TYPE        DESCRIPTION
*.    ----           ----        -----------
*.    AD_MONTHS      I*2         MONTHS PAST THE TURN OF THE CENTURY
*.    BC_MONTHS      I*2         MONTHS BEFROE THE TURN OF THE CENTURY
*.    BC_YEARS       I*2         YEARS BEFORE THE TURN OF THE CENTURY
*.    CENTURY        I*2         YEARS IN A CENTURY
*.    DAYS_OFFSET    I*2         DAYS BEFORE THE TURN OF THE CENTURY
*.    L              I*4         temporary holding variable
*.    LEAP_YEAR      I*2         YEAP YEAR CONSTANT
*.    LEAP_YEAR_DAYS I*2         DAYS IN A LEAP YEAR
*.    MONTHS_IN_YEAR I*2         NUMBER OF MONTHS IN A YEAR
*.    MONTH_ADJUST   I*2         BIAS USED FOR MONTH ADJUSTMENT
*.    MONTH_OFFSET   I*2         OFFSET FOR MONTH CALCULATION
*.    STND_YEAR      I*2         NUMBER OF YEAR BEFORE LEAP YEAR
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.
*.  ERROR CONDITIONS: NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS: NONE
*.
*.  DEVIATION FROM STANDARDS: NONE
*.
*.  COMPILATION INSTRUCTIONS:
*.       COMPILE THIS MODULE BY EXECUTING THE CSS FILE B411COMP
*.
*.  LINKAGE INSTRUCTIONS:
*.       AFTER THIS MODULE HAS BEEN COMPILED AS DIRECTED ABOVE IT MAY
*.       BE LINKED TO THE TASK B4ENVSIM BY EXECUTING THE CSS FILE
*.       B4ENVLNK.
*.
*.  MISC: This routine is used in conjunction with module CALDATE
*.         which performs the inverse transformation to calendar date
*.
*.*******************************************************************
      IMPLICIT NONE
C
      INTEGER*4   I,J,K
      INTEGER*4   L, JULIAN
C
      INTEGER*2    MONTH_OFFSET,MONTHS_IN_YEAR,DAYS_OFFSET
      INTEGER*2    BC_YEARS,BC_MONTHS,LEAP_YEAR
      INTEGER*2    LEAP_YEAR_DAYS,MONTH_ADJUST,STND_YEAR
      INTEGER*2    AD_MONTHS,CENTURY
C
      DATA MONTH_OFFSET/14/,MONTHS_IN_YEAR/12/,DAYS_OFFSET/32075/
      DATA BC_YEARS/1461/,BC_MONTHS/4800/,LEAP_YEAR/4/
      DATA LEAP_YEAR_DAYS/367/,MONTH_ADJUST/2/,STND_YEAR/3/
      DATA AD_MONTHS/4900/,CENTURY/100/
C
C******** CALCULATE THE JULIAN DATE *********************************
C
      L= (J-MONTH_OFFSET)/MONTHS_IN_YEAR
C
      JULIAN = K-DAYS_OFFSET+BC_YEARS * (I + BC_MONTHS + L)/LEAP_YEAR
     /     + LEAP_YEAR_DAYS * (J - MONTH_ADJUST - L * MONTHS_IN_YEAR)
     /     / MONTHS_IN_YEAR - STND_YEAR * ((I + AD_MONTHS + L)
     /     / CENTURY) / LEAP_YEAR
C
      RETURN
      END
