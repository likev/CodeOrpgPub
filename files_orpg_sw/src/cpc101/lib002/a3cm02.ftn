C 
C RCS info 
C $Author: nolitam $ 
C $Locker:  $ 
C $Date: 2002/12/11 20:00:29 $ 
C $Id: a3cm02.ftn,v 1.4 2002/12/11 20:00:29 nolitam Exp $ 
C $Revision: 1.4 $ 
C $State: Exp $ 
C 
       SUBROUTINE A3CM02__WINDOW_EXTRACTION (RADIUS_CENTER,
     *            AZIMUTH_CENTER,LENGTH_KM,MAX_RAD,MIN_RAD,
     *            MAX_THETA,MIN_THETA)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A3CM02__WINDOW_EXTRACTION
*.
*.  MODULE VERSION: 0011
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       01 01 86      0000      X
*.       03 27 86      0001      PHIL STALEY
*.       10 02 86      0002      J GROMMONS           SPR # 60346
*.       10 17 89      0003      VALERIE HOLDEN       SPR # 90519
*.       05 21 90      0004      RICH MIHOCI          SPR # 90697
*.       11 08 90      0005      T. LYNCH             SRP # 91250
*.       12/10/91      0006      ED NICHLAS           SPR 92637 PDL Removal
*.       04/24/92      0007      Toolset              SPR 91895
*.       03/25/93      0008      Toolset              SPR NA93-06801
*.       03/03/94      0009      Toolset              SPR NA94-05501
*.       12/23/96      0010      Toolset              CCR NA95-11807
*.       03/16/99      0011      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A3CM02__WINDOW_EXTRACTION(RADIUS_CENTER,
*.                    AZIMUTH_CENTER,LENGTH_KM,MAX_RAD,MIN_RAD,
*.                    MAX_THETA,MIN_THETA)
*.
*.  MODULE FUNCTION:
*.     THIS MODULE IS THE WINDOW EXTRACTION MODULE.
*.  MODULE RECEIVES POLAR COORDINATES OF WINDOW CENTER
*.  AND SIZE OF WINDOW IN KILOMETERS. MODULE CALCULATES
*.  LOCATION OF WINDOW CORNERS AND OUTPUTS THE MAXIMUM
*.  AND MINIMUM RADIUS AND THE MAXIMUM AND MINIMUM AZIMUTH
*.  REQUIRED TO INCLOSE WINDOW.
*.
*.
*.  MODULES CALLED: A3CM15__MAXI, A3CM16__MINI, A3CM17__THETA 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT          TYPE        DESCRIPTION
*.    -   -----          ----        -----------
*.    P   AZIMUTH_CENTER R*4         AZIMUTH OF WINDOW CENTER
*.    P   LENGTH_KM      R*4         DIMENSION OF WINDOW IN KILOMETERS
*.    P   MAX_RAD        R*4         MAXIMUM RADIUS
*.    P   MAX_THETA      R*4         MAXIMUM THETA
*.    P   MIN_RAD        R*4         MINIMUN RADIUS
*.    P   MIN_THETA      R*4         MINIMUM THETA
*.    P   RADIUS_CENTER  R*4         RADIUS FROM ORIGIN TO CENTER
*.
*.    *   OUTPUT    TYPE        DESCRIPTION
*.    -   ------    ----        -----------
*.    P   MAX_RAD   R*4         MAXIMUM RADIUS
*.    P   MAX_THETA R*4         MAXIMUM THETA
*.    P   MIN_RAD   R*4         MINIMUN RADIUS
*.    P   MIN_THETA R*4         MINIMUM THETA
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.    P   MAX_RAD           R*4         MAXIMUM RADIUS
*.    P   MAX_THETA         R*4         MAXIMUM THETA
*.    P   MIN_RAD           R*4         MINIMUN RADIUS
*.    P   MIN_THETA         R*4         MINIMUM THETA
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME     TYPE        DESCRIPTION
*.    ----     ----        -----------
*.    DEGTORAD R*4         CONVERSION FROM DEGREES TO RADIANS (RADIANS/DEGREE)
*.    DIM      I*2         WINDOW LENGTH (KM)
*.    FIVE     I*2         PARAMETER EQUAL TO 5, LOOP INDEX
*.    FLAG     I*2         FLAG INDICATING THAT BOTH THE MAX AND MIN THETA
*.                         NEED TO BE DETERMINED
*.    HALF_DIM R*4         HALF OF LOCAL VALUE FOR WINDOW LENGTH
*.    I        I*2         LOOP COUNTER
*.    IDX1     I*4         Window quadrant ID number.
*.    IDX2     I*4         Window quadrant ID number.
*.    IDX3     I*4         Window quadrant ID number.
*.    IDX4     I*4         Window quadrant ID number.
*.    IDX5     I*4         Window quadrant ID number.
*.    NEG_X    I*2         NUMBER OF NEGATIVE SIGNS FOR X-CORRDINATE OF WINDOW
*.    NEG_Y    I*2         NUMBER OF NEGATIVE SIGNS FOR Y-COORDINATE OF WINDOW
*.    RAD      R*4         ARRAY CONTAINING RADIUS OF WINDOW CENTER AND
*.                         CORNERS
*.    THETA    R*4         AZIMUTH ANGLE
*.    THREE    I*2         PARAMETER EQUAL TO 3, LOOP INDEX
*.    THREE60  R*4         PARAMETER EQUAL TO 360
*.    TWO      I*2         PARAMETER EQUAL TO 2
*.    X        R*4         ARRAY DEFINING X-COORDINATES OF WINDOW CORNERS
*.    Y        R*4         ARRAY DEFINING Y-COORDINATES OF WINDOW CORNERS
*.    ZERO     R*4         PARAMETER VALUE '0'
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.
*.  ERROR CONDITIONS:  NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS:  None
*.
*.  DEVIATION FROM STANDARDS:  None
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.        THIS MODULE IS COMPILED USING THE COMP09.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.        THIS MODULE IS LINKED USING THE LINK09.CSS
*.
*.  MISC:  None
*.
*.*******************************************************************
C
C
C          SPECIFICATIONS
C
C
       IMPLICIT NONE
       REAL MAX_RAD,MIN_RAD,MAX_THETA,MIN_THETA
       REAL LENGTH_KM
       REAL X(5),Y(5),RAD(5),THETA(5),HALF_DIM
       REAL ZERO,RADIUS_CENTER,AZIMUTH_CENTER
       REAL DEGTORAD,THREE60
       PARAMETER(DEGTORAD=57.29578,THREE60=360.0)
       INTEGER*2 DIM,NEG_X,NEG_Y,I
       INTEGER*2 TWO,THREE,FIVE,FLAG
       PARAMETER (TWO=2,THREE=3,FIVE=5,ZERO=0.0)
       INTEGER IDX1,IDX2,IDX3,IDX4,IDX5
       PARAMETER(IDX1=1,IDX2=2,IDX3=3,IDX4=4,IDX5=5)
C
C
C
       RAD(IDX1)=RADIUS_CENTER
       THETA(IDX1)=AZIMUTH_CENTER
       DIM=LENGTH_KM
C
       HALF_DIM=DIM/2
C
C   CONVERSION TO CARTESIAN
C
C   CENTER POINT OF WINDOW CONVERTED TO CARTESIAN
C   COORDINATES BY STANDARD CONVERSION EQUATION
C   ADAPTED TO THE CONDITION THETA IS INCREASING
C   CLOCKWISE (X=RSIN@,Y=RCOS@))
C   WINDOW CORNER COORDINATES ARE CALCULATED
C   USING CENTER POINT AND DIMENSION OF WINDOW
C
C
       THETA(IDX1)=THETA(IDX1)/DEGTORAD
       X(IDX1)=RAD(IDX1)*SIN(THETA(IDX1))
       Y(IDX1)=RAD(IDX1)*COS(THETA(IDX1))
       X(IDX2)=X(IDX1)-HALF_DIM
       Y(IDX2)=Y(IDX1)+HALF_DIM
       X(IDX3)=X(IDX1)+HALF_DIM
       Y(IDX3)=Y(IDX1)+HALF_DIM
       X(IDX4)=X(IDX1)+HALF_DIM
       Y(IDX4)=Y(IDX1)-HALF_DIM
       X(IDX5)=X(IDX1)-HALF_DIM
       Y(IDX5)=Y(IDX1)-HALF_DIM
C
C
C   COUNTS NEGATIVE SIGNS
C
C   COUNT OF THE NEGATIVE SIGNS OF THE CORNERS
C   USED TO DETERMINE THE QUADRANT LOCATION
C   OF WINDOW
C
C
       NEG_X=0
       NEG_Y=0
       DO 30 I=TWO,FIVE
       IF (X(I).LT.ZERO) THEN
       NEG_X=NEG_X+1
       ENDIF
       IF (Y(I).LT.ZERO) THEN
       NEG_Y=NEG_Y+1
       ENDIF
 30    CONTINUE
C
C
C   CONVERSION TO POLAR
C
C   CORNER CARTESIAN COORDINATES CONVERTED TO
C   POLAR BY PYTHAGARIAN THEOREM TO OBTAIN RADIUS
C
C
           DO 60 I=TWO,FIVE
           RAD(I)=(X(I)*X(I)+Y(I)*Y(I))**.5
 60        CONTINUE
           CALL A3CM15__MAXI (RAD,THREE,FIVE,MAX_RAD)
C
C
C   SET FLAG TO HAVE MAXIMUM AND MINIMUM THETA
C   DETERMINED WHEN SUBRTN. A3CM17__THETA IS CALLED
C
C
           FLAG=TWO
C
C
C   DETERMINE QUADRANT LOCATION OF WINDOW,
C   MINIMUM RADIUS, MAXIMUM THETA, MINIMUM THETA
C
C
C
C   CASE 1: IF ALL X'S  SAME SIGN AND
C   ALL Y'S SAME SIGN, THEN
C   (WINDOW SOLELY IN ONE QUADRANT)
C   THE MINIMUM RADIUS IS DETERMINED BY
C   CALLING A3CM16__MINI. MAXIMUM AND
C   MINIMUM THETA ARE DETERMINED CALLING
C   A3CM17__THETA
C
C
      IF ((NEG_X.EQ.0.OR.NEG_X.EQ.4).AND.
     * (NEG_Y.EQ.0.OR.NEG_Y.EQ.4)) THEN
          CALL A3CM16__MINI (RAD,THREE,FIVE,MIN_RAD)
          CALL A3CM17__THETA  (X,Y,THETA,MAX_THETA,MIN_THETA,FLAG)
C
C
C   CASE 2A: IF ALL X'S NEGATIVE THEN
C   (WINDOW CROSSES NEGATIVE X AXIS)
C   MINIMUM RADIUS IS MINIMUM DISTANCE
C   ALONG X AXIS TO WINDOW
C   CALL SUBRTN. A3CM17__THETA
C
C
       ELSEIF (NEG_X.EQ.4) THEN
       MIN_RAD=ZERO-X(IDX3)
       CALL A3CM17__THETA (X,Y,THETA,MAX_THETA,MIN_THETA,FLAG)
C
C
C   CASE 2B: IF ALL X'S POSITIVE THEN
C   (WINDOW CROSSES POSITIVE X AXIS)
C   MINIMUM RADIUS IS MINIMUM DISTANCE
C   ALONG X AXIS TO WINDOW
C   CALL SUBRTN. A3CM17__THETA
C
C
       ELSEIF (NEG_X.EQ.0) THEN
       MIN_RAD=X(IDX2)
       CALL A3CM17__THETA (X,Y,THETA,MAX_THETA,MIN_THETA,FLAG)
C
C
C   CASE 2C: IF ALL Y'S NEGATIVE THEN
C   (WINDOW CROSSES NEGATIVE Y AXIS)
C   MINIMUM RADIUS IS MINIMUM DISTANCE
C   ALONG Y AXIS TO WINDOW
C   CALL SUBRTN. A3CM17__THETA
C
C
       ELSEIF (NEG_Y.EQ.4) THEN
       MIN_RAD=ZERO-Y(IDX2)
       CALL A3CM17__THETA (X,Y,THETA,MAX_THETA,MIN_THETA,FLAG)
C
C
C   CASE 2D: IF ALL Y'S POSITIVE THEN
C   (WINDOW CROSSES POSITIVE Y AXIS)
C   MINIMUM RADIUS IS MINIMUM DISTANCE
C   ALONG Y AXIS TO WINDOW
C   SET FLAG NOT TO RETURN MAXIMUM AND
C   MINIMUM THETA
C   CALL SUBRTN. A3CM17__THETA
C
C
       ELSEIF (NEG_Y.EQ.0) THEN
       MIN_RAD=Y(IDX4)
       FLAG=THREE
       CALL A3CM17__THETA (X,Y,THETA,MAX_THETA,MIN_THETA,FLAG)
       MAX_THETA=THETA(IDX4)
       MIN_THETA=THETA(IDX5)
C
C
C   CASE 3: ELSE
C   (WINDOW INCLOSES ORIGIN)
C   MINIMUM RADIUS SET TO ZERO
C   MINIMUM THETA SET TO ZERO
C   MAXIMUM THETA SET TO THREE HUNDRED SIXTY
C
C
       ELSE
       MIN_RAD=ZERO
       MIN_THETA=ZERO
       MAX_THETA=THREE60
       ENDIF
       RETURN
       END
