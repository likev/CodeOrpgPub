C 
C RCS info 
C $Author: nolitam $ 
C $Locker:  $ 
C $Date: 2002/12/11 20:00:28 $ 
C $Id: a3cm01.ftn,v 1.4 2002/12/11 20:00:28 nolitam Exp $ 
C $Revision: 1.4 $ 
C $State: Exp $ 
C 
$INLINE A3CM27__PADFRONT,A3CM27.FTN
$INLINE A3CM28__PADBACK,A3CM28.FTN
      SUBROUTINE A3CM01__RUN_LENGTH_ENCODE(START,DELTA,INBUFF,
     *      STARTIX,ENDIX,NUMBUFEL,BUFFSTEP,CLTABIND,NRLEB,
     *      BUFFIND,OUTBUFF)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A3CM01__RUN_LENGTH_ENCODE
*.
*.  MODULE VERSION: 0011
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       03 24 86      0000
*.       10 02 86      0001      J GROMMONS           SPR # 60346
*.       08 23 88      0002      W.B. EIDSON          SPR # 80248
*.       11 08 90      0003      T. LYNCH             SPR # 91250
*.       10 17 91      0004      STEVE ANDERSON       SPR # 92362
*.       12 03 91      0005      STEVE ANDERSON       SPR # 92740
*.       12/10/91      0006      ED NICHLAS           SPR 92637 PDL Removal
*.       04/24/92      0007      Toolset              SPR 91895
*.       03/25/93      0008      Toolset              SPR NA93-06801
*.       03/03/94      0009      Toolset              SPR NA94-05501
*.       12/23/96      0010      Toolset              CCR NA95-11807
*.       03/16/99      0011      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE:
*.
*.     CALL A3CM01__RUN_LENGTH_ENCODE(START,DELTA,INBUFF,
*.         STARTIX,ENDIX,NUMBUFEL,BUFFSTEP,CLTABIND,NRLEB,
*.         BUFFIND,OUTBUFF)
*.
*.  MODULE FUNCTION:
*.
*.     ENCODE AN INPUT BUFFER OF DATA TO COMPACT IT AS PER THE RUN-
*.     LENGTH ENCODING NEEDED TO DISPLAY RADIAL DATA.
*.
*.  MODULES CALLED: A3CM27__PADFRONT, A3CM28__PADBACK, ISBYTE 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT    TYPE        DESCRIPTION
*.    -   -----    ----        -----------
*.    G   COLDAT   I*2         Product Data Levels Adaptation Data for the
*.                             Color Data Tables.
*.    P   BUFFIND  I*4         PRODUCT BUFFER INDEX
*.    P   BUFFSTEP I*4         NO WORDS PER ENTRY IN INPUT BUFFER
*.    P   CLTABIND I*4         COLOR TABLE INDEX
*.    P   DELTA    I*4         DELTA ASSIGNMENT
*.    P   ENDIX    I*4         POINTER TO END OF INPUT BUFFER
*.    P   INBUFF   I*2         INPUT BUFFER
*.    P   NUMBUFEL I*4         NO OF DATA BINS
*.    P   OUTBUFF  I*2         OUTPUT BUFFER
*.    P   START    I*4         START ANGLE ASSIGNMENT
*.    P   STARTIX  I*4         POINTER TO BEGINNING OF INPUT
*.
*.    *   OUTPUT  TYPE        DESCRIPTION
*.    -   ------  ----        -----------
*.    P   NRLEB   I*4         NO RUN-LENGTH ENCODED BYTES NO RUN-LENGTH
*.                            ENCODED BYTESS
*.    P   OUTBUFF I*2         OUTPUT BUFFER
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.    P   BUFFSTEP          I*4         NO WORDS PER ENTRY IN INPUT BUFFER
*.    P   ENDIX             I*4         POINTER TO END OF INPUT BUFFER
*.    P   NUMBUFEL          I*4         NO OF DATA BINS
*.    P   OUTBUFF           I*2         OUTPUT BUFFER
*.    P   STARTIX           I*4         POINTER TO BEGINNING OF INPUT
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME     TYPE        DESCRIPTION
*.    ----     ----        -----------
*.    BYTEFLAG I*4         BYTE FLAG
*.    FIRSTPIX L*4         FIRST PIXEL FLAG
*.    IBUFFIND I*4         INPUT BUFFER POINTER
*.    LEFTBYTE I*4         VALUE FOR PADDING LEFT BYTE
*.    NEWINDEX I*4         POINTER TO NEXT AVAILABLE WORD IN THE BUFFER
*.    NEWPIX   I*4         NEW PIXEL
*.    NRLEW    I*4         NO RUN-LENGTH ENCODED WORDS
*.    NSTARTIX I*4         POINTER TO START OF GOOD DATA IN
*.    OBUFFINC I*4         OUTPUT BUFFER INCREMENT
*.    OLDPIX   I*4         OLD PIXEL
*.    PADCNT   I*4         NO OF PADDED RUNS
*.    PBUFFIND I*4         POINTER TO BEGINNING OF OUTPUT BUFFER
*.    RGTBYTE  I*4         VALUE FOR PADDING RIGHT BYTE
*.    RUN      I*4         RUNTAB INDEX
*.    RUNCOL   I*4         RUN COLUMN
*.    RUNINC   I*4         RUN INCREMENT
*.    RUNLIM   I*4         RUN LIMIT (=15)
*.    RUNTAB   I*4         RUN TABLE
*.    SBUFFIND I*4         SAVED PRODUCT BUFFER INDICATOR
*.    STARTRUN I*4         STARTING RUN
*.    STRTDECR I*4         NO BINS TO SUBTRACT FROM START BIN AFTER PADDING
*.                         WITH RUNS OF 0
*.    ZEROPNT  I*4         Parameter used to initialize variables to Integer
*.                         0.
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.    COLRTBL
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.
*.  ERROR CONDITIONS: NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS:  None
*.
*.  DEVIATION FROM STANDARDS:  None
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.        THIS MODULE IS COMPILED USING THE COMP09.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.        THIS MODULE IS LINKED USING THE LINK09.CSS
*.
*.  MISC:  None
*.
*.*******************************************************************
      IMPLICIT NONE
C
C **** include product color tables adaptation data definitions:
$INCLUDE A309ADPT.INC/G,**A3CD70C5 (NEND NLIST)
C
C***  LOCAL DECLARATIONS:
C
      INTEGER RUNLIM,RGTBYTE,LEFTBYTE,NRLEBINC,NRLEWINC,STARTRUN,
     1        RUNINC,OBUFFINC,ZEROPNT,LP10SP,SBUFFIND,PAD,RHBYTES,
     2        BYTESPWD,STARTIX,ENDIX,NEWINDEX,PADCNT,STRTDECR
      INTEGER NSTARTIX
C
      PARAMETER (RUNLIM=15,LEFTBYTE=0,RGTBYTE=1,NRLEBINC=1,
     1           NRLEWINC=1,STARTRUN=1,RUNINC=1,OBUFFINC=1,
     2           ZEROPNT=0,LP10SP=1,PAD=0,BYTESPWD=2,RHBYTES=6)
C
      INTEGER NEWPIX,OLDPIX,RUN,RUNCOL,RUNTAB(RUNLIM),IBUFFIND,
     1        BYTEFLAG,NRLEW,BUFFSTEP,CLTABIND,NRLEB,PBUFFIND
C
      INTEGER*2 INBUFF(*),OUTBUFF(*)
      INTEGER START,DELTA,NUMBUFEL,BUFFIND
C
      LOGICAL FIRSTPIX
C
C***  INITIALIZE RUN TABLE (ONE TIME):
C
      DATA RUNTAB /16,32,48,64,80,96,112,128,144,160,176,192,208,
     1             224,240/
C
C***  EXECUTABLE CODE:
C
C
C***  MAKE START ANGLE AND DELTA ASSIGNMENTS (FIRST, SAVE PRODUCT
C***  BUFFER INDEX FOR FUTURE ASSIGNMENT IN THE PRODUCT BUFFER
C***  OF THE NUMBER OF RUN-LENGTH ENCODED WORDS IN THIS INPUT
C***  BUFFER):
C
      NRLEB=0
      PBUFFIND=BUFFIND
      SBUFFIND = PBUFFIND
      PBUFFIND = PBUFFIND + OBUFFINC
C
      OUTBUFF(PBUFFIND) = START
      PBUFFIND = PBUFFIND + OBUFFINC
      OUTBUFF(PBUFFIND) = DELTA
      PBUFFIND = PBUFFIND + OBUFFINC
C
C*** PAD THE START OF THE RUNS WITH FOFO IF THERE ARE
C*** MISSING DATA BINS BEFORE THE START OF GOOD DATA
C
      CALL A3CM27__PADFRONT(STARTIX,BUFFSTEP,OUTBUFF,PBUFFIND,
     *              PADCNT,STRTDECR)
      PBUFFIND = PBUFFIND+PADCNT
      NSTARTIX= STARTIX-STRTDECR
C
C
C***  INITIALIZE DATA FOR DOING RLE OF GOOD DATA
C
      BYTEFLAG = LEFTBYTE
      FIRSTPIX = .TRUE.
      RUN = ZEROPNT
      OLDPIX = ZEROPNT
      NEWPIX = ZEROPNT
      NRLEW = ZEROPNT
C
C***  PROCESS ALL THE DATA DESIGNATED AS GOOD DATA IN RADIAL
C
      DO 10 IBUFFIND = NSTARTIX,ENDIX,BUFFSTEP
C
C***  PERFORM COLOR TABLE LOOK-UP FOR THIS PIXEL:
C
            NEWPIX = COLDAT(INBUFF(IBUFFIND),CLTABIND)
C
C***  FIRST PIXEL IN THE INPUT BUFFER, OR FIRST PIXEL AFTER A RUN
C***  OF FIFTEEN:
C
            IF (FIRSTPIX) THEN
                  RUN = STARTRUN
                  OLDPIX = NEWPIX
                  FIRSTPIX = .FALSE.
C
C***  INTERMEDIATE PIXEL:
C
            ELSE IF (NEWPIX .EQ. OLDPIX) THEN
                  RUN = RUN + RUNINC
            ELSE IF (BYTEFLAG .EQ. LEFTBYTE) THEN
                  RUNCOL = RUNTAB(RUN) + OLDPIX
                  CALL ISBYTE(RUNCOL,OUTBUFF(PBUFFIND),LEFTBYTE)
                  BYTEFLAG = RGTBYTE
                  RUN = STARTRUN
                  OLDPIX = NEWPIX
            ELSE
                  RUNCOL = RUNTAB(RUN) + OLDPIX
                  CALL ISBYTE(RUNCOL,OUTBUFF(PBUFFIND),RGTBYTE)
                  BYTEFLAG = LEFTBYTE
                  PBUFFIND = PBUFFIND + OBUFFINC
                  RUN = STARTRUN
                  OLDPIX = NEWPIX
            END IF
C
C***  RUN OF FIFTEEN PIXELS DETECTED:
C
            IF (RUN .EQ. RUNLIM) THEN
                  RUNCOL = RUNTAB(RUN) + OLDPIX
                  IF (BYTEFLAG .EQ. LEFTBYTE) THEN
                        CALL ISBYTE(RUNCOL,OUTBUFF(PBUFFIND),LEFTBYTE)
                        BYTEFLAG = RGTBYTE
                  ELSE
                        CALL ISBYTE(RUNCOL,OUTBUFF(PBUFFIND),RGTBYTE)
                        PBUFFIND = PBUFFIND + OBUFFINC
                        BYTEFLAG = LEFTBYTE
                  END IF
                  RUN = ZEROPNT
                  FIRSTPIX = .TRUE.
            END IF
10    CONTINUE
C
C***  END OF INPUT BUFFER PROCESSING:
C     SET UP BYTEFLAGS FOR PADBACK ROUTINE
C     FLAGS AND POINTERS POINT TO NEXT AVAILABLE STORAGE LOC.
C
      IF (.NOT.(FIRSTPIX)) THEN
            RUNCOL = RUNTAB(RUN) + OLDPIX
            IF (BYTEFLAG .EQ. LEFTBYTE) THEN
                  CALL ISBYTE(RUNCOL,OUTBUFF(PBUFFIND),LEFTBYTE)
                  BYTEFLAG=RGTBYTE
            ELSE
                  CALL ISBYTE(RUNCOL,OUTBUFF(PBUFFIND),RGTBYTE)
                  BYTEFLAG= LEFTBYTE
                  PBUFFIND= PBUFFIND+OBUFFINC
            END IF
      END IF
C
C.....NOW DO THE END PROCESSING--PACK ANY NEEDED RUNS OF
C.....ZERO LEVEL TO ACCOUNT FOR BINS OF MISSING DATA
C.....THE INDEX PASSED IS THE NEXT AVIALABLE ONE TO USE
C
      CALL A3CM28__PADBACK(BYTEFLAG,OUTBUFF,BUFFSTEP,PBUFFIND,
     *             ENDIX,NUMBUFEL,NEWINDEX)
C.....NOW CALCULATE THE NRLEB AND NRLEW
C
      NRLEW=NEWINDEX-SBUFFIND-3
C
C.... NOTE THAT NRLEW DOES NOT INCLUDE THE 3 WORDS BEFORE
C.... THE RLE STARTS, BUT THESE BYTES ARE INCLUDED IN THE
C.... BYTE COUNT.
C
      NRLEB= (NEWINDEX-SBUFFIND)*2
C
C***  ASSIGN THE NUMBER OF RUN-LENGTH ENCODED WORDS TO THE
C***  APPROPRIATE POSITION IN THE RADIAL HEADER:
C
      OUTBUFF(SBUFFIND) = NRLEW
C
C***  COMPLETED RUN-LENGTH ENCODING PROCESSING FOR THIS BUFFER:
C
      RETURN
      END
