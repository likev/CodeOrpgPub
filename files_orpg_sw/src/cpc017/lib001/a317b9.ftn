C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/17 14:57:00 $
C $Id: a317b9.ftn,v 1.2 2002/12/17 14:57:00 christie Exp $
C $Revision: 1.2 $
C $State: Exp $
C
      SUBROUTINE A317B9__MATCH_TDA2D(NUMLEVS)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A317B9__MATCH_TDA2D
*.
*.  MODULE VERSION: 0001
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     ---------------
*.       05/29/97      0000      DAVE ZITTEL          CCR NA95-21503
*.       03/16/99      0001      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A317B9__MATCH_TDA2D( )
*.
*.  MODULE FUNCTION:
*.     Vertically correlates 2D Features into Potential 3D Features.
*.
*.  MODULES CALLED: A3CM70__REPORT_ERROR 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT       TYPE        DESCRIPTION
*.    -   -----       ----        -----------
*.    G   ADPCRR      I*4         TDA CIRCULATION RADIUS RANGE THRESHOLD
*.    G   ADPMFPD     I*4         TDA MINIMUM # 2D FEATURES/3D FEATURE
*.                                THRESHOLD
*.    C   CIRTH1_SQ   R*4         CIRCULATION RADIUS #1 THRESHOLD SQUARED
*.    C   CIRTH2_SQ   R*4         CIRCULATION RADIUS #2 THRESHOLD SQUARED
*.    C   DVTABL      I*4         Array of two-dimensional features sorted by
*.                                maximum delta velocity on an elevation basis
*.    C   NBR_P3DF    I*4         Counter for number of potential
*.                                three-dimensional features.
*.    C   VOLCOMP     R*4         ARRAY CONTAINING ATTRIBUTES OF THE 2D
*.                                FEATURES FOR THE VOLUME SCAN
*.    C   VOL_2DF_CNT I*4         NUMBER OF 2D FEATURES IDENTIFIED ON EACH
*.                                ELEVATION SCAN
*.    C   NVOMAX      I*4         (CONSTANT)MAXIMUM # OF 2D FEATURES ON ANY
*.                                ELEVATION SCAN
*.    C   P3D_EL      I*4         (CONSTANT)Position in the CORTABL array of
*.                                the elevation index attribute for linking to
*.                                VOLCOMP array.
*.    C   P3D_ID      I*4         (CONSTANT)Position in the CORTABL array of
*.                                the feature number attribute for linking to
*.                                VOLCOMP array.
*.    C   VCM_CRG     I*4         (CONSTANT)INDEX INTO VOLCOMP TO THE RANGE
*.                                (IN KM) TO THE MOMENTUM WEIGHTED CENTER OF A
*.                                2D FEATURE
*.    C   VCM_XCN     I*4         (CONSTANT)INDEX INTO VOLCOMP TO THE
*.                                X-COORDINATE (IN KM) TO THE MOMENTUM
*.                                WEIGHTED CENTER OF A 2D FEATURE
*.    C   VCM_YCN     I*4         (CONSTANT)INDEX INTO VOLCOMP TO THE
*.                                Y-COORDINATE (IN KM) TO THE MOMENTUM
*.                                WEIGHTED CENTER OF A 2D FEATURE
*.    P   NUMLEVS     I*4         Count of number of unique elevation cuts
*.                                processed by TDA 2D feature formation code
*.                                (14 for VCP 11; 9 for VCP 21).
*.
*.    *   OUTPUT   TYPE        DESCRIPTION
*.    -   ------   ----        -----------
*.    G   ADPCRR   I*4         TDA CIRCULATION RADIUS RANGE THRESHOLD
*.    G   ADPMFPD  I*4         TDA MINIMUM # 2D FEATURES/3D FEATURE THRESHOLD
*.    C   CORTABL  I*4         Correlation table of indexes into array VOLCOMP
*.                             showing showing vertical association of
*.                             two-dimensional features
*.    C   NBR_COMP I*4         Array of number of components for each
*.                             potential three-dimensional feature.
*.    C   NBR_P3DF I*4         Counter for number of potential
*.                             three-dimensional features.
*.    C   VOLCOMP  R*4         ARRAY CONTAINING ATTRIBUTES OF THE 2D FEATURES
*.                             FOR THE VOLUME SCAN
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME      TYPE        DESCRIPTION
*.    ----      ----        -----------
*.    BAD       R*4         Mark a 2D feat whose delta velocity is weaker than
*.                          an adjacent 2D feat to be skipped during vertical
*.                          correlation
*.    CM1_NDX   I*4         Do loop index into array DVTABL to get index
*.                          IFEAT1
*.    CM2_NDX   I*4         Do loop index into array DVTABL to get index
*.                          IFEAT2
*.    DECR_LVL  I*4         Offset used to compute the highest elevation cut a
*.                          potential 3D feature can start on.
*.    DTHRESH   R*4         Square of maximum horizontal separation allowed
*.                          between the centroids of two vertically correlated
*.                          2D features
*.    ELINDX    I*4         Modifiable index for pointing to a particular
*.                          elevation cut within 2D feature array VOLCOMP
*.    ELINDX1   I*4         Do loop index for pointing to the lower of two
*.                          elevation cuts within 2D feature array VOLCOMP
*.    ELINDX2   I*4         Do loop index for pointing to the higher of two
*.                          elevation cuts within 2D feature array VOLCOMP
*.    EL_INT    I*4         Do loop variable for elevation index
*.    ERRPHR    CHAR*50     Character array with status message indicating
*.                          array of  potential 3D features is full
*.    GOODCOR   L*4         Flag indicating two 2D features were successfully
*.                          correlated
*.    HORZDIST2 R*4         Square of horizontal distance between two 2D
*.                          features at different elevation being checked for
*.                          vertical correlation
*.    IFEAT1    I*4         Index from array DVTABL for entry into array
*.                          VOLCOMP.  Index points to 2D features at lower of
*.                          two elevation cuts
*.    IFEAT2    I*4         Index from array DVTABL for entry into array
*.                          VOLCOMP.  Index points to 2D features at higher of
*.                          two elevation cuts
*.    MAX_LEVEL I*4         Highest elevation cut that a potential 3D feature
*.                          can start on.
*.    N2DFEL1   I*4         Number of 2D features for the lower of two
*.                          elevation cuts whose features are being tested for
*.                          vertical correlation.
*.    N2DFEL2   I*4         Number of 2D features for the higher of two
*.                          elevation cuts whose features are being tested for
*.                          vertical correlation.
*.    NCOMP     I*4         Count of number of 2D components that were found
*.                          to vertically correlate for a 3D feature.
*.    NELVINT   I*4         Maximum number of elevation cuts (plus one) that
*.                          can be skipped when vertically correlating 2D
*.                          features.
*.    VCM_ACH   I*4         INDEX INTO VOLCOMP TO THE 3D FEATURE # IT IS
*.                          CORRELATED WITH - A VALUE OF 0 INDICATES IT IS
*.                          UNCORRELATED
*.    XDIST     R*4         X coordinate distance between two 2D features at
*.                          different elevations being checked for vertical
*.                          correlation.
*.    XFEAT1    R*4         X position of a lower (in elevation) 2D feature of
*.                          two features being checked for vertical
*.                          correlation.
*.    YDIST     R*4         Y coordinate distance between two 2D features at
*.                          different elevations being checked for vertical
*.                          correlation.
*.    YFEAT1    R*4         Y position of a lower (in elevation) 2D feature of
*.                          two features being checked for vertical
*.                          correlation.
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.    A317CTAD
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A317C3DA
*.    A317CDAD
*.    A317TC2
*.
*.  ERROR CONDITIONS:  None
*.
*.  ASSUMPTIONS/RESTRICTIONS:
*.
*.  DEVIATION FROM STANDARDS:  None
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.     Compiled using COMP17.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.     Linked using LINK17.CSS
*.
*.  MISC:  None
*.
C********************************************************************
C
C         TDA 2D FEATURES VERTICAL ASSOCIATION ROUTINE
C
C********************************************************************
C
      IMPLICIT NONE
C
C**Attach output parameter-definition file (of "TDA2D3D")
C
$INCLUDE A317BUF.INC/G, **A317PTAD
$INCLUDE A317BUF.INC/G, **A317CTAD
$INCLUDE A317BUF.INC/G, **A317P3T
$INCLUDE A317.INC/G, **A317TCP
$INCLUDE A317.INC/G, **A317TP2
$INCLUDE A317.INC/G, **A317TC2
$INCLUDE A317.INC/G, **A317CDAD
$INCLUDE A317.INC/G, **A317C3DA
C
C*********************** LOCAL DECLARATIONS *************************
C
      REAL      BAD, XFEAT1, YFEAT1
      REAL      XDIST, YDIST, HORZDIST2, DTHRESH
C
      INTEGER   ELINDX1, ELINDX, ELINDX2, N2DFEL1, N2DFEL2, P3DF_NUM
      INTEGER   CM1_NDX, CM2_NDX, NCOMP, NELVINT, NUMLEVS
      INTEGER   IFEAT1, IFEAT2, EL_INT, IEL, IFEATSAV
      INTEGER   I,J,K, DECR_LVL, MAX_LEVEL
      CHARACTER*50 ERRPHR
      LOGICAL   GOODCOR
      PARAMETER (NELVINT = 2, BAD = 999.)
C
C****************** BEGIN MAIN PROCESSING SECTION *******************
C
C***  DETERMINE THE MAXIMUM NUMBER OF ELEVATION LEVELS TO PROCESS.
C***  First find the larger of the minimum number of 2D features that
C***  are required for a 3D feature (ADPMFPD) and the number of elev.
C***  scans (plus 1) that may be skipped (NELVINT) and subtract 1
C***  This gives us the value to decrement the number base elevation
C***  angle at which to start building a 3D feature.
C
      DECR_LVL = MAX(NELVINT,ADPMFPD) - 1
C
C***  Compute the maximum level to process.  Don't let the value go
C***  below 1.
C
      MAX_LEVEL = NUMLEVS - DECR_LVL
      IF(MAX_LEVEL .LT. 1) MAX_LEVEL = 1
C
C***  Begin elevation loop for processing
C
      DO 80 ELINDX1 = 1, MAX_LEVEL
C
C***  Put the current elevation index in a variable that we can modify
C
        ELINDX = ELINDX1
C
C***   Get the number of 2D features at this elevation cut.
C
        N2DFEL1 = VOL_2DF_CNT( ELINDX )
C
C** If no components this elevation, no need to do any checks.
C
        IF ( N2DFEL1 .GT. 0 )THEN
C
C***  Begin building potential 3D features beginning with 2D
C***  features at the current elevation (ELINDX)
C
          DO 60 CM1_NDX = 1, N2DFEL1
C
C***  Get the 2D feature Id.  Order of entries in DVTABL is from
C***  the feature with the strongest delta velocity to the feature
C***  with the weakest.
C
            IFEAT1 = DVTABL(CM1_NDX, ELINDX)
C
C*** If the 2D feature has already been associated to a 3D feature or
C***  if at a higher elevation was too close to a stronger 2D feature
C***  and has been flagged as "BAD," we can't use it.  Otherwise, proces.
C
            IF(VOLCOMP(VCM_ACH,IFEAT1,ELINDX).EQ. 0.0) THEN
C
C***  Start a potential 3D feature if the count is less than the max
C***  allowed.
C
              IF(NBR_P3DF .LT. NVOMAX) THEN
                NBR_P3DF = NBR_P3DF + 1
                NBR_COMP( NBR_P3DF ) = 1
                NCOMP = 1
C
C***  Enter the potential 3D feature's i[1Id number and elevation
C***  index in CORTABL.
C
                CORTABL( P3D_EL, NBR_P3DF, NCOMP ) = ELINDX
                CORTABL( P3D_ID, NBR_P3DF, NCOMP ) = IFEAT1
C
C***  Enter the Id number into the 2D array, VOLCOMP, to show the
C***  2D component has already been used.
C
                VOLCOMP(VCM_ACH,IFEAT1,ELINDX ) = FLOAT(NBR_P3DF)
C
C***  Assign the X, Y coordinates to local variables for simplicity.
C
                XFEAT1 = VOLCOMP(VCM_XCN,IFEAT1,ELINDX)
                YFEAT1 = VOLCOMP(VCM_YCN,IFEAT1,ELINDX)
C
C***  Set the distance threshold based on the range to the 2D feature
C
                IF(VOLCOMP( VCM_CRG, IFEAT1, ELINDX) .LE.
     >            ADPCRR ) THEN
                  DTHRESH = CIRTH1_SQ
                ELSE
                  DTHRESH = CIRTH2_SQ
                ENDIF
C
C***  Begin vertical association portion of logic.  Potential 3D
C***  features are build one at a time to better mimic the NSSL TDA.
C
C***  Begin loop to test next higher elevation permitted by
C***  NELVINT.  (Note:  NELVINT=2 allows a hiatus of one elevation
C***  cut).  If there is a good correlation then the loop is begun
C***  anew.
C
 75           CONTINUE
                DO 70 EL_INT = 1, NELVINT
C
C***  Compute the index for the higher elevation cut and find the
C***  number of 2D features at this elevation.
C
                  ELINDX2 = ELINDX + EL_INT
                  N2DFEL2 = VOL_2DF_CNT( ELINDX2 )
C
C***  Set the correlation flag to .FALSE.
C
                  GOODCOR = .FALSE.
                  IF(N2DFEL2.GT.0)THEN
                  DO 50 CM2_NDX = 1, N2DFEL2
C
C***  GET THE POINTER THE 2D FEATURE WITH THE NEXT STRONGEST DV
C***  AT THIS ELEVATION.
C
                    IFEAT2 = DVTABL(CM2_NDX, ELINDX2)
C
C** If the component on the higher elevation scan is not already
C** correlated test it.
C
                    IF ( VOLCOMP( VCM_ACH, IFEAT2, ELINDX2 ) .EQ.
     >                 0.0 ) THEN
C
C***  Compute the horizontal separation between the lower and
C***  higher 2D features in Cartesian coordinates.
C
                      XDIST = XFEAT1-VOLCOMP(VCM_XCN,IFEAT2,ELINDX2)
                      YDIST = YFEAT1-VOLCOMP(VCM_YCN,IFEAT2,ELINDX2)
C
C** Compute square of horizontal distance between components.
C
                      HORZDIST2 = XDIST*XDIST + YDIST*YDIST
C
C***  Compare the horizontal separation squared to the distance thresh
C
                      IF ( HORZDIST2 .LE. DTHRESH ) THEN
C
C***  Check if 2D feature[a 2D feature has already been correlated.
C
                        IF(GOODCOR)THEN
C
C***  Flag the current 2D feature as BAD since it has the weaker DV
C
                          VOLCOMP(VCM_ACH,IFEAT2,ELINDX2) = BAD
                        ELSE
C
C***  Increment the number of components in the 3D feature, save the
C*** count in the array NBR_COMP, flag the 2D feature in VOLCOMP, and
C***  add the component to the 3D feature location in CORTABL.
C
                          NCOMP = NCOMP + 1
                          NBR_COMP( NBR_P3DF ) = NCOMP
                          VOLCOMP( VCM_ACH, IFEAT2, ELINDX2 ) =
     >                           FLOAT( NBR_P3DF )
                          CORTABL( P3D_ID, NBR_P3DF, NCOMP) = IFEAT2
                          CORTABL( P3D_EL, NBR_P3DF, NCOMP) = ELINDX2
C
C***  Set the correlation flag to .TRUE. and save the feature Id.
C
                          GOODCOR = .TRUE.
                          IFEAT1 = IFEAT2
                        END IF
                      END IF
                    END IF
C
C***  Get the next 2D feature at this elevation cut.
C
 50               CONTINUE
                  ENDIF
C
C***  If we aren't at the highest elevation in the volume
C***  coverage pattern, then...
C
                  IF(ELINDX2.LT.NUMLEVS)THEN
                    IF (GOODCOR)THEN
C
C***  We have a good correlation and we are not at the highest elv
C***  so we can set the X, Y coordinates of the higher 2D feature
C***  and its elevation index to be the values to test against for a
C***  higher 2D feature still.
C
                      ELINDX = ELINDX2
                      XFEAT1 = VOLCOMP(VCM_XCN,IFEAT1,ELINDX)
                      YFEAT1 = VOLCOMP(VCM_YCN,IFEAT1,ELINDX)
C
C***  Branch directly to the start if the loop for testing higher
C***  2D features.
C
                      GO TO 75
                    ENDIF
C
C***  If here we will fall through and process the next elevation
C***  interval
C
                  ELSE
C
C***  Otherwise we can't process any higher elevation scans, so
C***  we'll restore the lower elevation index ELINDX to the base
C***  elevation index, ELINDX1 and start a new potential 3D feature.
C
                    ELINDX = ELINDX1
                    GO TO 60
                  ENDIF
C
C***  Check to make sure the next elevation interval doesn't put
C***  us higher than the maximum number of levels in the VCP
C
                  IF((ELINDX+NELVINT).GT.NUMLEVS)THEN
                    ELINDX = ELINDX1
                    GOTO 60
                  ENDIF
C
C***  Increment the number of elevation intervals
C
 70             CONTINUE
C
C***  Restore the elevation index for starting a new potential 3D
C***  feature to the base elevation index.
C
                ELINDX = ELINDX1
              ELSE
C
C***  We've exceeded the dimensioned limit for potential 3D features.
C***  Send a message to the console.
C
                WRITE(ERRPHR,899)
 899      FORMAT(1X,'Max # of Pot. 3D Features reached in TDA')
                CALL A3CM70__REPORT_ERROR(ERRPHR)
C
C***  Branch out of the routine since we can't start any more
C***  potential 3D features.
C
                GO TO 999
              ENDIF
C
C***  Endif for feature already correlated or else flagged BAD.
C
            ENDIF
C
C***  Get the next 2D feature at the current base elevation.
C
 60       CONTINUE
C
C***  Endif for # 2D features at base elevation > 0
C
        END IF
C
C***  Get the next base elevation.
C
 80   CONTINUE
C
C************** END OF PROCESSING FOR SUBROUTINE ********************
C
 999  RETURN
      END
