C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/17 18:26:34 $
C $Id: a31879.ftn,v 1.3 2002/12/17 18:26:34 christie Exp $
C $Revision: 1.3 $
C $State: Exp $
C
      SUBROUTINE A31879__VAD2_POINTS(VAD_DATA_HTS, VAD_DATA_AZM,
     +                               BPTR, VADBUF)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A31879__VAD2_POINTS
*.
*.  MODULE VERSION: 0012
*.
*.  MODULE LANGUAGE:  FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       10 27 89      0000      BILL EIDSON          SPR # 80273
*.       08 07 90      0001      MIKE ISTOK           SPR # 90928
*.       02 22 91      0002      CHARLIE BAUMHER      SPR # 91259
*.       12 21 90      0002      B. JOHNSTON          SPR # 91564
*.       05 03 91      0002      M. FRESCH            SPR # 92087
*.       10 22 91      0003      EDWARD WENDOWSKI     SPR # 92410
*.       12 03 91      0004      STEVE ANDERSON       SPR # 92740
*.       12/10/91      0005      ED NICHLAS           SPR 92637 PDL Removal
*.       04/24/92      0006      Toolset              SPR 91895
*.       03/25/93      0007      Toolset              SPR NA93-06801
*.       01/28/94      0008      Toolset              SPR NA94-01101
*.       03/03/94      0009      Toolset              SPR NA94-05501
*.       04/11/96      0010      Toolset              CCR NA95-11802
*.       12/23/96      0011      Toolset              CCR NA95-11807
*.       03/16/99      0012      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A31879__VAD2_POINTS(VAD_DATA_HTS,
*.                         VAD_DATA_AZM, BPTR, VADBUF)
*.
*.  MODULE FUNCTION:
*.
*.       THIS MODULE PERFORMS THE FUNCTION OF PLOTTING THE VAD POINTS
*.    EXTRACTED BY THE ALGORITHM FOR EACH ALTITUDE.
*.
*.  MODULES CALLED: A31875__COUNLV_PKT 
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT        TYPE        DESCRIPTION
*.    -   -----        ----        -----------
*.    G   COLDAT       I*2         Product Data Levels Adaptation Data for the
*.                                 Color Data Tables.
*.    G   MPS_TO_KTS   R*4         (CONSTANT)SCALING FACTOR FOR METERS PER
*.                                 SECOND TO KNOTS
*.    G   VAD_AZM      I*4         (CONSTANT)Index into VAD Data Azimuth Array
*.                                 for the Azimuth.
*.    G   VAD_NRADS    I*4         (CONSTANT)Row position in height based data
*.                                 (VAD_DATA_HTS) of the number of Radials in
*.                                 sample.
*.    G   VAD_REF      I*4         (CONSTANT)Row position in height based data
*.                                 (VAD_DATA_HTS) of azimuth data of the
*.                                 reflectivity date.
*.    G   VAD_VEL      I*4         (CONSTANT)Row position in buffer of azimuth
*.                                 based data (VAD_DATA_AZM). of the velocity.
*.    C   CLRIDX       I*4         Index into color tables.
*.    C   HTIDX        I*4         Index into VAD altitude table of the
*.                                 current requested height.
*.    C   MISSING      R*4         The missing data value for current run
*.                                 (e.g. velocity; elevation angle).
*.    C   PPKT         R*4         Number of pixels per knot.
*.    C   AZ0PIX       R*4         (CONSTANT)Zero degree azimuth position in
*.                                 screen coordinates.
*.    C   PPDEG        R*4         (CONSTANT)Number of pixels per degree.
*.    C   VEL0PIX      R*4         (CONSTANT)Zero knots velocity position in
*.                                 screen coordinates.
*.    P   BPTR         I*4         OUTPUT BUFFER POINTER
*.    P   VADBUF       I*2         OUTPUT BUFFER
*.    P   VAD_DATA_AZM R*4         Array containing azimuthial based VAD
*.                                 algorithm data size, VAD_AZ_PRARAMS by
*.                                 MAX_VAD_HTS.
*.    P   VAD_DATA_HTS R*4         Table of height based VAD algorithm data.
*.
*.    *   OUTPUT  TYPE        DESCRIPTION
*.    -   ------  ----        -----------
*.    P   BPTR    I*4         OUTPUT BUFFER POINTER
*.    P   VADBUF  I*2         OUTPUT BUFFER
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.    P   BPTR              I*4         OUTPUT BUFFER POINTER
*.    P   VADBUF            I*2         OUTPUT BUFFER
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME     TYPE        DESCRIPTION
*.    ----     ----        -----------
*.    AZ       I*4         LOOP COUNTER
*.    AZDAT    R*4         EXTRACTED AZIMUTH OF AZIMUTH DATA
*.    COLOR    I*4         COLOR LEVEL RETURNED FROM COLDAT USING THE
*.                         EXTRACTED REFLECTIVITY
*.    INCR     I*2         CONSTANT, = 1; FOR INCREMENTING
*.    NEW      L*4         FLAG INIDCATING STATUS OF NEW VECTORS
*.    OLDCOLOR I*4         COLOR LEVEL OF LAST POINT
*.    REAL1    R*4         CONSTANT, = 1.0
*.    REFDAT   I*4         EXTRACTED AZ OF REFLECTIVITY DATA
*.    STRT_IDX I*2         CONSTANT, = 1; LOOP LOWER LIMIT
*.    VELDAT   R*4         EXTRACTED AZIMUTH OF VELOCITY DATA
*.    X        R*4         Calculated screen X coordinate of the VAD point
*.                         azimuth and velocity data.
*.    Y        R*4         Calculate screen Y coordinate of the VAD point
*.                         azimuth and velocity data.
*.    YB       R*4         Bottom pixel coordinate of velocity data point
*.                         symbol.
*.    YT       R*4         Top pixel coordinate of velocity data point symbol.
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.    COLRTBL
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A318C7
*.
*.  ERROR CONDITIONS: NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS:  None
*.
*.  DEVIATION FROM STANDARDS:  NONE
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.    THIS MODULE IS COMPILED USING COMP18.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.    THIS MODULE IS LINKED USING LINK18.CSS
*.
*.  MISC:  None
*.
*.*******************************************************************
      IMPLICIT NONE
C
C* GLOBAL DECLARATIONS:
C
$INCLUDE A309.INC/G,**A3PM50 (NLIST)
$INCLUDE A309ADPT.INC/G,**A3CD70C7 (NLIST)
$INCLUDE **A3CD70C5 (NLIST)
$INCLUDE A317BUF.INC/G,**A317VP (NLIST)
$INCLUDE **A317VD (NLIST)
$INCLUDE A318.INC,**A318C7 (NLIST)
C
C* LOCAL DECLARATIONS:
C
      INTEGER AZ, COLOR, REFDAT, BPTR, OLDCOLOR
      REAL VELDAT, AZDAT, X, Y, YT, YB
      LOGICAL NEW
      INTEGER*2 VADBUF(*)
C
      INTEGER*2 STRT_IDX, INCR
      REAL*4 REAL1
      PARAMETER (STRT_IDX = 1)
      PARAMETER (INCR = 1)
      PARAMETER (REAL1 = 1.0)
C
X     LOGICAL PRINTED
X     DATA PRINTED /.FALSE./
C
X     TYPE *,'ENTERING A31879'
      OLDCOLOR = -STRT_IDX
C
C* DO FOR THE NUMBER OF DATA POINTS ON THIS HEIGHT.
C
      DO 1000 AZ=STRT_IDX, VAD_DATA_HTS( VAD_NRADS,HTIDX ), INCR
C
C* EXTRACT THE VELOCITY DATA POINT AND CHECK ITS VALIDITY.
C
         VELDAT = VAD_DATA_AZM( VAD_VEL, AZ, HTIDX )
C
         IF (VELDAT .NE. MISSING) THEN
C
C* VALID DATA POINT, EXTRACT THE AZIMUTH ANGLE ASSOCIATED, AND THE
C* REFLECTIVITY DATA VALUE. CONVERT THE VELOCITY DATA FROM MKS TO
C* NAUTICAL MILES.
C
X     IF (.NOT. PRINTED) THEN
X     WRITE(14,*)'A31879: VALUES IN CALCULATION LINE 228 '
X     WRITE(14,*)'VELDAT = VELDAT * MPS_TO_KTS '
X     WRITE(14,*)'VELDAT EQUALS ',VELDAT
X     WRITE(14,*)'MPS_TO_KTS EQUALS ',MPS_TO_KTS
X     PRINTED = .TRUE.
X     ENDIF
C
            VELDAT=VELDAT*MPS_TO_KTS
C
X     WRITE(14,*)'A31879: RESULTS OF CALCULATION ',VELDAT
C
            REFDAT=VAD_DATA_AZM(VAD_REF, AZ, HTIDX)
            AZDAT =VAD_DATA_AZM(VAD_AZM, AZ, HTIDX)
C
C* EXTRACT THE COLOR CODE VALUE FOR THE REFLECTIVITY DATA POINT
C* FROM THE COLOR TABLE ASSOCIATED WITH THIS WEATHER MODE.
C
            COLOR =COLDAT(REFDAT,CLRIDX)
C
C* CALCULATE THE SCREEN COORDINATES POSITION OF THE DATA POINT FOR
C* THE DISPLAY.
C
            X = AZ0PIX + PPDEG*AZDAT
            Y = VEL0PIX - VELDAT*PPKT
C
C* SET THE "NEW" VECTOR FLAG IF THE OLD COLOR AND
C* THE PRESENT COLOR AREN'T THE SAME
C
            IF (OLDCOLOR .NE. COLOR) THEN
X     TYPE *,'79: OLDCOLOR .NE. COLOR START NEW ',OLDCOLOR,' ',COLOR
               NEW = .TRUE.
            ENDIF
C
C* SET Y TOP AND BOTTOM PIXEL COORDINATES TO Y VALUE PLUS AND MINUS
C* ONE. THIS RESULTS IN A LINE 3 PIXELS IN LENGTH.
C
            YT = Y + REAL1
            YB = Y - REAL1
C
C* CALL A31875 TO BUILD A DATA POINT IN THE OUTPUT BUFFER
C
            CALL A31875__COUNLV_PKT(NEW,X,YT,X,YB,COLOR,BPTR,VADBUF)
C
C* SUBTRACT ONE FROM THE X VALUE AND DRAW ANOTHER VECTOR SO THAT THE
C* VELOCITY DATA POINT IS REPRESENTED BY A 2X3 PIXEL SYMBOL.
C
            X = X - REAL1
C
            CALL A31875__COUNLV_PKT(NEW,X,YT,X,YB,COLOR,BPTR,VADBUF)
C
C* SET THE OLD COLOR TO THE PRESENT COLOR TO COMPARE
C* TO THE NEXT POINTS COLOR
C
            OLDCOLOR = COLOR
X     TYPE *,'79: OLDCOLOR = ',OLDCOLOR
         ENDIF
 1000 CONTINUE
C
C
C* EXIT THE ROUTINE.
C
      RETURN
      END
