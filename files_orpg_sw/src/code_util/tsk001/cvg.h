/*
 * RCS info
 * $Author: ccalvert $
 * $Locker:  $
 * $Date: 2009/08/19 15:11:40 $
 * $Id: cvg.h,v 1.15 2009/08/19 15:11:40 ccalvert Exp $
 * $Revision: 1.15 $
 * $State: Exp $
 */
/* cvg.h */

#ifndef _CVG_H_
#define _CVG_H_

#include <Xm/Xm.h> 
#include <Xm/Protocols.h>
#include <Xm/MwmUtil.h>
#include <stdlib.h>
#include "palette.h"

#include "global.h"

/*  process id of child database reader task */
pid_t new_pid; 
extern void exit_callback(Widget w, XtPointer client_data, XtPointer call_data);

/* child program */
extern int read_db();

extern void init_db_prod_list();

Widget shell;
XtAppContext app;

int disp_width, disp_height; /*  size of display screen */

int standalone_flag;  /*  compiled with the standalone option? */

int num_products;   /* the number of products in the selected input buffer at last scan */
                    /* anim.c, anim_fp.c, prod_load.c, prod_select.c */
                    
/* CVG 9.1 */
extern char config_dir[255]; 



/* the main screen is the one currently selected by the buttons in the main window */
Widget main_screen; /*  set to null and never used again, found in click.h and packetselect.h */
Widget screen_1, screen_2, screen_3;
Widget legend_screen_1, legend_screen_2, legend_screen_3;
Widget legend_frame_1, legend_frame_2, legend_frame_3;


/* where the scroll bars currently are */
/* No support for linking scroll bars for screen 3. */
int scroll1_xpos, scroll1_ypos, scroll2_xpos, scroll2_ypos;
int scroll3_xpos, scroll3_ypos;

extern int tabheight, tabwidth;  /* dimensions of tab screen */

/*  variables used to specifiy the initial placement of screens */
int spacexy, screen1x, screen1y, screen2x, screen2y, tab1x, tab1y, tab2x, tab2y;
int screen3x, screen3y, tab3x, tab3y;

Dimension width=500,height=500;   /* dimensions of the visible screen (small size), */
                                  /* the size of the product display portal         */
/* dimensions of the gui buttons */
Dimension bwidth=125,bheight=25;
Dimension barwidth=200;  /* size of the sidebar for the displayed image */
Dimension sidebarwidth = 100, sidebarheight = 700;

int img_size = LARGE_IMG;
Dimension pwidth=LARGE_IMG, pheight=LARGE_IMG; /* dimensions of the pixmap canvas */


int  selected_screen;  /* the screen that we want to perform our operations on */

int overlay_flag, verbose_flag, select_all_flag;
int ctr_loc_icon_visible_flag;
XmString hide_xmstr, show_xmstr;
int use_cvg_list_flag, prev_cvg_list_flag;
/* CVG 9.0 */
int large_screen_flag, large_image_flag;

int prod_filter;

int area_label;
int area_symbol;
int area_line_type;
int include_points_flag;


int transp_label_flag1, map_flag1, az_line_flag1, range_ring_flag1;
int transp_label_flag2, map_flag2, az_line_flag2, range_ring_flag2;

int transp_label_flag3, map_flag3, az_line_flag3, range_ring_flag3;


int road_d, rail_d, admin_d, co_d;





int linked_flag;  /* flag to determine if scrolling and data click are linked */


/* the animation data structures for each screen, see global.h for typedef */
anim_data anim1, anim2, anim3;



/* stuff for color palettes */
int palette_size;
packet_palette *the_palettes[MAX_PACKETS];
int num_listings, packet_index;
XColor display_colors[256];
XColor global_display_colors_1[256];
XColor global_display_colors_2[256];
XColor global_display_colors_3[256];
int global_palette_size_1;
int global_palette_size_2;
int global_palette_size_3;
int global_packet_list[100];
int global_packet_list_2[100];
int global_packet_list_3[100];


/*  how much of this do we need here? */
char disk_last_filename[300];  /* used by gif_output and png_output */



screen_data *sd1, *sd2, *sd;
screen_data *sd3;


/* value set by variable CV_ORPG_BUILD to permit use 
   of Linear Buffers generated by prior ORPG versions */
int orpg_build_i;


/* protoypes */
void check_libraries(int install_type);

void init_globals();

extern void setup_default_screen_data_values(screen_data *the_sd);

extern void write_descript_source(int use_cvg_list);
extern void write_orpg_build(int build);
extern void init_prefs();
extern void setup_gui_display();
extern void load_prefs();


extern void build_list();

#endif






