LE_send_msg(3) 		   ORPG SDD Manpage   		LE_send_msg(3)

NAME
LE_send_msg - send a log-error message

SYNOPSIS
#include <infr.h>
void LE_send_msg (int code, char *format, ...);

DESCRIPTION
Function LE_send_msg is the basic function for a process to report a
message. The argument "code" is an error code for the particular message.
The error code may be used to indicate the message characteristics such 
as the category, group, type and severity of the message. The message code 
is application specific and interpreted typically by application processes 
(e.g. the system monitor and/or system manager). The second argument 
"format" and the following variable list of arguments are used for 
generating a free ASCII text message like printf does. The text message is 
normally prepared for human interpretation. "format" can be NULL or an 
empty string if there is no additional information except the "code".

Each message generated by LE_send_msg uses the following data structure:

	typedef struct {
	    time_t time;		/* msg generation time */
	    int code;			/* msg code */
	    unsigned int host_ip;	/* host IP address */
	    int pid;			/* process id */
	    int n_reps;			/* number of msg repetitions */
	    char text[1];		/* text msg */
	} LE_message;

The first field is the message generation time. The second field is the 
error code passed via the first argument of LE_send_msg. "host_ip" is the 
IP address of the host on which the reporting process runs. "pid" is the 
pid number of this process. Field "n_reps" will be explained later. And 
finally "text" is a NULL terminated text string of the following format:

	process_name: user text (repeated %d times)

where process_name is the process name and "user text" is the free text 
message.

The text field of a log or error message sent by LE_send_msg must be no 
longer than LE_MAX_MSG_LENGTH (256) - 1. If this condition is not 
satisfied, a fatal memory error may result.

Only samples of consecutive repeated messages are sent for output. The 
first and the last messages in a sequence of consecutive repeated messages 
are always sent. Samples of consecutive repeated messages are sent once in 
every two seconds. The "n_reps" field stores the cumulative number of 
consecutive repetitions of the LE_send_msg calls with the same message. 

The output of LE_send_msg, by default, goes to the standard output port 
on the local host. When it is printed on the standard output port, it is 
printed in the following format:

	process_name: user text (repeated %d times)

Recall that The first part "process_name: user text" is the "text" field 
of the message. The second part "(repeated %d times)" will be printed only 
when "n_reps" > 1.

The output of LE_send_msg can however be redirected to an existing Linear 
Buffer. When an LB is used for the messages, the entire LE_message data 
structure is sent. To direct the messages to an LB, one must call functions
LE_lb_name and LE_init in the code and use the command line option
"-L lb_name" when starting the process,.  

The "-L" command line option switches the LE output to the LB of name 
"lb_name". "lb_name" can be "default", which means that the name specified 
by function LE_lb_name is used. Function LE_lb_name informs the LE module 
that an LB will be used for the messages. An LB name can be specified via 
argument "lb_name". If "lb_name" is NULL or an empty string, the LB 
name must be specified later in the run time through command line option 
"-L". The LB name specified with command line option "-L" will override 
the one specified by function LE_lb_name. Because the "-L" command option
is used by the LE module, an application that uses LE module must not
use "-L" for other purposes and it has to escape "-L" option when parsing
the command lines.

EXAMPLES
#include <infr.h>

main (int argc, char **argv)
{

   ......

   LE_init (argc, argv);

   fd = socket (...);

   if (fd < 0) {
      LE_send_msg (ERR_FATAL | ERR_SYSTEM | CPC112, 
                   "socket failed (errno = %d)\n", errno);
      exit (1);
   }

   ......
}

SEE ALSO
LE_init(3), LE_lb_name(3)
