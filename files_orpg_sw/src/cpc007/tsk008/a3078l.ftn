C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/04 14:37:07 $
C $Id: a3078l.ftn,v 1.3 2002/12/04 14:37:07 christie Exp $
C $Revision: 1.3 $
C $State: Exp $
C
      SUBROUTINE A3078L__ZERO_CROSS(I)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A3078L__ZERO_CROSS
*.
*.  MODULE VERSION: 0011
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       05 01 89      0000      CHARLIE BAUMHER      SPR # 80271
*.       05 09 90      0001      PAUL PISANI          SPR # 90697
*.       02 13 91      0002      MARK FRESCH          SPR # 91248
*.       12 03 91      0003      STEVE ANDERSON       SPR # 92740
*.       12/10/91      0004      ED NICHLAS           SPR 92637 PDL Removal
*.       04/20/92      0005      Toolset              SPR 91895
*.       03/25/93      0006      Toolset              SPR NA93-06801
*.       01/28/94      0007      Toolset              SPR NA94-01101
*.       03/03/94      0008      Toolset              SPR NA94-05501
*.       04/11/96      0009      Toolset              CCR NA95-11802
*.       12/23/96      0010      Toolset              CCR NA95-11807
*.       03/16/99      0011      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE:CALL A3078L__ZERO_CROSS(I)
*.
*.  MODULE FUNCTION:
*.
*.     THIS ROUTINE CALCULATES THE BEGINNING AND ENDING AZIMUTH FOR
*.     THE P1P2 PLANE. IF THE PLANE "CROSSES" OVER THE 360 DEGREE
*.     PLANE, THEN IT SETS AN APPROPRIATE FLAG IN THE ZEROCROSS TBL.
*.
*.  MODULES CALLED: NONE.
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT      TYPE        DESCRIPTION
*.    -   -----      ----        -----------
*.    C   BEG_AZ     R*4         Beginning azimuth of P1-P2 Plane.
*.    C   END_AZ     R*4         Ending azimuth of P1-P2 plane.
*.    C   HEMI       I*4         Hemispherical orientation of P1-P2 plane.
*.    C   ORIG_PTS   R*4         Table of cross-setion end points for each
*.                               request.
*.    C   NORTH_HEMI I*4         (CONSTANT)Flag for north hemispherical line.
*.    C   P1_AZZ     I*4         (CONSTANT)Constant used as an index into the
*.                               buffer ORIG_PTS for P1's Azimuth.
*.    C   P2_AZZ     I*4         (CONSTANT)Constant used as an index into the
*.                               buffer ORIG_PTS for P2's Azimuth.
*.    C   SOUTH_HEMI I*4         (CONSTANT)Flag for South Hemispherical Line.
*.    C   ZERO       I*4         (CONSTANT)Program parameter for 0.
*.    P   I          I*4         Product requested index.
*.
*.    *   OUTPUT    TYPE        DESCRIPTION
*.    -   ------    ----        -----------
*.    C   BEG_AZ    R*4         Beginning azimuth of P1-P2 Plane.
*.    C   END_AZ    R*4         Ending azimuth of P1-P2 plane.
*.    C   ZEROCROSS L*4         Set if P1-P2 plan crosses 360.
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME       TYPE        DESCRIPTION
*.    ----       ----        -----------
*.    PI         R*4         CONSTANT VALUE OF 180.0 DEGREES
*.    QUADIV_BEG R*4         270.0 DEGREES ( QUAD IV BEGIN )
*.    QUADI_END  R*4         90.0 DEGREES ( QUAD I END )
*.    TOLERANCE  R*4         TOLERANCE VALUE OF 0.5
*.    TWOPI      R*4         CONSTANT VALUE OF 360.0 DEGREES
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A3078CA
*.
*.  ERROR CONDITIONS: NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS:  NONE
*.
*.  DEVIATION FROM STANDARDS:  NONE
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.        THIS MODULE IS COMPILED USING THE COMP07.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.        THIS MODULE IS LINKED USING THE LINK07.CSS
*.
*.  MISC:  NONE
*.
*.*******************************************************************
C
      IMPLICIT NONE
C*
C*  INCLUDE COMMON PARAMETER FILES
C*
$INCLUDE A307.INC,**A30788  (     NLIST )
$INCLUDE          **A3078CA (     NLIST )
C*
C*********************************************************************
C* LOCAL DECLARATIONS
C*
C
      INTEGER*4    I
C
      REAL*4       PI,TWOPI
      REAL         TOLERANCE
      REAL*4       QUADI_END, QUADIV_BEG
C
      PARAMETER    ( QUADI_END = 90.0 )
      PARAMETER    ( QUADIV_BEG = 270.0 )
      PARAMETER    ( PI = 180.0 )
      PARAMETER    ( TWOPI = 360.0 )
      PARAMETER    ( TOLERANCE = 0.5 )
C*
C*********************************************************************
C*  INITIALIZE THE QUADRANT POINTS
C*
      ZEROCROSS(I) =  .FALSE.
C
      IF ( HEMI(I) .EQ. NORTH_HEMI ) THEN
        BEG_AZ(I)    =  ORIG_PTS(P1_AZZ,I) - TOLERANCE
        END_AZ(I)    =  ORIG_PTS(P2_AZZ,I) + TOLERANCE
      ELSE
        IF ( HEMI(I) .EQ. SOUTH_HEMI ) THEN
          BEG_AZ(I) = ORIG_PTS(P2_AZZ,I) - TOLERANCE
          END_AZ(I) = ORIG_PTS(P1_AZZ,I) + TOLERANCE
        ENDIF
      ENDIF
C*
C********************************************************************
C*  NORMALIZE THE BEGINNING AND ENDING ENPOINTS TO BE BETWEEN 0
C*  AND 360 DEGREES
C*
      IF ( BEG_AZ(I) .LT. ZERO ) THEN
        BEG_AZ(I) = BEG_AZ(I) + TWOPI
        ZEROCROSS(I) = .TRUE.
      ENDIF
C
      IF ( END_AZ(I) .GT. TWOPI ) THEN
        END_AZ(I) = END_AZ(I) - TWOPI
        ZEROCROSS(I) = .TRUE.
      ENDIF
C*
C*********************************************************************
C*  DETERMINE IF THE P1-P2 PLANE CROSSES THE 360 DEGREES AZIMUTH,
C*  THIS OCCURS IN THE FOLLOWING CASES: ( N.H. CASES ONLY )
C*
C*       1.) P1 IN QUAD IV,   P2 IN QUAD I
C*       2.) P1 IN QUAD IV,   P2 IN QUAD II
C*       3.) P1 IN QUAD III,  P2 IN QUAD I
C*
C* IF NORTHERN HEMISPHERE AND BEGIN AZIMUTH IS BETWEEN 270 AND
C* 360 DEGREES INCLUSIVE AND END AZIMUTH IS BETWEEN 0 AND 180
C* DEGREES INCLUSIVE; SET ZEROCROSS TABLE ENTRY TO TRUE
C*
        IF ( HEMI(I) .EQ. NORTH_HEMI ) THEN
          IF ( BEG_AZ(I) .GE. QUADIV_BEG  .AND.
     $         BEG_AZ(I) .LE. TWOPI ) THEN
C
            IF ( END_AZ(I) .GE. ZERO   .AND.
     $           END_AZ(I) .LE. PI ) THEN
              ZEROCROSS(I) = .TRUE.
            ENDIF
          ENDIF
C*
C* IF BEGIN AZIMUTH IS BETWEEN 180 AND 270 DEGREES INCLUSIVE AND
C* END AZIMUTH IS BETWEEN 0 AND 90 DEGREES INCLUSIVE; SET
C* ZEROCROSS TABLE ENTRY TO ZERO.
C*
          IF ( BEG_AZ(I) .GE. PI   .AND.
     $         BEG_AZ(I) .LE. QUADIV_BEG ) THEN
C
            IF ( END_AZ(I) .GE. ZERO  .AND.
     $           END_AZ(I) .LE. QUADI_END ) THEN
              ZEROCROSS(I) = .TRUE.
            ENDIF
          ENDIF
C
        ENDIF ; ZERO-CROSS TEST FOR N.H. CASES
C
X     TYPE *,'8L: BEG_AZ   END_AZ  = ',BEG_AZ(I),END_AZ(I)
X     TYPE *,'8L: FINISHED A3078L, ZERO_CROSS = ',ZEROCROSS(I)
      RETURN
      END
