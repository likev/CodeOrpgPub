C
C RCS info
C $Author: steves $
C $Locker:  $
C $Date: 2011/06/09 19:06:18 $
C $Id: a3078t.ftn,v 1.1 2011/06/09 19:06:18 steves Exp $
C $Revision: 1.1 $
C $State: Exp $
C
      SUBROUTINE A3078T__TEST_REQ(REQTAB,I,P1P2LEN)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A3078T__TEST_REQ
*.
*.  MODULE VERSION: 0000
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       06 07 11      0000      STEVE SMITH      
*.
*.  CALLING SEQUENCE:
*.     CALL A3078T__TEST_REQ(REQTAB, I, P1P2LEN)
*.
*.  MODULE FUNCTION:
*.
*.     THIS ROUTINE DETERMINES THE LENGTH OF THE CROSS_SECTION.   
*.
*.*******************************************************************
      IMPLICIT NONE
C
C*  INCLUDE COMMON PARAMETER FILES
C*
$INCLUDE A309.INC/G,**A3PM50  (NLIST)
$INCLUDE A307.INC,**A30788  (     NLIST )
$INCLUDE          **A3078CA (     NLIST )
C*
C*********************************************************************
C* LOCAL DECLARATIONS
C*
      INTEGER*2    REQTAB(REQROWS,REQCOLS)
      REAL         TEMP(2)
C
      INTEGER*4    I
C
      REAL*4       XUP1, YUP1
      REAL*4       XUP2, YUP2
      REAL*4       AZ_FRMT, RNG_FRMT
      REAL*4       PTS(4)
C
      LOGICAL      SWITCHED
C
      PARAMETER    ( AZ_FRMT = .1 )
      PARAMETER    ( RNG_FRMT = .1 )

      REAL*4       DELTA_THETA, ARG
      REAL*4       P1P2LEN
      REAL*4       RADTODEG
      REAL*4       PI, MAX_AZ
      REAL*4       RINIT, AZ_ACCURCY
C
      PARAMETER    ( AZ_ACCURCY = .1 )
      PARAMETER    ( RADTODEG = 1./DEGTORAD )
      PARAMETER    ( PI  =  180.0, MAX_AZ = 360.0 )
      PARAMETER    ( RINIT = 0. )
C

      character*80 text
C
C*
C*********************************************************************
C*  CONVERT THE P1/P2 AZ/RANGE TO INTERNAL FORMAT
C*  AZ: INTEGER DEG*10 TO REAL; RANGE: INTEGER NM*10 TO REAL KM
C*
      PTS(P1_AZZ) = REQTAB(P1_AZ,I) * AZ_FRMT
      PTS(P1_RAN) = REQTAB(P1_RANGE,I) * RNG_FRMT * NM_TO_KM
      PTS(P2_AZZ) = REQTAB(P2_AZ,I) * AZ_FRMT
      PTS(P2_RAN) = REQTAB(P2_RANGE,I) * RNG_FRMT * NM_TO_KM

C*
C*********************************************************************
C*  CALCULATE THE X,Y COORDINATES FROM THE GIVEN AZIMUTH/RANGES
C*  FOR P1 AND P2
C*
      XUP1 = PTS(P1_RAN) * SIN(PTS(P1_AZZ) * DEGTORAD)
      YUP1 = PTS(P1_RAN) * COS(PTS(P1_AZZ) * DEGTORAD)
      XUP2 = PTS(P2_RAN) * SIN(PTS(P2_AZZ) * DEGTORAD)
      YUP2 = PTS(P2_RAN) * COS(PTS(P2_AZZ) * DEGTORAD)
C*
C*********************************************************************
C*  LABEL THE TWO INPUT POINTS BASED ON THE FOLLOWING:
C*  THE WESTERNMOST POINT IS POINT P1 EXCEPT, WHEN THE
C*  POINT ARE IN A TRUE NORTH/SOUTH ORIENTATION, IN WHICH CASE
C*  THE NORTHERNMOST POINT IS POINT P1.
C*
      SWITCHED = .FALSE.
C
C*  CHECK IF NORTH/SOUTH ORIENTATION
C
      IF ( ABS(XUP1 - XUP2) .LT. DEGTORAD ) THEN
C
C*  IF Y-COORDINATE POINT 2 IS GREATER THAN POINT 1, SET FLAG
C
        IF (YUP2 .GT. YUP1 ) SWITCHED = .TRUE.
C
      ELSE
C
C*  IF X-COORDINATE POINT 1 IS GREATER THAN POINT 2, SET FLAG
C
        IF ( XUP1 .GT. XUP2 ) SWITCHED = .TRUE.
C
      ENDIF
C
C*  IF THE POINTS ARE TO BE SWITCHED, THEN EXCHANGE THEM
C
      IF ( SWITCHED ) THEN
        TEMP(ONE) = PTS(P1_AZZ)
        TEMP(TWO) = PTS(P1_RAN)
C
C*  POINT 2 INTO POINT 1:
C
        PTS(P1_AZZ) = PTS(P2_AZZ)
        PTS(P1_RAN) = PTS(P2_RAN)
C
C*  POINT 1 INTO POINT 2:
C
        PTS(P2_AZZ) = TEMP(ONE)
        PTS(P2_RAN) = TEMP(TWO)
C
      ENDIF
C*
C*********************************************************************
C*  CALCULATE ANGLE DELTA_THETA, P1P2 LENGTH, THETA3
C*********************************************************************

C*
C*********************************************************************
C*  CHECK IF ONE OF THE ENPOINTS IS THE RADAR LOCATION
C*  IF SO, MAKE SURE AZIMUTHS ARE EQUAL.
C*
      IF ( PTS(P1_RAN) .EQ. RINIT )
     $     PTS(P1_AZZ) = PTS(P2_AZZ)
C
      IF ( PTS(P2_RAN) .EQ. RINIT )
     $     PTS(P2_AZZ) = PTS(P1_AZZ)
C*
C*********************************************************************
C*  CALCULATE ANGLE DELTA_THETA
C*
      DELTA_THETA = ABS( PTS(P2_AZZ) - PTS(P1_AZZ) )
      IF (DELTA_THETA.GT.PI) DELTA_THETA = MAX_AZ - DELTA_THETA
C*
C*********************************************************************
C*  DETERMINE THE HEMISPHERE CASE FOR THIS CROSS-SECTION ORIENTATION
C*
C*  CHECK IF DELTA THETA = 180 ( ALLOW .1 DEGREE TOLERANCE TO ACCOUNT
C*  FOR FLOATING POINT ROUND OFF ERRORS)
C*
      IF ( ABS(PI - DELTA_THETA) .LE. AZ_ACCURCY ) THEN
C
C*  CROSS SECTION THROUGH RADAR ORIGIN
C
        P1P2LEN = PTS(P1_RAN) + PTS(P2_RAN)
C
      ELSE IF (PTS(P1_AZZ).EQ.PTS(P2_AZZ)) THEN
C
C* CROSS-SECTION IS ALONG A RADIAL ( P1_AZ = P2_AZ )
C
        P1P2LEN = ABS(PTS(P1_RAN) - PTS(P2_RAN))

      ELSE
C
C*  CONVERT DELTA THETA TO RADIANS
C
        DELTA_THETA = DELTA_THETA*DEGTORAD
C*
C*********************************************************************
C*  CALCULATE THE LENGTH (KM) OF LINE BETWEEN P1 AND P2 USING THE
C*  LAW OF COSINES
C
        P1P2LEN = PTS(P1_RAN)**TWO + PTS(P2_RAN)**TWO
     $    - TWO*PTS(P1_RAN)*PTS(P2_RAN)*COS(DELTA_THETA)
        P1P2LEN = SQRT(P1P2LEN)
C
      ENDIF

      RETURN
      END
