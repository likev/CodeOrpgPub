C
C RCS info
C $Author: christie $
C $Locker:  $
C $Date: 2002/12/04 14:38:19 $
C $Id: a3078n.ftn,v 1.3 2002/12/04 14:38:19 christie Exp $
C $Revision: 1.3 $
C $State: Exp $
C
      SUBROUTINE A3078N__LINE_AZ_RNG(I, DIST, AZ, RNG)
*.********************************************************************
*.                    M O D U L E  P R O L O G U E
*.
*.  MODULE NAME: A3078N__LINE_AZ_RNG
*.
*.  MODULE VERSION: 0011
*.
*.  MODULE LANGUAGE: FORTRAN
*.
*.  CHANGE HISTORY:
*.
*.       DATE          VERSION   PROGRAMMER           NOTES
*.       ----------    -------   ----------------     --------------------
*.       10 03 89      0000      PAUL JENDROWSKI      SPR # 80271
*.       05 09 90      0001      PAUL PISANI          SPR # 90697
*.       11 03 90      0002      MARK FRESCH          SPR # 91248
*.       12 03 91      0003      STEVE ANDERSON       SPR # 92740
*.       12/10/91      0004      ED NICHLAS           SPR 92637 PDL Removal
*.       04/20/92      0005      Toolset              SPR 91895
*.       03/25/93      0006      Toolset              SPR NA93-06801
*.       01/28/94      0007      Toolset              SPR NA94-01101
*.       03/03/94      0008      Toolset              SPR NA94-05501
*.       04/11/96      0009      Toolset              CCR NA95-11802
*.       12/23/96      0010      Toolset              CCR NA95-11807
*.       03/16/99      0011      Toolset              CCR NA98-23803
*.
*.  CALLING SEQUENCE: CALL A3078N__LINE_AZ_RNG(I,DIST,AZ,RNG)
*.
*.  MODULE FUNCTION:
*.
*.     THIS MODULE COMPUTES THE AZIMUTH AND RANGE OF A POINT ON THE
*.     LINE DEFINED BY P1 AND P2.  THE POINT IS DEFINED BY SPECIFYING
*.     THE DISTANCE FROM P1 ON THE LINE IN BETWEEN P1 AND P2.
*.
*.  MODULES CALLED: NONE.
*.
*.  PARAMETERS:          (*:  G = GLOBAL, C = COMMON, P = PASSED)
*.
*.    *   INPUT      TYPE        DESCRIPTION
*.    -   -----      ----        -----------
*.    C   HEMI       I*4         Hemispherical orientation of P1-P2 plane.
*.    C   ORIG_PTS   R*4         Table of cross-setion end points for each
*.                               request.
*.    C   P1P2_LENG  R*4         Length of P1-P2 plane.
*.    C   THETA3     R*4         Azimuth angle between P1-P2 line and 0-P1
*.                               (the baseline).
*.    C   NORTH_HEMI I*4         (CONSTANT)Flag for north hemispherical line.
*.    C   ORIG_CROSS I*4         (CONSTANT)Origin cross plane.
*.    C   P1_AZZ     I*4         (CONSTANT)Constant used as an index into the
*.                               buffer ORIG_PTS for P1's Azimuth.
*.    C   P1_RAN     I*4         (CONSTANT)Constant used as an index into the
*.                               buffer ORIG_PTS for P1's Range.
*.    C   P2_AZZ     I*4         (CONSTANT)Constant used as an index into the
*.                               buffer ORIG_PTS for P2's Azimuth.
*.    C   P2_RAN     I*4         (CONSTANT)Constant used as an index into the
*.                               buffer ORIG_PTS for P2's Range.
*.    C   TWO        I*4         (CONSTANT)Constant value of an integer 2.
*.    P   AZ         R*4         AZIMUTH OF THE POINT
*.    P   DIST       R*4         DISTANCE FROM P1 ON LINE P1P2
*.    P   I          I*4         Product requested index.
*.    P   RNG        R*4         RANGE OF THE POINT
*.
*.    *   OUTPUT  TYPE        DESCRIPTION
*.    -   ------  ----        -----------
*.    P   AZ      R*4         AZIMUTH OF THE POINT
*.    P   RNG     R*4         RANGE OF THE POINT
*.
*.    *   ACTUAL ARGUMENTS  TYPE        DESCRIPTION
*.    -   ----------------  ----        -----------
*.
*.  DATABASE/FILE REFERENCE:  None
*.
*.  INTERNAL TABLES/WORK AREA:
*.
*.    NAME       TYPE        DESCRIPTION
*.    ----       ----        -----------
*.    D          R*4         DISTANCE FROM THETA3 ON P1P2
*.    MAX_AZ     R*4         MAX DEGREES IN CIRCLE
*.    P_R        R*4         RANGE OF POINT AT THETA3
*.    RAD_IN_DEG R*4         CONVERTS DEGREES TO RADIANS
*.    RINIT      R*4         PARAMETER FOR REAL ZERO
*.
*.  GLOBAL BLOCKS REFERENCED:
*.
*.
*.  COMMON BLOCKS REFERENCED:
*.
*.    A3078CA
*.
*.  ERROR CONDITIONS: NONE
*.
*.  ASSUMPTIONS/RESTRICTIONS:  NONE
*.
*.  DEVIATION FROM STANDARDS:  NONE
*.
*.  COMPILATION INSTRUCTIONS:
*.
*.        THIS MODULE IS COMPILED USING THE COMP07.CSS
*.
*.  LINKAGE INSTRUCTIONS:
*.
*.        THIS MODULE IS LINKED USING THE LINK07.CSS
*.
*.  MISC:  NONE
*.
*.*******************************************************************
C*
      IMPLICIT NONE
C*
C*  MODULE   A3078N__LINE_AZ_RNG( I, DIST, AZ, RNG )
C*
C*  INCLUDE COMMON PARAMETER FILES
C*
$INCLUDE A307.INC,**A30788  (     NLIST )
$INCLUDE          **A3078CA (     NLIST )
C*
C*********************************************************************
C* LOCAL DECLARATIONS
C*
C
      INTEGER   I
      REAL      AZ, RNG, DIST, D, R, A, P_R
      REAL      RINIT, MAX_AZ, RAD_IN_DEG
      PARAMETER (RINIT=0., MAX_AZ=360., RAD_IN_DEG=3.1415926/180.)
C
C* DETERMINE WHICH CASE THIS IS
C
X     TYPE *,'8N: REQUEST # ',I,'  HEMISPHERE = ',HEMI(I)
C
      IF (HEMI(I).EQ.ORIG_CROSS) THEN
C
C* LINE PASSES THROUGH RADAR ORIGIN
C* POINT IS EITHER ALONG P1'S OR P2'S AZIMUTH
C
        IF (DIST.LE.ORIG_PTS(P1_RAN,I)) THEN
C
C* POINT IS ALONG P1'S AZIMUTH
C
          RNG = ORIG_PTS(P1_RAN,I) - DIST
          AZ = ORIG_PTS(P1_AZZ,I)
        ELSE
C
C* POINT IS ALONG P2'S AZIMUTH
C
          RNG = ORIG_PTS(P2_RAN,I) - (P1P2_LENG(I) - DIST)
          AZ = ORIG_PTS(P2_AZZ,I)
        END IF
      ELSE IF ( ORIG_PTS(P1_AZZ,I).EQ.ORIG_PTS(P2_AZZ,I) ) THEN
C
C* CROSS-SECTION IS ALONG A RADIAL
C
        IF ( ORIG_PTS(P1_RAN,I).GT.ORIG_PTS(P2_RAN,I) ) THEN
          RNG = ORIG_PTS(P1_RAN,I) - DIST
        ELSE
          RNG = ORIG_PTS(P1_RAN,I) + DIST
        END IF
        AZ = ORIG_PTS(P1_AZZ,I)
      ELSE
C
C* NORTHERN OR SOUTHERN CASE, SET UP VALUES FOR EQUATIONS
C
         D = DIST
         P_R = ORIG_PTS(P1_RAN,I)
C
X        TYPE *,'8N: DIST=',DIST,'  THETA3=',THETA3(I),'  P1P2=',
     $           P1P2_LENG(I),'  D=',D,'  P_R=',P_R
C
C* USE LAW OF COSINES TO COMPUTE RANGE TO THE LINE AT THE DISTANCE
C* D FROM THE POINT WITH THETA3
C
         RNG=SQRT(D*D + P_R*P_R - TWO*D*P_R*COS(THETA3(I)*RAD_IN_DEG))
C
C* USE LAW OF COSINES TO GET DELTA ANGLE AND SUBTRACT FROM END POINT
C* AZIMUTH TO GET POINT'S AZIMUTH
C
         AZ = ( RNG*RNG + P_R*P_R - D*D )/( TWO*RNG*P_R )
         IF (HEMI(I).EQ.NORTH_HEMI) THEN
C
C* AZIMUTHS INCREASE FROM P1 TO P2
C
           AZ = ORIG_PTS(P1_AZZ,I) + ACOS( AZ )/RAD_IN_DEG
           IF (AZ.GT.MAX_AZ) AZ = AZ - MAX_AZ
         ELSE
C
C* SOUTH_HEMI CASE, AZIMUTHS DECREASE FROM P1 TO P2
C
           AZ = ORIG_PTS(P1_AZZ,I) - ACOS( AZ )/RAD_IN_DEG
           IF (AZ.LT.RINIT) AZ = MAX_AZ + AZ
         END IF
       END IF
C
X      TYPE *,'8N: EXITING,  AZ, RNG = ',AZ, RNG
C
       RETURN
       END
